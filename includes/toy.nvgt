toy@[]toys(0);
class toy
{
bool autobreak;
int getsound, hurtsound, toysound;
int tx;
int ty;
int timeout;
timer timeout_timer;
toy(int x, int y,int tt,bool br)
{
tx=x;
ty=y;
timeout=tt;
autobreak=br;
toysound=toypool.play_2d("toyloop"+random(1,40)+".ogg", me.x, me.y, tx, ty, true);
toypool.update_sound_2d(toysound,tx,ty);
}
}
void toyloop()
{
for(uint i=0; i<toys.length(); i++)
{
if(toys[i].timeout_timer.elapsed>=toys[i].timeout and toys[i].autobreak==true)
{
toypool.destroy_sound(toys[i].toysound);
toys[i].hurtsound=toypool.play_2d("toybreak"+random(1,2)+".ogg", me.x, me.y, toys[i].tx, toys[i].ty, false);
toys.remove_at(i);
return;
}
if(absolute(me.x - toys[i].tx) <= 2 and absolute(me.y - toys[i].ty) <= 2)
{
toypool.destroy_sound(toys[i].toysound);
toys[i].getsound=toypool.play_stationary("toyget"+random(1,2)+".ogg",false);
collected_toys+=1;
total_collected_toys+=1;
update_achievements();
writedata();
toys.remove_at(i);
return;
}
}
}
void spawn_toy(int x,int y,int timeout,bool autobreak)
{
toy t1(x,y,timeout,autobreak);
toys.insert_last(t1);
}
void destroy_all_toys()
{
for(uint i=0; i<toys.length(); i++)
{
toypool.destroy_sound(toys[i].toysound);
}
toys.resize(0);
}
