class AchievementTracker
{
string name;
string baseName;
int[] thresholds;
int currentTier;
bool isSessionBased;
AchievementTracker()
{
name = "";
baseName = "";
currentTier = 0;
isSessionBased = false;
}
AchievementTracker(string achName, string base, int[] achThresholds, bool session = false)
{
name = achName;
baseName = base;
thresholds = achThresholds;
currentTier = 0;
isSessionBased = session;
}
int get_value()
{
if (name == "Toys") return isSessionBased ? collected_toys : total_collected_toys;
if (name == "Keys") return isSessionBased ? collected_keys : total_collected_keys;
if (name == "Guards") return isSessionBased ? killed_gards : total_killed_gards;
if (name == "Thieves") return isSessionBased ? killed_thieves : total_killed_thieves;
if (name == "Cars") return isSessionBased ? destroyed_cars : total_destroyed_cars;
if (name == "Steps") return isSessionBased ? moved_steps : total_moved_steps;
if (name == "Playtime") return isSessionBased ? int(session_playtime / 60000) : int(total_playtime / 60000);
return 0;
}
string get_next_milestone_label()
{
if (currentTier < thresholds.length())
{
return baseName + " " + thresholds[currentTier];
}
return "All " + baseName + " achievements unlocked!";
}
bool check_progress()
{
if (currentTier < thresholds.length() and get_value() >= thresholds[currentTier])
{
currentTier++;
return true;
}
return false;
}
string get_progress_status()
{
if (currentTier >= thresholds.length())
{
return baseName + ": fully completed.";
}
int currentValue = get_value();
int tierStart = (currentTier > 0) ? thresholds[currentTier - 1] : 0;
int tierGoal = thresholds[currentTier];
int progressInTier = max(0, currentValue - tierStart);
int neededToNext = max(0, tierGoal - currentValue);
int tierRange = tierGoal - tierStart;
double percent = 0.0;
if (tierRange > 0)
{
percent = round((double(progressInTier) * 100.0) / double(tierRange), 0);
}
return baseName + ": Tier " + currentTier + " of " + thresholds.length() + ". Current progress: " + progressInTier + " (" + percent + "%). " + neededToNext + " total " + name.lower() + " needed to reach the next tier.";
}
}
void load_life_achievements()
{
achievements.insert_last(AchievementTracker("Toys", "Toy Collector", generate_achievement_thresholds(5, 50, 1.5), false));
achievements.insert_last(AchievementTracker("Keys", "Key Hunter", generate_achievement_thresholds(10, 50, 1.5), false));
achievements.insert_last(AchievementTracker("Guards", "Guard Slayer", generate_achievement_thresholds(15, 50, 1.5), false));
achievements.insert_last(AchievementTracker("Thieves", "Thief Decimator", generate_achievement_thresholds(10, 50, 1.5), false));
achievements.insert_last(AchievementTracker("Cars", "Car Crusher", generate_achievement_thresholds(20, 50, 1.5), false));
achievements.insert_last(AchievementTracker("Steps", "Pacer", generate_achievement_thresholds(25, 50, 1.5), false));
achievements.insert_last(AchievementTracker("Playtime", "Time Traveler", generate_achievement_thresholds(5, 50, 1.5), false));
}
void load_session_achievements()
{
achievements.insert_last(AchievementTracker("Toys", "Speed Collector", generate_achievement_thresholds(3, 25, 1.5), true));
achievements.insert_last(AchievementTracker("Keys", "Key Snatcher", generate_achievement_thresholds(5, 25, 1.5), true));
achievements.insert_last(AchievementTracker("Guards", "Strike Force", generate_achievement_thresholds(8, 25, 1.5), true));
achievements.insert_last(AchievementTracker("Thieves", "Swift Justice", generate_achievement_thresholds(5, 25, 1.5), true));
achievements.insert_last(AchievementTracker("Cars", "Crash Rush", generate_achievement_thresholds(10, 25, 1.5), true));
achievements.insert_last(AchievementTracker("Steps", "Pace Breaker", generate_achievement_thresholds(15, 25, 1.5), true));
achievements.insert_last(AchievementTracker("Playtime", "Sprint Runner", generate_achievement_thresholds(1, 25, 1.5), true));
}
void update_achievements()
{
    for (uint i = 0; i < achievements.length(); i++)
    {
        bool unlocked = false;
        while (achievements[i].check_progress())
        {
            unlocked = true;
        }
        if (unlocked)
        {
            string actionVerb = "";
            string unit = "";
            if (achievements[i].name == "Toys")
            {
                actionVerb = "collected a total of ";
                unit = "toys";
            }
            else if (achievements[i].name == "Keys")
            {
                actionVerb = "collected a total of ";
                unit = "keys";
            }
            else if (achievements[i].name == "Guards")
            {
                actionVerb = "killed a total of ";
                unit = "guards";
            }
            else if (achievements[i].name == "Thieves")
            {
                actionVerb = "killed a total of ";
                unit = "thieves";
            }
            else if (achievements[i].name == "Cars")
            {
                actionVerb = "destroyed a total of ";
                unit = "cars";
            }
            else if (achievements[i].name == "Steps")
            {
                actionVerb = "taken a total of ";
                unit = "steps";
            }
            else if (achievements[i].name == "Playtime")
            {
                actionVerb = "played for a total of ";
                unit = "minutes";
            }
            string typeLabel = achievements[i].isSessionBased ? "Session " : "Lifetime ";
            string baseName = achievements[i].baseName;
            int value = achievements[i].get_value();
            string soundname = achievements[i].isSessionBased ? "achsession" : "achlife";
            if (achievements[i].currentTier >= achievements[i].thresholds.length())
            {
                if(play_ach_scores==true) achslot = pool.play_stationary(get_sound("misc/player/*"+soundname+"*"), false);
                if(speak_ach_scores==true) dlgmessage_return("Amazing! You've completed all tiers of the " + typeLabel + baseName + " achievement!");
            }
            else
            {
                if(play_ach_scores==true) achslot = pool.play_stationary(get_sound("misc/player/*"+soundname+"*"), false);
                if(speak_ach_scores==true) speak_buffer("Congratulations! You just unlocked Tier " + achievements[i].currentTier + " of the " + typeLabel + baseName + " achievement. You've " + actionVerb + value + " " + unit + ". Nice work!", "achievements");
            }
        }
    }
}

int[] generate_achievement_thresholds(int start, int count, double multiplier)
{
int[] result;
int value = start;
for (int i = 0; i < count; i++)
{
result.insert_last(value);
value = int(value * multiplier);
}
return result;
}
