thief@[] thieves(0);
class thief
{
bool moveable = true;
bool moveable2 = true;
int defsound, hurtsound, landsound, stealsound, thievesound, stepsound;
int thiefx;
int thiefy;
int thiefhealth;
int thieftime;
int target = -1;
string thieftype;
timer thieftimer;
thief(int thx, int thy, int hp, int sp, string tht)
{
thiefx = thx;
thiefy = thy;
thiefhealth = hp;
thieftime = sp;
thieftype = tht;
if(!paused) landsound = thiefpool.play_2d(get_sound("npc/thieves/" + thieftype + "/*land*"), me.x, me.y, thiefx, thiefy, false);
if(!paused) thievesound = thiefpool.play_2d(get_sound("npc/thieves/" + thieftype + "/*taunt*"), me.x, me.y, thiefx, thiefy, true);
}
};
void thiefloop()
{
for (uint i = 0; i < thieves.length(); i++)
{
thief@ t = thieves[i];
if (t.thiefhealth <= 0)
{
thiefpool.destroy_sound(t.hurtsound);
thiefpool.destroy_sound(t.thievesound);
if(!paused) t.defsound = thiefpool.play_2d(get_sound("npc/thieves/" + t.thieftype + "/*death*"), me.x, me.y, t.thiefx, t.thiefy, false);
killed_thieves+=1;
total_killed_thieves+=1;
update_achievements();
writedata();
spawn_bodyfall(t.thiefx, t.thiefy, random(500, 1000), get_sound("npc/thieves/" + t.thieftype + "/*fall*"));
thieves.remove_at(i);
return;
}
if (t.thieftimer.elapsed >= t.thieftime)
{
t.thieftimer.restart();
if (t.target == -1 && toys.length() > 0)
{
t.target = random(0, toys.length() - 1);
}
if (t.target >= 0 && t.target < int(toys.length()))
{
int tx = toys[t.target].tx;
int ty = toys[t.target].ty;
if (t.moveable || t.moveable2)
{
if(!paused) t.stepsound = thiefpool.play_2d(get_sound("npc/thieves/" + t.thieftype + "/*step*"), me.x, me.y, t.thiefx, t.thiefy, false);
}
thiefpool.update_sound_2d(t.thievesound, t.thiefx, t.thiefy);
if (t.thiefx < tx && t.moveable && !paused) t.thiefx++;
if (t.thiefx > tx && t.moveable && !paused) t.thiefx--;
if (t.thiefy < ty && t.moveable2 && !paused) t.thiefy++;
if (t.thiefy > ty && t.moveable2 && !paused) t.thiefy--;
if (t.thiefx == tx && t.thiefy == ty && !paused)
{
if (!paused) t.stealsound = thiefpool.play_2d(get_sound("npc/thieves/" + t.thieftype + "/*take*"), me.x, me.y, t.thiefx, t.thiefy, false);
toypool.destroy_sound(toys[t.target].toysound);
toys.remove_at(t.target);
stolen_toys++;
if (stolen_toys >= total_toy_stock)
{
store_defense = false;
thievespawn = false;
toyspawn = false;
clear_inv();
destroy_all_thieves();
destroy_all_toys();
ambpool.destroy_sound(toyambslot);
muspool.destroy_sound(toytrackslot);
if(endless)
{
double actual_collected = min(collected_toys, total_toy_stock);
double actual_stolen = total_toy_stock - actual_collected;
dlgmessage_return("Game over. The thieves managed to steal " + actual_stolen + " toy" + (actual_stolen == 1 ? "" : "s") + ". You managed to save " + actual_collected + " toy" + (actual_collected == 1 ? "" : "s") + ".");
}
else
{
if (collected_toys >= total_toy_stock)
{
dlgmessage_return("Congradulations! You saved all " + total_toy_stock + " toy" + (total_toy_stock == 1 ? "" : "s") +" before the enemies could take them. Well done!");
}
else
{
double actual_collected = min(collected_toys, total_toy_stock);
double actual_stolen = total_toy_stock - actual_collected;
dlgmessage_return("Game over. The thieves managed to steal " + actual_stolen + " toy" + (actual_stolen == 1 ? "" : "s") + ". You managed to save " + actual_collected + " toy" + (actual_collected == 1 ? "" : "s") + ".");
}
}
setupmenu(false);
m.add_item("Yes", "yes");
m.add_item("No", "no");
m.intro_text = "Would you like to play the current game mode again?";
int res = m.run();
string choice = m.get_selected_item_id();
if (res != -1 && choice == "yes")
{
if (speak_menu_loading)
{
string difficulty_name = (gamemod == 1) ? "Easy" : (gamemod == 2) ? "Medium" : (gamemod == 3) ? "Hard" : (gamemod == 4) ? "Insane" : (gamemod == 5) ? "Chaos" : "unknown";
speak((endless ? "loading endless defense: difficulty " : "loading rush defense: difficulty ") + difficulty_name);
}
dlgplay(get_sound("misc/game/*launch*"));
collected_toys = 0;
killed_thieves=0;
moved_steps = 0;
stolen_toys = 0;
gametimer.restart();
clear_inv();
me.x = 25;
me.y = 25;
maxx = 50;
maxy = 50;
store_defense = true;
thievespawn = true;
toyspawn = true;
reset_weapons();
toygame2();
}
mainmenu();
}
thiefpool.destroy_sound(t.thievesound);
thieves.remove_at(i);
return;
}
}
}
}
}
void spawn_thief(int x, int y, int hp, int thieftime, string thieftype)
{
thief th(x, y, hp, thieftime, thieftype);
thieves.insert_last(th);
}
void destroy_all_thieves()
{
for (uint i = 0; i < thieves.length(); i++)
{
thiefpool.destroy_sound(thieves[i].thievesound);
}
thieves.resize(0);
}
