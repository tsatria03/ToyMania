int get_weapon_damage()
{
if (weapontype2 == "bat") return random(3, 6);
if (weapontype2 == "boot") return random(6, 9);
if (weapontype2 == "club") return random(9, 12);
if (weapontype2 == "feat") return random(12, 15);
if (weapontype2 == "fist") return random(15, 18);
if (weapontype2 == "hammer") return random(18, 21);
if (weapontype2 == "knife") return random(21, 24);
if (weapontype2 == "laser") return random(24, 27);
if (weapontype2 == "pistol" || weapontype2 == "machine_gun") return random(27, 30);
return 0;
}
void check_weapon_reload()
{
if (!isReloading || reloadTimer.elapsed < reload_duration) return;
double needed_ammo = maxammo - ammo;
double ammo_to_load = min(needed_ammo, reserved_ammo);
if (ammo_to_load > 0)
{
ammo += ammo_to_load;
reserved_ammo -= ammo_to_load;
p.play_stationary(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*ping*"), false);
}
isReloading = false;
}
void draw_weapon(string weptype, string weptype2)
{
if (current_weapon == weptype2) return;
weapontype = weptype;
weapontype2 = weptype2;
current_weapon = weptype2;
p.destroy_sound(weaponslot);
wepdamage = 0;
weprange = 0;
weprange2 = 0;
weapontime = 50;
weapontime2 = 100;
reload_duration = 0;
if (weptype2 == "bat")        { wepdamage = 3; weprange = 1; weprange2 = 2; }
else if (weptype2 == "boot")  { wepdamage = 6; weprange = 2; weprange2 = 3; }
else if (weptype2 == "club")  { wepdamage = 9; weprange = 3; weprange2 = 4; }
else if (weptype2 == "feat")  { wepdamage = 12; weprange = 4; weprange2 = 5; }
else if (weptype2 == "fist")  { wepdamage = 15; weprange = 5; weprange2 = 6; }
else if (weptype2 == "hammer"){ wepdamage = 18; weprange = 6; weprange2 = 7; }
else if (weptype2 == "knife") { wepdamage = 21; weprange = 7; weprange2 = 8; }
else if (weptype2 == "laser") { wepdamage = 24; weprange = 8; weprange2 = 9; }
else if (weptype2 == "machine_gun" && endless)
{
wepdamage = 27; weprange = 9; weprange2 = 10;
reload_duration = 2500;
if (!machine_gun_initialized)
{
ammo = 50; maxammo = 50;
reserved_ammo = 250; max_reserved_ammo = 250;
weapontime = 50;
weapontime2 = 100;
machine_gun_initialized = true;
}
}
else if (weptype2 == "pistol" && !endless)
{
wepdamage = 27; weprange = 9; weprange2 = 10;
reload_duration = 2000;
if (!pistol_initialized)
{
ammo = 50; maxammo = 50;
reserved_ammo = 250; max_reserved_ammo = 250;
weapontime = 50;
weapontime2 = 100;
pistol_initialized = true;
}
}
speak(weptype2 + " equipped");
weaponslot = p.play_stationary(find_sound("sounds/" + soundpack + "/equipments/weapons/" + weapontype + "/" + weapontype2 + "/*draw*"), false);
}
void draw_random_weapon()
{
string[] melee = {"bat", "boot", "club", "feat", "fist", "hammer", "knife", "laser"};
string[] artillery = {"machine_gun", "pistol"};
bool isMelee = (random(0, 1) == 0 || !endless);
weapontype = isMelee ? "melee" : "artillery";
string[] weptypes = isMelee ? melee : artillery;
if (endless && !isMelee)
{
for (int i = 0; i < int(weptypes.length()); i++)
{
if (weptypes[i] == "pistol")
{
weptypes.remove_at(i);
break;
}
}
}
weapontype2 = random_string(weptypes);
draw_weapon(weapontype, weapontype2);
speak(weapontype2 + " randomly equipped");
}
void fire_weapon()
{
bool isGun = (weapontype2 == "pistol" || weapontype2 == "machine_gun");
if (isGun)
{
if (ammo <= 0)
{
weaponslot = p.play_stationary(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*empty*"), false);
return;
}
ammo--;
weaponslot = p.play_stationary(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*fire*"), false);
}
else
{
weaponslot = p.play_stationary(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*fire*"), false);
}
fire_on_target("boss");
fire_on_target("car");
fire_on_target("gard");
}
void fire_on_target(string targetType)
{
int dmg = get_weapon_damage();
bool isGun = (weapontype2 == "pistol" || weapontype2 == "machine_gun");
for (uint i1 = 0; i1 < bosses.length(); i1++)
{
if (targetType == "boss" && absolute(bosses[i1].bossx - me.x) <= weprange && absolute(bosses[i1].bossy - me.y) <= weprange2)
{
if (isGun)
{
weaponslot=p.play_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*hit*"), me.x, me.y, bosses[i1].bossx, bosses[i1].bossy, false);
weaponslot=p.play_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*shell*"), me.x, me.y, bosses[i1].bossx, bosses[i1].bossy, false);
}
else
{
weaponslot=p.play_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*hit*"), me.x, me.y, bosses[i1].bossx, bosses[i1].bossy, false);
}
bosses[i1].hurtsound = bosspool.play_2d(find_sound("sounds/"+soundpack+"/npc/bosses/"+bosses[i1].bosstype+"/*hurt*"), me.x, me.y, bosses[i1].bossx, bosses[i1].bossy, false);
bosses[i1].bosshealth -= dmg;
}
}
for (uint i2 = 0; i2 < cars.length(); i2++)
{
if (targetType == "car" && absolute(cars[i2].carx - me.x) <= weprange && absolute(cars[i2].cary - me.y) <= weprange2)
{
if (isGun)
{
weaponslot=p.play_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*hit*"), me.x, me.y, cars[i2].carx, cars[i2].cary, false);
weaponslot=p.play_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*shell*"), me.x, me.y, cars[i2].carx, cars[i2].cary, false);
}
else
{
weaponslot=p.play_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*hit*"), me.x, me.y, cars[i2].carx, cars[i2].cary, false);
}
cars[i2].hurtsound = carpool.play_2d(cars[i2].cartype + "pain.ogg", me.x, me.y, cars[i2].carx, cars[i2].cary, false);
cars[i2].carhealth -= dmg;
}
}
for (uint i3 = 0; i3 < gards.length(); i3++)
{
if (targetType == "gard" && absolute(gards[i3].gardx - me.x) <= weprange && absolute(gards[i3].gardy - me.y) <= weprange2)
{
string painsound = "gard3pain.wav";
if (gards[i3].gardtype == "gard1") painsound = "gard1pain" + random(1, 5) + ".ogg";
else if (gards[i3].gardtype == "gard2") painsound = "gard2pain.ogg";
if (isGun)
{
weaponslot=p.play_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*hit*"), me.x, me.y, gards[i3].gardx, gards[i3].gardy, false);
weaponslot=p.play_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*shell*"), me.x, me.y, gards[i3].gardx, gards[i3].gardy, false);
}
else
{
weaponslot=p.play_2d(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*hit*"), me.x, me.y, gards[i3].gardx, gards[i3].gardy, false);
}
gards[i3].hurtsound = gardpool.play_2d(painsound, me.x, me.y, gards[i3].gardx, gards[i3].gardy, false);
gards[i3].gardhealth -= dmg;
}
}
}
void reload_weapon()
{
if (isReloading)
{
speak("This weapon is still reloading.");
return;
}
bool isGun = (weapontype2 == "machine_gun" || weapontype2 == "pistol");
if (!isGun)
{
speak("This weapon does not take any ammo.");
return;
}
if (ammo > 0)
{
speak("This weapon is already loaded with ammo.");
return;
}
if (reserved_ammo <= 0)
{
weaponslot = p.play_stationary(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*empty*"), false);
speak("This weapon has no more reserved ammo to reload.");
return;
}
isReloading = true;
reloadTimer.restart();
weaponslot = p.play_stationary(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*reload*"), false);
}
void reset_weapons()
{
current_weapon = "";
weapontype = "";
weapontype2 = "";
wepdamage = 0;
weprange = 0;
weprange2 = 0;
ammo = 0;
maxammo = 0;
reserved_ammo = 0;
max_reserved_ammo = 0;
weapontime = 50;
weapontime2 = 100;
reload_duration = 0;
isReloading = false;
pistol_initialized = false;
machine_gun_initialized = false;
}
