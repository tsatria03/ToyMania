bool entity_near_door(int x, int y)
{
    for (uint i = 0; i < bosses.length(); i++)
{
        if (absolute(bosses[i].bossx - x) <= 2 && absolute(bosses[i].bossy - y) <= 2)
            return true;
    }
    for (uint i = 0; i < gards.length(); i++)
{
        if (absolute(gards[i].gardx - x) <= 2 && absolute(gards[i].gardy - y) <= 2)
            return true;
    }
    for (uint i = 0; i < cars.length(); i++)
{
        if (absolute(cars[i].carx - x) <= 2 && absolute(cars[i].cary - y) <= 2)
            return true;
    }
    return false;
}

bool doormove;
door@[]doors(0);
class door
{
bool is_moving=false;
int closesound, doorsound, jamsound, locksound, unlocksound, movesound, opensound;
int startx, starty;
int endx, endy;
int speed;
int required_keys;
timer doortimer;
door(int sx,int sy,int ex,int ey,int sp,int rk)
{
startx=sx;
starty=sy;
endx=ex;
endy=ey;
speed=sp;
required_keys=rk;
doorsound=doorpool.play_2d("doorloop.ogg",me.x,me.y,startx,starty,true);
}
}
void doorcheck()
{
    for (uint i = 0; i < doors.length(); i++)
    {
        if (absolute(me.x - doors[i].startx) <= 2 && absolute(me.y - doors[i].starty) <= 2 && !shift_is_down() && key_pressed(KEY_RETURN))
        {
            if (entity_near_door(doors[i].startx, doors[i].starty))
            {
doors[i].jamsound = doorpool.play_stationary("doorjam"+random(1,2)+".ogg", false);
                speak("The door is jammed! Something dangerous is nearby!");
                return;
            }
            if (collected_keys < doors[i].required_keys)
            {
temp.destroy_sound(doors[i].locksound);
doors[i].locksound = temp.play_stationary("doorlock.ogg", false);
                speak("This door is locked. You need " + doors[i].required_keys + " or more keys to unlock it.");
            }
            else
            {
                doors[i].unlocksound = doorpool.play_stationary("keyuse" + random(1, 6) + ".ogg", false);
                alarmpool.destroy_sound(alarmslot);
                ambpool.destroy_sound(toyambslot);
                muspool.destroy_sound(toytrackslot);
                destroy_all_keys();
                keyspawn = false;
                keydest = false;
                wait(500);
                doormove = true;
                doors[i].is_moving = true;
                doors[i].opensound = doorpool.play_stationary("dooropen.ogg", false);
                doors[i].movesound = doorpool.play_stationary("doormove.ogg", true);
            }
        }
    }
}
void doorloop()
{
for(uint i=0; i<doors.length(); i++)
{
if(doors[i].doortimer.elapsed>=doors[i].speed and doors[i].is_moving)
{
doors[i].doortimer.restart();
if(doors[i].speed==-1)
{
me.x=doors[i].endx;
me.y=doors[i].endy;
}
if(me.x<doors[i].endx)
{
me.x++;
}
if(me.x>doors[i].endx)
{
me.x--;
}
if(me.y<doors[i].endy)
{
me.y++;
}
if(me.y>doors[i].endy)
{
me.y--;
}
if(me.x==doors[i].endx and me.y==doors[i].endy)
{
doorpool.destroy_sound(doors[i].movesound);
doors[i].closesound=doorpool.play_stationary("doorclose.ogg",false);
doormove=false;
doors[i].is_moving=false;
if(endless) clear_inv();
fade_multi_pool();
wait(1000);
dlgmessage_return("You just won on level "+level+ " of the " + (endless ? "Endless" : "Normal") + " game mode!"+" Here are your current results for this game session:"+ "\r\nToys collected: " + collected_toys +"\r\nKeys collected: " + collected_keys +"\r\nGuards defeated: " + killed_gards +"\r\nCars destroyed: " + destroyed_cars +"\r\nSteps taken: " + moved_steps +"\r\nTime survived: " + timeelapsed.m() + " minutes, " + timeelapsed.s() + " seconds" +"\r\nGrate work!");
session_playtime += timeelapsed.ms();
total_playtime += timeelapsed.ms();
if (gamcopy == true)
{
    setupmenu(false);
    m.add_item("Copy results to clipboard", "copy");
    m.add_item("Export results to file", "export");
    m.add_item("Return to main menu.", "cancel");
    m.intro_text = "What would you like to do with the current results for this game session?";
    int res = m.run();
    string choice = m.get_selected_item_id();
    if (res != -1)
    {
        string statsummary = "";
        int min = int(session_playtime / 60000);
        int sec = int((session_playtime % 60000) / 1000);
        statsummary += "Session Stats:\r\n";
        statsummary += "- Toys collected: " + collected_toys + "\r\n";
        statsummary += "- Keys collected: " + collected_keys + "\r\n";
        statsummary += "- Guards killed: " + killed_gards + "\r\n";
        statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
        statsummary += "- Steps taken: " + moved_steps + "\r\n";
        statsummary += "- Time played: " + min + " minutes, " + sec + " seconds\r\n";
        if (choice == "copy")
        {
            clipboard_copy_text(statsummary);
            if (copexpsounds == true) dlgplay("gamecopy.ogg", false);
            dlgmessage_return("All game session results copied to your clipboard.");
        }
        else if (choice == "export")
        {
            poastfile.open(DIRECTORY_APPDATA+"tsatria03/ToyMania/stats/player_posts.txt", "w");
            poastfile.write(statsummary);
            poastfile.close();
            if (copexpsounds == true) dlgplay("gamexport.ogg", false);
            dlgmessage_return("All game session results exported to stats/player_posts.txt.");
        }
    }
}
writedata();
mainmenu();
}
}
}
}
void spawn_door(int x,int y,int x2,int y2,int speed,int required_keys)
{
door dr1(x,y,x2,y2,speed,required_keys);
doors.insert_last(dr1);
}
void destroy_all_doors()
{
for(uint i=0; i<doors.length(); i++)
{
doorpool.destroy_sound(doors[i].doorsound);
doorpool.destroy_sound(doors[i].movesound);
}
doors.resize(0);
doormove=false;
}
