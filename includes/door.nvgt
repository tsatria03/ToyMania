bool doormove;
door@[]doors(0);
class door
{
bool automatic, is_moving=false;
int closesound, doorsound, unlocksound, movesound, opensound;
int startx, starty;
int endx, endy;
int speed;
timer doortimer;
door(int sx,int sy,int ex,int ey,int sp,bool dcl)
{
startx=sx;
starty=sy;
endx=ex;
endy=ey;
speed=sp;
automatic=dcl;
doorsound=doorpool.play_2d("doorloop.ogg",me.x,me.y,startx,starty,true);
}
}
void doorcheck()
{
for(uint i=0; i<doors.length(); i++)
{
if(doors[i].startx==me.x and doors[i].starty==me.y and doors[i].automatic==true)
{
int required_keys=15;
if(collected_keys<required_keys)
{
speak("This door is locked. You need "+required_keys+" or more keys in order to unlock it.");
}
else if(collected_keys>=required_keys)
{
doors[i].unlocksound=doorpool.play_stationary("keyuse"+random(1,6)+".ogg",false);
pool.destroy_sound(toyambslot);
pool.destroy_sound(toytrackslot);
destroy_all_keys();
keyspawn=false;
wait(500);
pool.destroy_sound(toyambslot);
pool.destroy_sound(toytrackslot);
destroy_all_keys();
keyspawn=false;
doormove=true;
doors[i].is_moving=true;
doors[i].opensound=doorpool.play_stationary("dooropen.ogg",false);
doors[i].movesound=doorpool.play_stationary("doormove.ogg",true);
}
}
if(doors[i].startx==me.x and doors[i].starty==me.y and doors[i].automatic==false and key_pressed(KEY_RETURN))
{
int required_keys=15;
if(collected_keys<required_keys)
{
speak("This door is locked. You need "+required_keys+" or more keys in order to unlock it.");
}
else if(collected_keys>=required_keys)
{
doors[i].unlocksound=doorpool.play_stationary("keyuse"+random(1,6)+".ogg",false);
pool.destroy_sound(toyambslot);
pool.destroy_sound(toytrackslot);
destroy_all_keys();
keyspawn=false;
wait(500);
doormove=true;
doors[i].is_moving=true;
doors[i].opensound=doorpool.play_stationary("dooropen.ogg",false);
doors[i].movesound=doorpool.play_stationary("doormove.ogg",false);
}
}
}
}
void doorloop()
{
for(uint i=0; i<doors.length(); i++)
{
if(doors[i].doortimer.elapsed>=doors[i].speed and doors[i].is_moving)
{
doors[i].doortimer.restart();
if(doors[i].speed==-1)
{
me.x=doors[i].endx;
me.y=doors[i].endy;
}
if(me.x<doors[i].endx)
{
me.x++;
}
if(me.x>doors[i].endx)
{
me.x--;
}
if(me.y<doors[i].endy)
{
me.y++;
}
if(me.y>doors[i].endy)
{
me.y--;
}
if(me.x==doors[i].endx and me.y==doors[i].endy)
{
doorpool.destroy_sound(doors[i].movesound);
doors[i].closesound=doorpool.play_stationary("doorclose.ogg",false);
doormove=false;
doors[i].is_moving=false;
fade_multi_pool();
dlgmessage("You just won! Here are your current results for this game session:"+ "--Keys collected: " + collected_keys +"--Toys collected: " + collected_toys +"--Cars destroyed: " + destroyed_cars +"--Guards defeated: " + killed_gards +"--Steps taken: " + taken_steps +"--Time survived: " + timeelapsed.m() + " minutes, " + timeelapsed.s() + " seconds" +"--Grate job! Press enter to continue.");
session_playtime += timeelapsed.ms();
total_playtime += timeelapsed.ms();
writedata();
mainmenu();
}
}
}
}
void spawn_door(int x,int y,int x2,int y2,int speed,bool automatic)
{
door dr1(x,y,x2,y2,speed,automatic);
doors.insert_last(dr1);
}
void destroy_all_doors()
{
for(uint i=0; i<doors.length(); i++)
{
doorpool.destroy_sound(doors[i].doorsound);
doorpool.destroy_sound(doors[i].movesound);
}
doors.resize(0);
doormove=false;
}
