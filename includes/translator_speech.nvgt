int alert_translated(string title, string text, bool can_cancel = false, uint flags = 0) {
return alert(process_digits(title), process_digits(text), can_cancel, flags);
}
bool speak_translated(string text, bool interrupt = tts_default_interrupt, bool braille = true) {
string translated = process_digits(text);
speechbuff = translated;
if (translated.length() > 10000) {
string tmp = translated;
while (tmp.length() > 0) {
uint pos = 4096;
while (pos > 2048 and pos < tmp.length() and tmp[pos] != " ") pos--;
raw_speak_translated(tmp.substr(0, pos), interrupt and tmp.length() == translated.length());
tmp = tmp.substr(pos);
}
} else {
raw_speak_translated(translated, interrupt);
}
return true;
}
void raw_speak_translated(string text, bool interrupt) {
	if (interrupt and tts.speaking) tts.stop();
	if (@tts_config_form != null) {
		use_sr = tts_config_form.is_checked(0);
		if (!use_sr) {
			int voice = tts_config_form.get_list_position(1);
			int rate = tts_config_form.get_slider(2);
			int volume = tts_config_form.get_slider(3);
			if (voice > -1 and tts.voice != voice) tts.set_voice(voice);
			if (tts.rate != rate) tts.set_rate(rate);
			if (tts.volume != volume) tts.set_volume(volume);
		}
	}
	if (!use_sr or !screen_reader_has_speech())
		tts.speak(text, interrupt);
	else
		screen_reader_speak(text, interrupt);
}
void show_translated_window(const string& in msg) {
show_window(process_digits(msg));
}
