void toy_game_input()
{
if (key_repeating(KEY_ESCAPE) and doormove == false)
{
boss_timer.pause();
gametimer.pause();
    if (quit_menu==true)
    {
        setupmenu(false);
        m.add_item("Yes", "yes");
        m.add_item("No", "no");
        m.intro_text = "Are you sure you want to quit the game? You will lose all progress for this current game session.";
        int res = m.run();
        string confirm = m.get_selected_item_id();
        if (res == -1 or confirm == "no")
        {
            speak_translated("canceled");
boss_timer.resume();
gametimer.resume();
            return;
        }
    }
boss_timer.resume();
gametimer.resume();
    fade_multi_pool();
    level = 1;
money = 0;
    collected_toys = 0;
    collected_keys = 0;
    killed_gards = 0;
    destroyed_cars = 0;
    moved_steps = 0;
    session_playtime = 0;
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
        {
            achievements[i].currentTier = 0;
        }
    }
if(endless) clear_inv();
    if (!endless) destroy_all_bosses();
destroy_all_healzones();
destroy_all_bullets();
    destroy_all_cars();
destroy_all_darts();
    destroy_all_gards();
    destroy_all_doors();
    destroy_all_keys();
    destroy_all_toys();
    gametimer.restart();
    health = endless ? 10000 : 1000;
maxhealth = endless ? 10000 : 1000;
    storehealth = endless ? 10000 : 1000;
storemaxhealth = endless ? 10000 : 1000;
    me.x = endless ? 50 : 25;
me.y = endless ? 50 : 25;
    maxx = endless ? 100 : 50;
maxy = endless ? 100 : 50;
toynum=20;
    if (!endless) bossdefeated = false;
    if (!endless) bossespawn = false;
alarm_started = false;
countdown_started = false;
small_storedest = false;
medium_storedest = false;
    carspawn = false;
cardest=false;
    gardspawn = false;
    keydest = false;
    keyspawn = false;
    objdest = false;
    objspawn = false;
    toydest = false;
    toyspawn = false;
    mainmenu();
}
if (key_pressed(KEY_1) and doormove == false and current_weapon != "bat")
{
    draw_weapon("bat");
}
if (key_pressed(KEY_2) and doormove == false and current_weapon != "boot")
{
    draw_weapon("boot");
}
if (key_pressed(KEY_3) and doormove == false and current_weapon != "club")
{
    draw_weapon("club");
}
if (key_pressed(KEY_4) and doormove == false and current_weapon != "feat")
{
    draw_weapon("feat");
}
if (key_pressed(KEY_5) and doormove == false and current_weapon != "fist")
{
    draw_weapon("fist");
}
if (key_pressed(KEY_6) and doormove == false and current_weapon != "hammer")
{
    draw_weapon("hammer");
}
if (key_pressed(KEY_7) and doormove == false and current_weapon != "knife")
{
    draw_weapon("knife");
}
if (key_pressed(KEY_8) and doormove == false and current_weapon != "laser")
{
    draw_weapon("laser");
}
if (key_pressed(KEY_9) and doormove==false)
{
    if (endless)
        draw_weapon("machinegun");
    else
        draw_weapon("pistol");
}
if(key_repeating(KEY_TAB) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and endless)
{
if (shift_is_down())
cycle_inv(0);
else
cycle_inv(1);
}
if(key_repeating(KEY_RETURN) and shift_is_down() and endless and usetimer.elapsed>=usetime)
{
usetimer.restart();
if (inv.get_keys().length()>0 and invpos<inv.get_size())
useitem(inv.get_keys()[invpos]);
else
speak_translated("No item in focus.");
}
if(shift_is_down() and key_repeating(KEY_PRIOR) and alarmvolume!=0)
{
alarmvolume+=1;
alarmpool.update_sound_start_values(alarmslot,0,alarmvolume,alarmpitch);
speak_translated("alarm "+alarmvolume);
writepreffs();
}
if(shift_is_down() and key_repeating(KEY_NEXT) and alarmvolume!=-50)
{
alarmvolume-=1;
alarmpool.update_sound_start_values(alarmslot,0,alarmvolume,alarmpitch);
speak_translated("alarm "+alarmvolume);
writepreffs();
}
if(shift_is_down() and key_repeating(KEY_HOME) and heartvolume!=0)
{
heartvolume+=1;
heartpool.update_sound_start_values(heartslot,0,heartvolume,heartpitch);
speak_translated("heart "+heartvolume);
writepreffs();
}
if(shift_is_down() and key_repeating(KEY_END) and heartvolume!=-50)
{
heartvolume-=1;
heartpool.update_sound_start_values(heartslot,0,heartvolume,heartpitch);
speak_translated("heart "+heartvolume);
writepreffs();
}
if(key_repeating(KEY_PRIOR) and toymusvolume!=0)
{
toymusvolume+=1;
muspool.update_sound_start_values(toytrackslot,0,toymusvolume,toymuspitch);
speak_translated("track "+toymusvolume);
writepreffs();
}
if(key_repeating(KEY_NEXT) and toymusvolume!=-50)
{
toymusvolume-=1;
muspool.update_sound_start_values(toytrackslot,0,toymusvolume,toymuspitch);
speak_translated("track "+toymusvolume);
writepreffs();
}
if(key_repeating(KEY_HOME) and toyambvolume!=0)
{
toyambvolume+=1;
ambpool.update_sound_start_values(toyambslot,0,toyambvolume,toyambpitch);
speak_translated("source "+toyambvolume);
writepreffs();
}
if(key_repeating(KEY_END) and toyambvolume!=-50)
{
toyambvolume-=1;
ambpool.update_sound_start_values(toyambslot,0,toyambvolume,toyambpitch);
speak_translated("source "+toyambvolume);
writepreffs();
}
if (key_pressed(KEY_W) and doormove == false)
{
boss_timer.pause();
gametimer.pause();
    weaponsmenu();
}
if(key_pressed(KEY_P) and doormove==false)
{
temp.play_stationary("pause.ogg",false);
pause_game();
pausemenu();
}
if(alt_is_down() and key_pressed(KEY_A))
{
pause_game();
soundsetsmenu2();
}
if(alt_is_down() and key_pressed(KEY_G))
{
pause_game();
gamsetsmenu2();
}
if (key_pressed(KEY_Z) and doormove == false)
{
    if (weapontype == "machinegun" or weapontype == "pistol")
    {
        speak_translated("You have "+round(ammo,0) + " out of " + round(maxammo,0) + " rounds of ammo loaded, and " + round(reserved_ammo,0) + " rounds of ammo in reserve.");
    }
    else
    {
        speak_translated("This weapon does not take any ammo.");
    }
}
if (key_pressed(KEY_R) and doormove == false and (weapontype == "machinegun" or weapontype == "pistol"))
{
    reload_weapon();
}
if (key_pressed(KEY_D) and doormove == false)
{
    if (doors.length() == 0)
    {
        speak_translated("There are no doors currently present.");
        return;
    }
    if (shift_is_down())
    {
        speak_translated("You need " + doors[0].required_keys + " or more keys to unlock the door.");
    }
    else if (endless)
    {
        speak_translated("The door is at " + doors[0].startx + ", " + doors[0].starty + ".");
    }
    else
    {
        int dx = doors[0].startx - me.x;
        int dy = doors[0].starty - me.y;
        int distance = abs(dx) + abs(dy);
        string direction = "";
        if (dy < 0) direction += "behind you";
        else if (dy > 0) direction += "in front of you";
        if (dx < 0) direction += (direction == "" ? "on your left" : " and to the left");
        else if (dx > 0) direction += (direction == "" ? "on your right" : " and to the right");
        if (direction == "") direction = "right here";
        speak_translated("The door is " + direction + ", about " + distance + " feet away.");
    }
}
if(key_pressed(KEY_L) and doormove==false)
{
speak_translated("You're currently on level " + level + " of the " + (endless ? "Endless" : "Normal") + " game mode.");
}
if(key_pressed(KEY_M) and doormove==false and endless)
{
speak_translated("You currently have "+money+" dollars available to spend.");
}
if(key_pressed(KEY_C) and doormove==false)
{
speak_translated(me.x+", "+me.y+" on "+gmt(me.x,me.y)+". Facing "+facing+".");
}
if(key_pressed(KEY_O) and doormove==false)
{
speak_translated("There are "+toys.length()+" collectible toys on the field.");
}
if(key_pressed(KEY_U) and doormove==false)
{
speak_translated("There are "+keys.length()+" collectible keys on the field.");
}
if(key_pressed(KEY_J) and doormove==false)
{
speak_translated("There are "+cars.length()+" destroyable cars on the field.");
}
if(key_pressed(KEY_E) and doormove==false)
{
speak_translated("There are "+gards.length()+" killible gards on the field.");
}
if(key_pressed(KEY_X) and doormove==false)
{
speak_translated("You have taken "+moved_steps+" steps.");
}
if(key_pressed(KEY_T) and doormove==false)
{
speak_translated("You have collected "+collected_toys+" toys.");
}
if(key_pressed(KEY_I) and doormove==false)
{
speak_translated("You have collected "+collected_keys+" keys.");
}
if(key_pressed(KEY_F) and doormove==false)
{
speak_translated("You have destroyed "+destroyed_cars+" cars.");
}
if(key_pressed(KEY_Q) and doormove==false)
{
speak_translated("You have killed"+killed_gards+" gards.");
}
if (key_pressed(KEY_Y) and doormove == false)
{
    if (!endless and level == 6)
    {
        int remaining = boss_time_limit - boss_timer.elapsed;
        if (remaining < 0) remaining = 0;
        int minutes = int(remaining / 60000);
        int seconds = int((remaining % 60000) / 1000);
        speak_translated("You have " + minutes + " minutes, " + seconds + " seconds to escape the store.");
    }
    else
    {
        int session_minutes = int(timeelapsed.ms() / 60000);
        int session_seconds = int((timeelapsed.ms() % 60000) / 1000);
        speak_translated("You've been playing for a total of " + session_minutes + " minutes, " + session_seconds + " seconds.");
    }
}
if(key_pressed(KEY_S) and doormove==false)
{
if(endless)
{
pause_game();
    shopmenu();
}
else
{
speak_translated("This store has "+round(storehealth / storemaxhealth * 100, 0) + " percent HP remaining.");
}
}
if(key_pressed(KEY_H) and doormove==false)
{
speak_translated("You have "+round(health / maxhealth * 100, 0) + " percent HP remaining.");
}
if (autorun)
{
    if (alt_is_down() or control_is_down())
        movetime = walktime;
    else
        movetime = runtime;
}
else
{
    if (alt_is_down() or control_is_down())
        movetime = runtime;
    else
        movetime = walktime;
}
if (key_down(KEY_LEFT) and movetimer.elapsed>=movetime and me.x!=0 and doormove==false)
{
me.x-=1;
facing="left";
p.play_stationary(gmt(me.x,me.y)+"walk"+random(1,5)+".ogg", false);
moved_steps+=1;
total_moved_steps+=1;
update_achievements();
movetimer.restart();
}
if (key_down(KEY_RIGHT) and movetimer.elapsed>=movetime and me.x!=maxx and doormove==false)
{
me.x+=1;
facing="right";
p.play_stationary(gmt(me.x,me.y)+"walk"+random(1,5)+".ogg", false);
moved_steps+=1;
total_moved_steps+=1;
update_achievements();
movetimer.restart();
}
if (key_down(KEY_DOWN) and movetimer.elapsed>=movetime and me.y!=0 and doormove==false)
{
me.y-=1;
facing="backward";
p.play_stationary(gmt(me.x,me.y)+"walk"+random(1,5)+".ogg", false);
moved_steps+=1;
total_moved_steps+=1;
update_achievements();
movetimer.restart();
}
if (key_down(KEY_UP) and movetimer.elapsed>=movetime and me.y!=maxy and doormove==false)
{
me.y+=1;
facing="forward";
p.play_stationary(gmt(me.x,me.y)+"walk"+random(1,5)+".ogg", false);
moved_steps+=1;
total_moved_steps+=1;
update_achievements();
writedata();
movetimer.restart();
}
if (key_pressed(KEY_SPACE) and firetimer.elapsed >= firetime and doormove == false and (weapontype != "machinegun"))
{
    fire_weapon();
    firetimer.restart();
}
if (key_down(KEY_SPACE) and firetimer2.elapsed >= firetime2 and doormove == false and endless and weapontype == "machinegun")
{
    fire_weapon();
    firetimer2.restart();
}
}
void toygame()
{
if (endless)
    draw_random_weapon();
else
    draw_weapon("bat");
ambtype="gameamb";
toyambslot=ambpool.play_stationary_extended(ambtype+".ogg",true,0,0,toyambvolume,toyambpitch,false);
mustype="gamemus";
toytrackslot=muspool.play_stationary_extended(mustype+".ogg",true,0,0,toymusvolume,toymuspitch,false);
spawn_platform(0, maxx, 0, maxy, "marble");
p.play_stationary(gmt(me.x,me.y)+"land.ogg", false);
if (endless)
{
    int leftx = random(0, 5);
    int rightx = random(45, 50);
    int miny1 = random(0, 25);
    int maxy1 = miny1 + 10;
    int miny2 = random(25, 45);
    int maxy2 = miny2 + 10;
    spawn_platform(leftx, leftx + 5, miny1, maxy1, "glass");
    spawn_healzone(leftx, leftx + 5, miny1, maxy1, 0, random(30, 60), random(1500, 3000), "fire");
    spawn_platform(rightx - 5, rightx, miny2, maxy2, "glass");
    spawn_healzone(rightx - 5, rightx, miny2, maxy2, 1, random(30, 60), random(1500, 3000), "windchime");
}
if(endless) spawn_door(random(25,50), random(25,50), 0, 0, random(100,200), random(20,40));
while(true)
{
wait(5);
bfloop();
bulletloop();
if(!endless) bossloop();
carloop();
dartloop();
check_weapon_reload();
doorcheck();
doorloop();
gardloop();
healzoneloop();
keyloop();
if(endless) objloop();
stuncheck();
toyloop();
toy_game_input();
p.update_listener_2d(me.x,me.y);
if(!endless) bosspool.update_listener_2d(me.x,me.y);
bulletpool.update_listener_2d(me.x,me.y);
carpool.update_listener_2d(me.x,me.y);
doorpool.update_listener_2d(me.x,me.y);
gardpool.update_listener_2d(me.x,me.y);
healpool.update_listener_2d(me.x,me.y);
keypool.update_listener_2d(me.x,me.y);
if(endless) objpool.update_listener_2d(me.x,me.y);
toypool.update_listener_2d(me.x,me.y);
if(ammo<=0)
{
ammo=0;
}
if(ammo>=maxammo)
{
ammo=maxammo;
}
if(health<=0)
{
health=0;
}
if(health>=maxhealth)
{
health=maxhealth;
}
if(storehealth<=0)
{
storehealth=0;
}
if(storehealth>=storemaxhealth)
{
storehealth=storemaxhealth;
}
if (savedata_timer.elapsed >= save_interval)
{
    writedata();
    savedata_timer.restart();
}
if(bossespawntimer.elapsed>=bossespawntime and bosses.length()<bossnum and bossespawn==true and !bossdefeated and !endless)
{
spawn_boss(random(0,maxx), random(0,maxy), random(200,400), random(40,80), random(100,500), random(5000,10000), random(100,500), random(5000,10000), random(10000,20000), "boss");
bossespawntimer.restart();
}
if(carspawntimer.elapsed>=carspawntime and cars.length()<carnum and carspawn==true)
{
int carchoice;
if(carchoice==1) spawn_car(random(0,maxx), random(0,maxy), random(0,1), random(0,1), random(5,10), random(100,1000), "car1", cardest);
if(carchoice==2) spawn_car(random(0,maxx), random(0,maxy), random(0,1), random(0,1), random(10,20), random(75,750), "car2", cardest);
if(carchoice==3) spawn_car(random(0,maxx), random(0,maxy), random(0,1), random(0,1), random(20,40), random(50,500), "car3", cardest);
carchoice=random(1,3);
carspawntimer.restart();
}
if(gardspawntimer.elapsed>=gardspawntime and gards.length()<gardnum and gardspawn==true)
{
destroy_all_bullets();
if(!endless) destroy_all_cars();
destroy_all_darts();
int gardchoice;
if(gardchoice==1) spawn_gard(random(0,maxx), random(0,maxy), random(20,40), random(20,40), random(100,1000), random(100,1000), "gard1");
if(gardchoice==2) spawn_gard(random(0,maxx), random(0,maxy), random(30,60), random(30,60), random(75,750), random(75,750), "gard2");
if(gardchoice==3) spawn_gard(random(0,maxx), random(0,maxy), random(30,60), random(30,60), random(75,750), random(75,750), "gard3");
gardchoice=random(1,3);
gardspawntimer.restart();
}
if(keyspawntimer.elapsed>=keyspawntime and keys.length()<keynum and keyspawn==true)
{
spawn_key(random(0,maxx), random(0,maxy), random(2500,5000), keydest);
keyspawntimer.restart();
}
if(objspawntimer.elapsed>=objspawntime and objs.length()<objnum and objspawn==true and endless)
{
string[] objtypes={"ammo_pack", "dart", "potion", "teleporter"};
spawn_obj(random(0,maxx), random(0,maxy), random(3000,6000), random_string(objtypes), objdest);
objspawntimer.restart();
}
if(toyspawntimer.elapsed>=toyspawntime and toys.length()<toynum and toyspawn==true)
{
spawn_toy(random(0,maxx), random(0,maxy), random(5000,10000), toydest);
toyspawntimer.restart();
}
if(!endless and level==1 and gametimer.elapsed>=1000*60)
{
if(playlevels==true) p.play_stationary("playerlevel.ogg",false);
level=2;
carspawn=true;
toynum=25;
}
if(!endless and level==2 and gametimer.elapsed>=1000*120)
{
if(playlevels==true) p.play_stationary("playerlevel.ogg",false);
level=3;
cardest=true;
carnum=10;
toydest=true;
toynum=30;
}
if(!endless and level==3 and gametimer.elapsed>=1000*180)
{
if(playlevels==true) p.play_stationary("playerlevel.ogg",false);
level=4;
carspawn=false;
cardest=false;
gardspawn=true;
toynum=35;
}
if(!endless and level==4 and gametimer.elapsed>=1000*240)
{
if(playlevels==true) p.play_stationary("playerlevel.ogg",false);
level=5;
gardnum=20;
toynum=50;
}
if (!endless && level == 5 && gametimer.elapsed >= 1000 * 300)
{
mustype="bossmus";
muspool.destroy_sound(toytrackslot);
toytrackslot=muspool.play_stationary_extended(mustype+".ogg",true,0,0,toymusvolume,toymuspitch,false);
    p.play_stationary("playerlevel.ogg", false);
    level = 6;
    destroy_all_bullets();
    destroy_all_cars();
destroy_all_darts();
    destroy_all_gards();
    destroy_all_toys();
    spawn_door(random(25, 50), random(25, 50), 0, 0, random(100, 200), random(10,20));
    carspawn = false;
    gardspawn = false;
    toyspawn = false;
    bossespawn = true;
    keydest = true;
    keyspawn = true;
    boss_timer.restart();
    alarm_started = false;
countdown_started = false;
small_storedest = false;
medium_storedest = false;
}
if (!endless && level == 6)
{
    if (!alarm_started && boss_timer.elapsed >= 0)
    {
        alarmslot=alarmpool.play_stationary_extended("gamealarm.ogg", true,0,0,alarmvolume,alarmpitch);
        alarm_started = true;
    }
if (!countdown_started and boss_timer.elapsed >boss_time_limit-10000)
{
    countdown_started = true;
    if(playcounts==true) countslot=pool.play_stationary("gamecount.ogg", false);
}
if (!small_storedest and boss_timer.elapsed >boss_time_limit-60000)
{
health-=random(200/2, 400/2);
storehealth-=random(200, 400);
small_storedest = true;
double x1 = random(0, 5);
double x2 = x1 + 5;
double y1 = random(0, 45);
double y2 = y1 + 5;
spawn_platform(x1, x2, y1, y2, "glass");
spawn_healzone(x1, x2, y1, y2, 0, random(30, 60), random(1500, 3000), "fire");
painslot=p.play_stationary("playerpain.ogg", false);
pool.play_stationary("storealert_small.ogg", false);
pool.play_stationary("storedest_small.ogg", false);
}
if (!medium_storedest and boss_timer.elapsed >boss_time_limit-30000)
{
health-=random(300/2, 600/2);
storehealth-=random(300, 600);
medium_storedest = true;
double x3 = random(45, 50);
double x4 = x3 + 5;
double y3 = random(0, 45);
double y4 = y3 + 5;
spawn_platform(x3 - 5, x3, y3, y4, "glass");
spawn_healzone(x3 - 5, x3, y3, y4, 1, random(30, 60), random(1500, 3000), "windchime");
painslot=p.play_stationary("playerpain.ogg", false);
pool.play_stationary("storealert_medium.ogg", false);
pool.play_stationary("storedest_medium.ogg", false);
}
    if (boss_timer.elapsed > boss_time_limit-1000)
    {
if (heartbeat_playing)
{
    heartpool.destroy_sound(heartslot);
temp.play_stationary("heartstop.ogg", false);
    heartbeat_playing = false;
}
    if(!endless) bossdefeated = false;
    if(!endless) bossespawn = false;
carspawn=false;
cardest=false;
    gardspawn = false;
    keyspawn = false;
keydest=false;
    toyspawn = false;
if(endless) clear_inv();
    if(!endless) destroy_all_bosses();
destroy_all_healzones();
destroy_all_bullets();
    destroy_all_cars();
destroy_all_darts();
    destroy_all_doors();
    destroy_all_gards();
    destroy_all_keys();
destroy_all_objs();
    destroy_all_toys();
alarm_started = false;
countdown_started = false;
small_storedest = false;
medium_storedest = false;
alarmpool.destroy_sound(alarmslot);
    pool.destroy_sound(countslot);
p.destroy_sound(painslot);
    ambpool.destroy_sound(toyambslot);
    muspool.destroy_sound(toytrackslot);
p.play_stationary("playerdeath.ogg", false);
dlgplay("storedest_large.ogg");
string[] failMessages = {"You stuck around too long, and now the store has turned into a pile of ashes. Try escaping with a bit of haste next time!", "Time’s up! The store just blew sky-high, and your session stats blew with it too!", "Well, that literally backfired. The store's gone, and so is your progress!", "Nice sight seeing, but the store had a strict 'explode-on-time' policy. Better run next time!", "Oh dear! Your hesitation turned the store into fireworks. You didn’t escape, but at least it was quite the show to watch!"};
dlgplay(gmt(me.x,me.y)+"fall.ogg");
dlgmessage_return(random_string(failMessages));
setupmenu(false);
m.add_item("Yes", "yes");
m.add_item("No", "no");
m.intro_text = "Would you like to play the current game mode again?";
int res = m.run();
string choice = m.get_selected_item_id();
if (res != -1 && choice == "yes")
{
    dlgplay("gamelaunch.ogg");
    level = 1;
money = 0;
    collected_toys = 0;
    collected_keys = 0;
    killed_gards = 0;
    destroyed_cars = 0;
    moved_steps = 0;
    session_playtime = 0;
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
            achievements[i].currentTier = 0;
    }
    gametimer.restart();
    health = endless ? 10000 : 1000;
maxhealth = endless ? 10000 : 1000;
    storehealth = endless ? 10000 : 1000;
storemaxhealth = endless ? 10000 : 1000;
if(endless) clear_inv();
destroy_all_healzones();
    me.x = endless ? 50 : 25;
me.y = endless ? 50 : 25;
    maxx = endless ? 100 : 50;
maxy = endless ? 100 : 50;
toynum=20;
alarm_started = false;
countdown_started = false;
small_storedest = false;
medium_storedest = false;
    bossdefeated = false;
    bossespawn = false;
cardest=false;
carspawn=false;
    gardspawn = false;
    keydest = false;
    keyspawn = false;
    objdest = false;
    objspawn = false;
    toydest = false;
    toyspawn = true;
    toygame();
}
mainmenu();
}
}
if (endless and gametimer.elapsed >= last_level_time + (1000 * 60))
{
    p.play_stationary("playerlevel.ogg", false);
p.play_stationary("getdollars.ogg",false);
    level++;
money += level * 20;
speak_translated("Congratulations! You earned $" + (level * 20) + " for surviving to level " + level + ". Grate work!");
    last_level_time = gametimer.elapsed;
    if (level == 2)
    {
        carspawn = true;
        toyspawn = true;
    objspawn = true;
        toynum = 25;
    }
    else if (level == 3)
    {
cardest=true;
        carnum = 10;
    objdest = true;
        toydest = true;
        toynum = 30;
    }
    else if (level == 4)
    {
        gardspawn = true;
        gardnum = 10;
        toynum = 35;
    }
    else if (level == 5)
    {
        gardnum = 20;
        toynum = 50;
    }
    else if (level == 6)
    {
carnum=1;
gardnum=3;
        keyspawn = true;
        keydest = true;
        toynum = 5;
    }
    else
    {
        toynum += 5;
        if (toynum > 50) toynum = 50;
        carnum += 2;
        if (carnum > 30) carnum = 30;
        carspawn = true;
cardest=true;
        gardnum += 2;
        if (gardnum > 20) gardnum = 20;
        gardspawn = true;
        keynum += 1;
        if (keynum > 15) keynum = 15;
        keydest = true;
        keyspawn = true;
        objnum += 1;
        if (objnum > 15) objnum = 15;
    objdest = true;
    objspawn = true;
        toydest = true;
        toyspawn = true;
    }
    bossespawn = false;
}
double heartbeat_threshold = endless ? 5000 : 500;
if (health <= heartbeat_threshold and !heartbeat_playing)
{
    heartbeat_playing = true;
    heartslot = heartpool.play_stationary_extended("heartstart.ogg", true,0,0,heartvolume,heartpitch);
}
if (health > heartbeat_threshold and heartbeat_playing)
{
    heartbeat_playing = false;
    heartpool.destroy_sound(heartslot);
}
if (health <= 0)
{
if (heartbeat_playing)
{
    heartpool.destroy_sound(heartslot);
temp.play_stationary("heartstop.ogg", false);
    heartbeat_playing = false;
}
    if(!endless) bossdefeated = false;
    if(!endless) bossespawn = false;
cardest=false;
    carspawn = false;
    gardspawn = false;
keydest=false;
    keyspawn = false;
objspawn=false;
objdest=false;
    toyspawn = false;
if(endless) clear_inv();
    if(!endless) destroy_all_bosses();
destroy_all_healzones();
destroy_all_bullets();
    destroy_all_cars();
destroy_all_darts();
    destroy_all_doors();
    destroy_all_gards();
    destroy_all_keys();
destroy_all_objs();
    destroy_all_toys();
alarm_started = false;
countdown_started = false;
small_storedest = false;
medium_storedest = false;
alarmpool.destroy_sound(alarmslot);
pool.destroy_sound(countslot);
    p.destroy_sound(painslot);
    ambpool.destroy_sound(toyambslot);
    muspool.destroy_sound(toytrackslot);
    dlgplay("playerdeath.ogg");
    dlgplay(gmt(me.x,me.y)+"fall.ogg");
dlgmessage_return("You just died on level "+level+ " of the " + (endless ? "Endless" : "Normal") + " game mode!"+" Here are your current results for this game session:"+ "\r\nToys collected: " + collected_toys +"\r\nKeys collected: " + collected_keys +"\r\nGuards defeated: " + killed_gards +"\r\nCars destroyed: " + destroyed_cars +"\r\nSteps taken: " + moved_steps +"\r\nTime survived: " + timeelapsed.m() + " minutes, " + timeelapsed.s() + " seconds" +"\r\nBetter luck next time!");
    session_playtime += timeelapsed.ms();
    total_playtime += timeelapsed.ms();
if (gamcopy == true)
{
    setupmenu(false);
    m.add_item("Copy results to clipboard", "copy");
    m.add_item("Export results to file", "export");
    m.add_item("Return to main menu.", "cancel");
    m.intro_text = "What would you like to do with the current results for this game session?";
    int res = m.run();
    string choice = m.get_selected_item_id();
    if (res != -1)
    {
        string statsummary = "";
        int min = int(session_playtime / 60000);
        int sec = int((session_playtime % 60000) / 1000);
        statsummary += "Session Stats:\r\n";
        statsummary += "- Toys collected: " + collected_toys + "\r\n";
        statsummary += "- Keys collected: " + collected_keys + "\r\n";
        statsummary += "- Guards killed: " + killed_gards + "\r\n";
        statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
        statsummary += "- Steps taken: " + moved_steps + "\r\n";
        statsummary += "- Time played: " + min + " minutes, " + sec + " seconds\r\n";
        if (choice == "copy")
        {
            clipboard_copy_text(statsummary);
            if (copexpsounds == true) dlgplay("gamecopy.ogg", false);
            dlgmessage_return("All game session results copied to your clipboard.");
        }
        else if (choice == "export")
        {
            poastfile.open(DIRECTORY_APPDATA+"tsatria03/ToyMania/data/stats/player_posts.txt", "w");
            poastfile.write(statsummary);
            poastfile.close();
            if (copexpsounds == true) dlgplay("gamexport.ogg", false);
            dlgmessage_return("All game session results exported to data/stats/player_posts.txt.");
        }
    }
}
writedata();
mainmenu();
}
}
}
