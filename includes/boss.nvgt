boss@[]bosses(0);
class boss
{
bool fireable=true, healable=true, launchable=true, moveable=true, moveable2=true, telable=true;
int bossesound, defsound, healsound, hurtsound, launchsound, spawnsound, stepsound, telsound, wepsound;
int bosshealth;
int bossx;
int bossy;
int damage;
int bosstime;
int firetime;
int healtime;
int launchtime;
int teltime;
string bosstype;
timer bosstimer, firetimer, healtimer, launchtimer, teltimer;
boss(int bx,int by,int hp,int dm,int ft,int lt,int sp,int tlt,int hlt,string bt)
{
bossx=bx;
bossy=by;
bosshealth=hp;
damage=dm;
firetime=ft;
launchtime=lt;
bosstime=sp;
teltime=tlt;
healtime=hlt;
bosstype=bt;
bossesound=bosspool.play_2d(get_sound("npc/bosses/"+bosstype+"/*taunt*"), me.x, me.y, bossx, bossy, true);
}
void regenerate_bosshp(int hp)
{
healsound=bosspool.play_2d(get_sound("npc/bosses/"+bosstype+"/*heal*"), me.x, me.y, bossx, bossy, false);
bosshealth+=hp;
}
void teleport_boss(int bx,int by)
{
telsound=bosspool.play_2d(get_sound("npc/bosses/"+bosstype+"/*tel*"), me.x, me.y, bossx, bossy, false);
bossx=bx;
bossy=by;
}
}
void bossloop()
{
for(uint i=0; i<bosses.length(); i++)
{
if(bosses[i].healtimer.elapsed>=bosses[i].healtime and bosses[i].healable==true)
{
bosses[i].regenerate_bosshp(random(bosses[i].bosshealth/10,bosses[i].bosshealth/5));
bosses[i].healtimer.restart();
}
if(bosses[i].launchtimer.elapsed>=bosses[i].launchtime and bosses[i].launchable==true)
{
bosses[i].launchsound=bosspool.play_2d(get_sound("npc/bosses/"+bosses[i].bosstype+"/*launch*"), me.x, me.y, bosses[i].bossx, bosses[i].bossy, false);
string[] gardtype=find_directories("sounds/"+soundpack+"/npc/guards/*");
spawn_gard(bosses[i].bossx-random(1,5), bosses[i].bossy-random(1,5), random(30,60), random(30,60), random(50,500), random(50,500), random_string(gardtype));
bosses[i].launchtimer.restart();
}
if(bosses[i].teltimer.elapsed>=bosses[i].teltime and bosses[i].telable==true)
{
bosses[i].telsound=bosspool.play_2d(get_sound("npc/bosses/"+bosses[i].bosstype+"/*tel*"), me.x, me.y, bosses[i].bossx, bosses[i].bossy, false);
bosses[i].teleport_boss(random(0, me.x-random(1,5)), random(0, me.y-random(1,5)));
bosspool.update_sound_2d(bosses[i].bossesound,bosses[i].bossx,bosses[i].bossy);
bosspool.update_sound_2d(bosses[i].telsound,bosses[i].bossx,bosses[i].bossy);
bosses[i].teltimer.restart();
}
if(bosses[i].bosstimer.elapsed>=bosses[i].bosstime)
{
bosses[i].stepsound=bosspool.play_2d(get_sound("npc/bosses/"+bosses[i].bosstype+"/*step*"),me.x,me.y,bosses[i].bossx,bosses[i].bossy,false);
bosspool.update_sound_2d(bosses[i].bossesound,bosses[i].bossx,bosses[i].bossy);
bosses[i].bosstimer.restart();
if(bosses[i].bossx<me.x and bosses[i].moveable==true)
{
bosses[i].bossx++;
}
if(bosses[i].bossx>me.x and bosses[i].moveable==true)
{
bosses[i].bossx--;
}
if(bosses[i].bossy<me.y and bosses[i].moveable2==true)
{
bosses[i].bossy++;
}
if(bosses[i].bossy>me.y and bosses[i].moveable2==true)
{
bosses[i].bossy--;
}
}
if(me.x==bosses[i].bossx and me.y==bosses[i].bossy and bosses[i].firetimer.elapsed>=bosses[i].firetime and bosses[i].fireable==true and doormove == false)
{
bosses[i].wepsound=bosspool.play_2d(get_sound("npc/bosses/"+bosses[i].bosstype+"/*hit*"), me.x, me.y, bosses[i].bossx, bosses[i].bossy, false);
painslot=p.play_stationary(get_sound("misc/player/*hurt*"), false);
health-=bosses[i].damage;
bosses[i].firetimer.restart();
    if (isReloading)
    {
        isReloading = false;
p.destroy_sound(weaponslot);
        weaponslot=p.play_stationary(get_sound("equipments/weapons/"+weapontype+"/"+weapontype2+"/*fail*"), false);
    }
}
if(bosses[i].bosshealth<=0)
{
bosspool.destroy_sound(bosses[i].hurtsound);
bosspool.destroy_sound(bosses[i].bossesound);
bosses[i].defsound=bosspool.play_2d(get_sound("npc/bosses/"+bosses[i].bosstype+"/*death*"), me.x, me.y, bosses[i].bossx, bosses[i].bossy, false);
spawn_bodyfall(bosses[i].bossx, bosses[i].bossy, random(500,1000), get_sound("npc/bosses/"+bosses[i].bosstype+"/*fall*"));
bosses.remove_at(i);
bossdefeated = true;
return;
}
}
}
void spawn_boss(int x,int y,int hp,int dm,int firetime,int launchtime,int bosstime,int teltime,int healtime,string bosstype)
{
boss bs1(x,y,hp,dm,firetime,launchtime,bosstime,teltime,healtime,bosstype);
bosses.insert_last(bs1);
}
void destroy_all_bosses()
{
for(uint i=0; i<bosses.length(); i++)
{
bosspool.destroy_sound(bosses[i].bossesound);
}
bosses.resize(0);
}

