string seconds;
string included;
string included2;
string time;
string date;
string ampm;
int hour2;
string get_date(bool include_weekday=false, bool numerical=true)
{
date="";
if (numerical==true)
{
if (include_weekday==true)
{
date+=DATE_WEEKDAY_NAME+", "+DATE_MONTH+"-"+DATE_DAY+"-"+DATE_YEAR;
}
else
{
date+=DATE_MONTH+"-"+DATE_DAY+"-"+DATE_YEAR;
}
}
else
{
if (include_weekday==true)
{
date=DATE_WEEKDAY_NAME+", "+DATE_MONTH_NAME+" "+DATE_DAY+", "+DATE_YEAR;
}
else
{
date=DATE_MONTH_NAME+" "+DATE_DAY+", "+DATE_YEAR;
}
}
return date;
}
string get_time(bool twelvehour=true, bool include_seconds=true)
{
time="";
if (TIME_SECOND<10)
{
included2="0";
}
else
{
included2="";
}
if (TIME_MINUTE<=9)
{
included="0";
}
else
{
included="";
}
if (TIME_HOUR<12)
{
ampm="AM";
}
if (TIME_HOUR>=12)
{
hour2=TIME_HOUR-12;
ampm="PM";
}
if (TIME_HOUR==0)
{
hour2=12;
}
if (TIME_HOUR>0 and TIME_HOUR<=12)
{
hour2=TIME_HOUR;
}
seconds=TIME_SECOND;
if (twelvehour==true)
{
if (include_seconds==true)
{
time=hour2+":"+included+TIME_MINUTE+":"+included2+seconds+" "+ampm;
}
else
{
time=hour2+":"+included+TIME_MINUTE+" "+ampm;
}
}
else
{
if (include_seconds==true)
{
time=TIME_HOUR+":"+included+TIME_MINUTE+":"+included2+seconds;
}
else
{
time=TIME_HOUR+":"+included+TIME_MINUTE;
}
}
return time;
}

string measure_time_units(int64 milliseconds)
{
int64 seconds = milliseconds / 1000;
if(seconds < 1)
{
return milliseconds + " ms";
}
else if(seconds < 60)
{
int whole_seconds = int(seconds);
int ms = int(milliseconds % 1000);
return whole_seconds + " seconds, " + ms + " ms";
}
else if(seconds < 3600)
{
int minutes = int(seconds / 60);
int remaining_seconds = int(seconds % 60);
int ms = int(milliseconds % 1000);
return minutes + " minutes, " + remaining_seconds + " seconds, " + ms + " ms";
}
else
{
int hours = int(seconds / 3600);
int minutes = int((seconds % 3600) / 60);
int remaining_seconds = int(seconds % 60);
int ms = int(milliseconds % 1000);
return hours + " hours, " + minutes + " minutes, " + remaining_seconds + " seconds, " + ms + " ms";
}
}

class time_elapsed
{
timer@handle;
int milliseconds;
int seconds;
int minutes;
int rest;
void set_timer(timer@counter) {
@handle=counter;
}
void refresh() {
milliseconds=handle.elapsed;
minutes=milliseconds/60000;
rest=milliseconds%60000;
seconds=rest/1000;
}
int m() {
refresh();
return minutes;
}
int s() {
refresh();
return seconds;
}
int ms() {
refresh();
return milliseconds;
}
}
