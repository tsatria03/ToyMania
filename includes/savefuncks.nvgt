void readdata()
{
    sd.load();
if (sd.d.exists("endless"))
{
endless = sd.read_bool("endless");
}
    if (sd.d.exists("level"))
{
        level = sd.read_double("level");
    }
    if (sd.d.exists("money"))
{
        money = sd.read_double("money");
    }
    if (sd.d.exists("collected_toys"))
{
        collected_toys = sd.read_double("collected_toys");
    }
    if (sd.d.exists("collected_keys"))
{
        collected_keys = sd.read_double("collected_keys");
    }
    if (sd.d.exists("killed_gards"))
{
        killed_gards = sd.read_double("killed_gards");
    }
    if (sd.d.exists("destroyed_cars"))
{
        destroyed_cars = sd.read_double("destroyed_cars");
    }
    if (sd.d.exists("moved_steps"))
{
        moved_steps = sd.read_double("moved_steps");
    }
    if (sd.d.exists("session_playtime"))
{
        session_playtime = sd.read_int64("session_playtime");
    }
if (sd.d.exists("last_played_date"))
{
last_played_date = sd.read_string("last_played_date");
}
if (sd.d.exists("last_played_time"))
{
last_played_time = sd.read_string("last_played_time");
}
    if (sd.d.exists("total_collected_toys"))
{
        total_collected_toys = sd.read_double("total_collected_toys");
    }
    if (sd.d.exists("total_collected_keys"))
{
        total_collected_keys = sd.read_double("total_collected_keys");
    }
    if (sd.d.exists("total_killed_gards"))
{
        total_killed_gards = sd.read_double("total_killed_gards");
    }
    if (sd.d.exists("total_destroyed_cars"))
{
        total_destroyed_cars = sd.read_double("total_destroyed_cars");
    }
    if (sd.d.exists("total_moved_steps"))
{
        total_moved_steps = sd.read_double("total_moved_steps");
    }
    if (sd.d.exists("total_playtime"))
{
        total_playtime = sd.read_int64("total_playtime");
    }
    for (uint i = 0; i < achievements.length(); i++)
    {
        string id = "ach_tier_" + (achievements[i].isSessionBased ? "session_" : "lifetime_") + achievements[i].name;
        if (sd.d.exists(id))
        {
            achievements[i].currentTier = sd.read_double(id);
        }
    }
}
void writedata()
{
    last_played_date = get_date(true, false);
    last_played_time = get_time(true, false);
sd.add("endless", endless);
    sd.add("level", level);
sd.add("money", money);
    sd.add("collected_toys", collected_toys);
    sd.add("collected_keys", collected_keys);
    sd.add("killed_gards", killed_gards);
    sd.add("destroyed_cars", destroyed_cars);
    sd.add("moved_steps", moved_steps);
    sd.add("session_playtime", session_playtime);
sd.add("last_played_date", last_played_date);
sd.add("last_played_time", last_played_time);
    sd.add("total_collected_toys", total_collected_toys);
    sd.add("total_collected_keys", total_collected_keys);
    sd.add("total_killed_gards", total_killed_gards);
    sd.add("total_destroyed_cars", total_destroyed_cars);
    sd.add("total_moved_steps", total_moved_steps);
    sd.add("total_playtime", total_playtime);
    for (uint i = 0; i < achievements.length(); i++)
    {
        string id = "ach_tier_" + (achievements[i].isSessionBased ? "session_" : "lifetime_") + achievements[i].name;
        sd.add(id, achievements[i].currentTier);
    }
    sd.save();
}
void readpreffs()
{
st.load();
if (st.d.exists("menumusvolume"))
{
menumusvolume = st.read_int("menumusvolume");
}
if (st.d.exists("bitplays"))
{
bitplays = st.read_double("bitplays");
}
if (st.d.exists("crashplays"))
{
crashplays = st.read_double("crashplays");
}
if (st.d.exists("stoneplays"))
{
stoneplays = st.read_double("stoneplays");
}
if (st.d.exists("swordplays"))
{
swordplays = st.read_double("swordplays");
}
if (st.d.exists("alarmvolume"))
{
alarmvolume = st.read_double("alarmvolume");
}
if (st.d.exists("heartvolume"))
{
heartvolume = st.read_double("heartvolume");
}
if (st.d.exists("toyambvolume"))
{
toyambvolume = st.read_double("toyambvolume");
}
if (st.d.exists("toymusvolume"))
{
toymusvolume = st.read_double("toymusvolume");
}
if (st.d.exists("master_volume"))
{
    master_volume = st.read_float("master_volume");
    set_sound_master_volume(master_volume);
}
if (st.d.exists("auto_check_updates"))
{
auto_check_updates = st.read_bool("auto_check_updates");
}
if (st.d.exists("menuwrap"))
{
menuwrap = st.read_bool("menuwrap");
}
if (st.d.exists("showset_desc"))
{
showset_desc = st.read_bool("showset_desc");
}
if (st.d.exists("autorun"))
{
autorun = st.read_bool("autorun");
}
if (st.d.exists("behind_pitch"))
{
behind_pitch = st.read_bool("behind_pitch");
}
if (st.d.exists("hrtf"))
{
hrtf = st.read_bool("hrtf");
sound_global_hrtf = hrtf;
}
if (st.d.exists("play_ach_scores"))
{
play_ach_scores = st.read_bool("play_ach_scores");
}
if (st.d.exists("speak_ach_scores"))
{
speak_ach_scores = st.read_bool("speak_ach_scores");
}
if (st.d.exists("speak_dlg_enter"))
{
speak_dlg_enter = st.read_bool("speak_dlg_enter");
}
if (st.d.exists("speak_menu_loading"))
{
speak_menu_loading = st.read_bool("speak_menu_loading");
}
if (st.d.exists("gamcopy"))
{
gamcopy = st.read_bool("gamcopy");
}
if (st.d.exists("statscopy"))
{
statscopy = st.read_bool("statscopy");
}
if (st.d.exists("loop_previews"))
{
loop_previews = st.read_bool("loop_previews");
}
if (st.d.exists("variant_descriptions"))
{
variant_descriptions = st.read_bool("variant_descriptions");
}
if (st.d.exists("copexpsounds"))
{
copexpsounds = st.read_bool("copexpsounds");
}
if (st.d.exists("quit_menu"))
{
quit_menu = st.read_bool("quit_menu");
}
if (st.d.exists("playcounts"))
{
playcounts = st.read_bool("playcounts");
}
if (st.d.exists("playlevels"))
{
playlevels = st.read_bool("playlevels");
}
if (st.d.exists("completesound"))
{
completesound = st.read_bool("completesound");
}
if (st.d.exists("togglesound"))
{
togglesound = st.read_bool("togglesound");
}
if(st.d.exists("soundcard"))
{
soundcard=st.read_string("soundcard");
string[]@devices=get_sound_output_devices();
devices.remove_at(0);
for(uint i=0; i<devices.length(); i++)
{
if(devices[i]==soundcard)
{
sound_output_device=i+1;
break;
}
}
}
}
void writepreffs()
{
st.add("menumusvolume", menumusvolume);
st.add("soundcard",soundcard);
st.add("bitplays", bitplays);
st.add("crashplays", crashplays);
st.add("stoneplays", stoneplays);
st.add("swordplays", swordplays);
st.add("alarmvolume", alarmvolume);
st.add("heartvolume", heartvolume);
st.add("toyambvolume", toyambvolume);
st.add("toymusvolume", toymusvolume);
st.add("master_volume", master_volume);
st.add("auto_check_updates", auto_check_updates);
st.add("menuwrap", menuwrap);
st.add("showset_desc", showset_desc);
st.add("autorun", autorun);
st.add("behind_pitch", behind_pitch);
st.add("hrtf", hrtf);
st.add("play_ach_scores", play_ach_scores);
st.add("speak_ach_scores", speak_ach_scores);
st.add("speak_dlg_enter", speak_dlg_enter);
st.add("speak_menu_loading", speak_menu_loading);
st.add("gamcopy", gamcopy);
st.add("statscopy", statscopy);
st.add("loop_previews", loop_previews);
st.add("variant_descriptions", variant_descriptions);
st.add("copexpsounds", copexpsounds);
st.add("quit_menu", quit_menu);
st.add("playcounts", playcounts);
st.add("playlevels", playlevels);
st.add("completesound", completesound);
st.add("togglesound", togglesound);
st.save();
}
