string currentlangfile = "none";
dictionary g_lang;
file langfile;
int alert_translated(string title, string text, bool can_cancel = false, uint flags = 0)
{
return alert(process_digits(title), process_digits(text), can_cancel, flags);
}
bool speak_translated(string text, bool interrupt = tts_default_interrupt, bool braille = true)
{
string translated = process_digits(text);
speechbuff = translated;
if (translated.length() > 10000) {
string tmp = translated;
while (tmp.length() > 0) {
uint pos = 4096;
while (pos > 2048 and pos < tmp.length() and tmp[pos] != " ") pos--;
raw_speak_translated(tmp.substr(0, pos), interrupt and tmp.length() == translated.length());
tmp = tmp.substr(pos);
}
} else {
raw_speak_translated(translated, interrupt);
}
return true;
}
void raw_speak_translated(string text, bool interrupt)
{
	if (interrupt and tts.speaking) tts.stop();
	if (@tts_config_form != null) {
		use_sr = tts_config_form.is_checked(0);
		if (!use_sr) {
			int voice = tts_config_form.get_list_position(1);
			int rate = tts_config_form.get_slider(2);
			int volume = tts_config_form.get_slider(3);
			if (voice > -1 and tts.voice != voice) tts.set_voice(voice);
			if (tts.rate != rate) tts.set_rate(rate);
			if (tts.volume != volume) tts.set_volume(volume);
		}
	}
	if (!use_sr or !screen_reader_has_speech())
		tts.speak(text, interrupt);
	else
		screen_reader_speak(text, interrupt);
}
void show_translated_window(const string& in msg)
{
show_window(process_digits(msg));
}
array<string> list_languages()
{
    array<string> result;
    string[] normalLangs = find_files("data/lang/normal/*.lng");
    for (uint i = 0; i < normalLangs.length(); i++)
    {
        string name = strip_extension(strip_directory(normalLangs[i]));
        result.insert_last(name);
    }
    string[] variantLangDirs = find_directories("data/lang/variants/*");
    for (uint i = 0; i < variantLangDirs.length(); i++)
    {
        string langFolder = strip_directory(variantLangDirs[i]);
        string[] variants = find_files("data/lang/variants/" + langFolder + "/*.lng");
        for (uint j = 0; j < variants.length(); j++)
        {
            string variantName = strip_extension(strip_directory(variants[j]));
            result.insert_last(langFolder + "/" + variantName);
        }
    }
    result.sort_ascending();
    return result;
}
string clean_key(string key)
{
    key = trim(key).lower();
    string cleaned = "";
    for (uint i = 0; i < key.length(); i++)
    {
        string c = key.substr(i, 1);
        if (c != "." && c != ":" && c != "(" && c != ")")
            cleaned += c;
    }
    return cleaned;
}
string trl(string key) {
if (currentlangfile.lower() == "none") return key;
string cleanedKey = clean_key(key);
if (!g_lang.exists(cleanedKey)) return key;
return string(g_lang[cleanedKey]);
}
string trl_check(const string& in key) {
if (currentlangfile.lower() == "none") return key;
string cleanedKey = clean_key(key);
if (!g_lang.exists(cleanedKey)) {
check_translations({key});
}
return trl(key);
}
void check_translations(string[] phrases)
{
if (currentlangfile.lower() == "none") return;
string path;
if (currentlangfile.find("/") != -1)
{
string[] parts = string_split(currentlangfile, "/");
if (parts.length() == 2)
path = "data/lang/variants/" + parts[0] + "/" + parts[1] + ".lng";
}
else
{
path = "data/lang/normal/" + currentlangfile + ".lng";
}
string[] lines;
file reader;
if (reader.open(path, "r"))
{
lines = string_split(reader.read(), "\r\n", true);
reader.close();
}
dictionary unique_lines;
for (uint i = 0; i < lines.length(); i++) {
string line = lines[i];
if (line != "") {
unique_lines[line] = true;
}
}
for (uint p = 0; p < phrases.length(); p++)
{
string line = phrases[p] + "=" + phrases[p];
if (!unique_lines.exists(line)) {
unique_lines[line] = true;
}
}
string[] sorted_lines = unique_lines.get_keys();
sorted_lines.sort_ascending();
file writer;
if (writer.open(path, "w"))
{
for (uint i = 0; i < sorted_lines.length(); i++) {
writer.write(sorted_lines[i] + "\r\n");
}
writer.close();
}
}
void load_language(string langfile)
{
    g_lang.clear();
    if (langfile.lower() == "none")
{
        currentlangfile = "None";
        writepreffs();
        return;
    }
    bool fallback = false;
    string filepath;
    if (langfile.find("/") != -1)
{
        string[] parts = string_split(langfile, "/");
        if (parts.length() == 2)
{
            filepath = "data/lang/variants/" + parts[0] + "/" + parts[1] + ".lng";
        }
else
{
            alert_translated("Error", "Invalid language path format: " + langfile + ". Falling back to English.");
            langfile = "English";
            filepath = "data/lang/normal/English.lng";
            fallback = true;
        }
    }
else
{
        filepath = "data/lang/normal/" + langfile + ".lng";
    }
    string content = get_file_contents(filepath);
    if (trim(content) == "")
{
        if (langfile != "English")
{
            alert_translated("Error", "The language file " + filepath + " is missing or empty. Falling back to English.");
            fallback = true;
            langfile = "English";
            filepath = "data/lang/normal/English.lng";
            content = get_file_contents(filepath);
        }
        if (trim(content) == "")
{
            alert_translated("Error", "The fallback language file English.lng is missing or empty. Cannot continue.");
            exit();
        }
    }
    string[] lines = string_split(content, "\r\n");
    bool foundValidEntry = false;
    for (uint i = 0; i < lines.length(); i++)
{
        string line = trim(lines[i]);
        if (line == "" || line[0] == ';' || line[0] == '#') continue;
        int eq = line.find("=");
        if (eq > 0)
{
            string key = trim(line.substr(0, eq));
            string value = trim(line.substr(eq + 1));
            g_lang.set(clean_key(key), value);
            foundValidEntry = true;
        }
    }
    if (!foundValidEntry)
{
        if (langfile != "English")
{
            alert_translated("Error", "The language file " + filepath + " contained no valid entries. Falling back to English.");
            fallback = true;
            load_language("English");
            return;
        }
else
{
            alert_translated("Error", "The fallback language file English.lng contains no valid entries. Cannot continue.");
            exit();
        }
    }
    currentlangfile = fallback ? "English" : langfile;
    writepreffs();
    sort_language_file(filepath);
}
void sort_language_file(string path) {
string[] lines;
file reader;
if (reader.open(path, "r")) {
lines = string_split(reader.read(), "\r\n", true);
reader.close();
}
array<string> filtered;
for (uint i = 0; i < lines.length(); i++) {
string line = trim(lines[i]);
if (line == "" || line[0] == ';' || line[0] == '#') continue;
filtered.insert_last(line);
}
filtered.sort_ascending();
file writer;
if (writer.open(path, "w")) {
for (uint i = 0; i < filtered.length(); i++)
writer.write(filtered[i] + "\r\n");
writer.close();
}
}
