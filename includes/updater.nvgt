bool is_newer_version(string oldv, string newv)
{
    oldv = string_trim_sides(oldv);
    newv = string_trim_sides(newv);
    return string_to_number(newv) > string_to_number(oldv);
}
bool check_for_updates(string old_version, string projectname, bool precheck = false)
{
    if (precheck)
{
        speak("Checking for updates...");
        wait(1000);
    }
    string version_url = "https://tsatria03.github.io/projects/" + projectname + "/version.txt";
    string new_version = url_get(version_url);
    if (new_version == "" || string_contains(new_version, "<!DOCTYPE", 1) > -1)
{
        alert("Error", "Could not check for updates at this time.");
        mainmenu();
        return false;
    }
    if (!is_newer_version(old_version, new_version))
{
        if (precheck)
            alert("No updates available", "You already have the latest version of the game.");
        mainmenu();
        return false;
    }
    int response = question("Update Available", "A new version of " + projectname + " is available. Your version: " + old_version + ". Latest version: " + new_version + ". Would you like to download it now?");
    if (response != 1)
{
        mainmenu();
        return false;
    }
    wait(500);
    string url = get_download_url(projectname, new_version);
    string filename = get_disk_filename(url);
    string bare_name = strip_extension(strip_directory(filename));
if (system_is_unix)
{
    clipboard_set_text(url);
alert("Manual Download Required", "This update must be installed manually for this platform. The download link has been copied to your clipboard. Please paste it into your browser to download the update.");
    mainmenu();
    return false;
}
if (!file_exists(filename))
{
    string test_file = filename + ".test";
    if (!put_file_contents(test_file, "test"))
{
wait(500);
        int choice = question("Permission Denied", "This update can't be downloaded to this directory because it's write-protected. Would you like to download this file to your Downloads folder instead?");
        if (choice != 1)
{
            speak("Update canceled.");
            mainmenu();
            return false;
        }
        string downloads_folder = get_downloads_folder();
        filename = downloads_folder + strip_directory(filename);
    }
else
{
        file_delete(test_file);
    }
wait(500);
    string result = dl_file(url, filename);
    if (result != "finished")
{
        if (result == "canceled" && file_exists(filename)) file_delete(filename);
        alert("Download Failed", "The update could not be downloaded.");
        mainmenu();
        return false;
    }
}
else
{
    wait(500);
    alert("Notice", "The update file already exists. Skipping download.");
}
    wait(500);
    string ext = filename.substr(filename.rfind(".") + 1);
    setupmenu(false);
    if (ext == "exe")
{
        m.add_item("Run Installer", "run");
    }
else if (ext == "7z" || ext == "zip")
{
        m.add_item("Extract file", "extract");
    }
    m.add_item("Cancel", "cancel");
    m.intro_text = "The update has been downloaded. What would you like to do with " + bare_name + "?";
    int mres = m.run();
    string choice = m.get_selected_item_id();
    if (mres == -1 || choice == "cancel")
{
        speak("Canceled");
        mainmenu();
        return false;
    }
    if (choice == "run")
{
wait(500);
        if (!run(filename, "", false, false))
{
            alert("Error", "Could not launch the installer.");
        }
        exit();
        return false;
    }
    if (choice == "extract")
{
wait(500);
        speak("Extracting update...");
        wait(1000);
        bool success = run("lib/7zr.exe", "x \"" + filename + "\" -pGreatCollector -aoa -y", true, true);
        if (success)
{
            if (file_exists(filename)) file_delete(filename);
            alert("Update Complete", "The update has been successfully extracted to the tm folder. Please run the new version of the game to continue.");
            exit();
        }
else
{
            alert("Extraction Failed", "Failed to extract the archive.");
        }
    }
    mainmenu();
    return true;
}
string dl_file(string url, string disk_file,bool quiet=false,string msg="Downloading. Press Space for percentage, 1 2 and 3 keys for detailed progress, or escape to cancel. Press m to mute or unmute progress beeps. Press h to read this help message again.")
{
internet_request r(url, disk_file);
if(!quiet) speak(msg);
double last_percentage=0;
int progbeeps=1;
string status;
while(r.complete!=true)
{
wait(5);
if (r.download_percent==r.download_percent && r.download_percent>=0 && r.download_percent-last_percentage>=1)
{
if(progbeeps==1 && r.download_percent>0) beep_percentage(r.download_percent);
last_percentage=r.download_percent;
}
if (key_pressed(KEY_ESCAPE))
{
status="canceled";
speak(status);
return status;
}
if (key_pressed(KEY_1))
{
string size=round(r.download_size/1024/1024, 2)+" MB ("+round(r.download_size/1024, 2)+" KB)";
speak("File size: "+size);
}
if (key_pressed(KEY_2))
{
string size=round(r.bytes_downloaded/1024/1024, 2)+" MB ("+round(r.bytes_downloaded/1024, 2)+" KB)";
speak("Total downloaded: "+size);
}
if (key_pressed(KEY_3))
{
string size=(round(r.download_size/1024/1024, 2)-round(r.bytes_downloaded/1024/1024, 2))+" MB( "+(round(r.download_size/1024, 2)-round(r.bytes_downloaded/1024, 2))+" KB)";
speak("Total remaining: "+size);
}
if (key_pressed(KEY_H))
{
speak(msg);
}
if (key_pressed(KEY_M))
{
if(progbeeps==1)
{
progbeeps=0;
speak("Progress beeps muted.");
}
else if(progbeeps==0)
{
progbeeps=1;
speak("Progress beeps unmuted.");
}
}
if (key_pressed(KEY_SPACE))
{
if(r.download_percent==r.download_percent && r.download_percent>=0)
{
speak(round(r.download_percent, 2)+" percent downloaded");
}
else
{
speak("Download progress unavailable.");
}
}
if(r.complete==true)
{
status="finished";
}
}
return status;
}
string get_downloads_folder()
{
    if (system_is_windows)
        return expand_environment_variables("%USERPROFILE%\\Downloads\\");
    else if (system_is_unix)
        return expand_environment_variables("$HOME/Downloads/");
    else
        return "";
}
string get_download_url(string projectname, string new_version)
{
    bool is_mac = system_is_unix;
    string base = "https://github.com/tsatria03/" + projectname + "/releases/download/V" + new_version+"0";
    if (is_mac)
    {
        return base + "/ToyMania_mac_portable_password_is_GreatCollector.zip";
    }
    else
    {
        setupmenu(false);
        m.add_item("Windows Installer", "installer");
        m.add_item("Windows Portable", "portable");
m.add_item("cancel", "cancel");
        m.intro_text = "Which version of the game would you like to download?";
        int mres = m.run();
        string version_choice = m.get_selected_item_id();
        if (mres == -1 || version_choice == "cancel") mainmenu();
        if (version_choice == "portable")
            return base + "/ToyMania_windows_portable_password_is_GreatCollector.7z";
        else
            return base + "/ToyMania_windows_installer.exe";
    }
}
string get_disk_filename(string url)
{
    string[] parts = string_split(url, "/", true);
    return (parts.length() > 0) ? parts[parts.length() - 1] : "update_file";
}
