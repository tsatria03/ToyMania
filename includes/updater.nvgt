bool is_newer_version(string oldv, string newv)
{
    oldv = string_trim_sides(oldv);
    newv = string_trim_sides(newv);
    return string_to_number(newv) > string_to_number(oldv);
}
bool check_for_updates(string old_version, string projectname, bool precheck = false)
{
    if (precheck)
{
        speak("Checking for updates...");
        wait(1000);
    }
    string version_url = "https://tsatria03.github.io/projects/" + projectname + "/version.txt";
    string new_version = url_get(version_url);
    if (new_version == "" || string_contains(new_version, "<!DOCTYPE", 1) > -1)
{
        alert("Error", "Could not check for updates at this time.");
        mainmenu();
        return false;
    }
    if (!is_newer_version(old_version, new_version))
{
        if (precheck) alert("No updates found", "You already have the latest version.");
        mainmenu();
        return false;
    }
    int response = question("Update Available", "A new version of " + projectname + " is available. Your version: " + old_version + ". New version: " + new_version + ". Would you like to download it now?");
    if (response != 1)
{
        mainmenu();
        return false;
    }
    wait(500);
    string url = get_download_url(projectname, new_version);
    string filename = get_disk_filename(url);
    string bare_name = strip_extension(strip_directory(filename));
    if (!file_exists(filename))
{
        string result = dl_file(url, filename);
        if (result != "finished")
{
            if (result == "canceled" && file_exists(filename)) file_delete(filename);
            alert("Download Failed", "The update could not be downloaded.");
            mainmenu();
            return false;
        }
    }
else
{
wait(500);
        alert("Notice", "The update file already exists. Skipping download.");
    }
    wait(500);
string ext = filename.substr(filename.rfind(".") + 1);
    setupmenu(false);
    if (ext == "exe")
{
        m.add_item("Run Installer", "run");
    }
else if (ext == "7z" || ext == "zip")
{
        m.add_item("Extract file", "extract");
    }
    m.add_item("Cancel", "cancel");
    m.intro_text = "The update has been downloaded. What would you like to do with " + bare_name + "?";
    int mres = m.run();
    string choice = m.get_selected_item_id();
    if (mres == -1 || choice == "cancel")
{
        speak("Canceled");
        mainmenu();
        return false;
    }
    if (choice == "run")
{
        if (!run(filename, "", false, false))
{
            alert("Error", "Could not launch the installer.");
        }
        mainmenu();
        return false;
    }
    if (choice == "extract")
{
        if (system_is_unix)
{
            alert("Manual Extraction Required", "Please manually extract the update file using a suitable tool. Automatic extraction is not supported on this Mac.");
            mainmenu();
            return false;
        }
        setupmenu(false);
        m.add_item("Yes", "yes");
        m.add_item("No", "no");
        m.intro_text = "Are you sure you want to overwrite your existing game files?";
        int confirm = m.run();
        string confirm_choice = m.get_selected_item_id();
        if (confirm == -1 || confirm_choice != "yes")
{
            speak("Update canceled.");
            mainmenu();
            return false;
        }
        speak("Extracting update...");
        wait(1000);
bool success = run("lib/7zr.exe", "x \"" + filename + "\" -pGrateCollector -aoa -y", true, true);
if (success)
{
    int cleanup = question("Cleanup", "The update has been extracted successfully. Would you like to delete the downloaded archive?");
    if (cleanup == 1 && file_exists(filename))
    {
        file_delete(filename);
        speak("Archive deleted.");
    }
    else
    {
        speak("Archive kept.");
    }
    alert("Success", "Update extracted and applied successfully. The game will now restart.");
    restart();
}
else
{
            alert("Extraction Failed", "Failed to extract the archive.");
        }
    }
    mainmenu();
    return true;
}
string get_download_url(string projectname, string new_version)
{
    bool is_mac = system_is_unix;
    string base = "https://github.com/tsatria03/" + projectname + "/releases/download/V" + new_version+"0";
    if (is_mac)
    {
        return base + "/ToyMania_mac_portable_password_is_GrateCollector.zip";
    }
    else
    {
        setupmenu(false);
        m.add_item("Windows Installer", "installer");
        m.add_item("Windows Portable", "portable");
m.add_item("cancel", "cancel");
        m.intro_text = "Which version of the game would you like to download?";
        int mres = m.run();
        string version_choice = m.get_selected_item_id();
        if (mres == -1 || version_choice == "cancel") mainmenu();
        if (version_choice == "portable")
            return base + "/ToyMania_windows_portable_password_is_GrateCollector.7z";
        else
            return base + "/ToyMania_windows_installer_password_is_GrateCollector.exe";
    }
}
string get_disk_filename(string url)
{
    string[] parts = string_split(url, "/", true);
    if (parts.length()> 0) return parts[parts.length()- 1];
    return "update_file";
}
