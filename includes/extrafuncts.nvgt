bool alt_is_down()
{
if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
return true;
}
return false;
}
bool control_is_down()
{
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
return true;
}
return false;
}
bool shift_is_down()
{
if(key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
return true;
}
return false;
}
bool int_to_bool(int i)
{
return i==1? true:false;
}
int bool_to_int(bool b)
{
return b? 1:0;
}
int[] generate_achievement_thresholds(int start, int count, double multiplier)
{
	int[] result;
	int value = start;
	for (int i = 0; i < count; i++)
{
		result.insert_last(value);
		value = int(value * multiplier);
	}
	return result;
}
string random_string(string[] array)
{
string retval=array[random(0,array.length()-1)];
return retval;
}
void dockread(const string&in filename)
{
if(!file_exists(filename))
{
alert("Error","Could not fined "+string_replace(filename, "docks/", "", true));
docksmenu();
}
dockfile.open(filename,"rb");
string docktext=dockfile.read();
dockfile.close();
form.reset();
form.create_window("Viewing "+string_replace(filename, "docks/", "", true),false,false,false);
int dockbox=form.create_input_box(string_replace(filename, "docks/", "", true), docktext, read_only:true, multiline:true);
int dockclose=form.create_button("&close",false,true);
form.focus(dockbox);
while(true)
{
wait(5);
form.monitor();
if (form.is_pressed(dockclose))
{
docksmenu();
}
}
}
void fade_multi_pool(int fade_mode=1)
{
sound_pool@[] pools = {p, pool, bosspool, carpool, doorpool, gardpool, keypool, toypool};
if(fade_mode==0)
{
fade_pitch_pool(pools);
}
if(fade_mode==1)
{
fade_volume_pool(pools);
}
}
void fade_pitch_pool(sound_pool@[] handles, double time=20, double minpitch=20, double amount=2)
{
bool all_faded = false;    
while(!all_faded)
{
all_faded = true;
for(uint h=0; h<handles.length(); h++)
{
for(uint i=0; i<handles[h].items.length(); i++)
{
if(@handles[h].items[i].handle!=null && handles[h].items[i].handle.playing)
{
double current_pitch = handles[h].items[i].handle.pitch;
if(current_pitch > minpitch)
{
double new_pitch = current_pitch - amount;
if(new_pitch < minpitch)
new_pitch = minpitch;
handles[h].items[i].handle.pitch = new_pitch;
all_faded = false;
}
}
}
}
wait(time);
}    
for(uint h=0; h<handles.length(); h++)
{
handles[h].destroy_all();
}
}
void fade_volume_pool(sound_pool@[] handles, double time=0.25, double minvol=-50)
{
for(double current=0; current>minvol; current-=time)
{
for(uint h=0; h<handles.length(); h++)
{
for(uint x=0; x<handles[h].items.length(); x++)
{
if(@handles[h].items[x].handle==null)
continue;
if(handles[h].items[x].handle.playing==false)
continue;
handles[h].items[x].handle.volume = handles[h].items[x].handle.volume-time;
}
}
wait(5);
}
for(uint h=0; h<handles.length(); h++)
{
handles[h].destroy_all();
}
}
void setupmenu(bool music_added = true)
{
if (music_added)
{
m.add_music("menumus.ogg");
} else
{
m.add_music("");
}
m.reset();
m.automatic_intro = true;
m.focus_first_item = false;
m.wrap = false;
m.click_sound = "menuclick.ogg";
m.close_sound = "menuclose.ogg";
m.edge_sound = "menuedge.ogg";
m.enter_sound = "menuenter.ogg";
m.open_sound = "menuopen.ogg";
m.wrap_sound = "menuwrap.ogg";
}
void show_achievements()
{
    setupmenu(false);
    for (uint i = 0; i < achievements.length(); i++)
{
        m.add_item(achievements[i].get_progress_status(), "");
    }
    m.add_item("Back", "back");
    m.intro_text = "Achievements menu.";
    int r = m.run();
    if (r == -1 or m.get_selected_item_id() == "back")
{
        mainmenu();
    }
else
{
        show_achievements();
    }
}
void update_achievements()
{
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].check_progress())
        {
            string actionVerb = "";
            string unit = "";
            if (achievements[i].name == "Toys")
            {
                actionVerb = "collected a total of ";
                unit = "toys";
            }
            else if (achievements[i].name == "Keys")
            {
                actionVerb = "collected a total of ";
                unit = "keys";
            }
            else if (achievements[i].name == "Guards")
            {
                actionVerb = "killed a total of ";
                unit = "guards";
            }
            else if (achievements[i].name == "Cars")
            {
                actionVerb = "destroyed a total of ";
                unit = "cars";
            }
            else if (achievements[i].name == "Steps")
            {
                actionVerb = "taken a total of ";
                unit = "steps";
            }
            else if (achievements[i].name == "Playtime")
            {
                actionVerb = "played for a total of ";
                unit = "minutes";
            }
            string baseName = achievements[i].baseName;
            int value = achievements[i].get_value();
            if (achievements[i].currentTier >= achievements[i].thresholds.length())
            {
            achslot = pool.play_stationary("achievement" + random(1, 2) + ".ogg", false);
                dlgmessage("Amazing! You've completed all of the tiers of the " + baseName + " achievement! Press enter to continue.");
            }
            else
            {
            achslot = pool.play_stationary("achievement" + random(1, 2) + ".ogg", false);
speak("Congratulations! You just unlocked Tier " + achievements[i].currentTier + " of the " + baseName + " achievement. Youâ€™ve " + actionVerb + " " + value + " " + unit + ". Nice work!");
            }
        }
    }
}
