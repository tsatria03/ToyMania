bool alt_is_down()
{
if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
return true;
}
return false;
}
bool control_is_down()
{
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
return true;
}
return false;
}
bool shift_is_down()
{
if(key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
return true;
}
return false;
}
bool int_to_bool(int i)
{
return i==1? true:false;
}
double clamp(double value, double min, double max)
{
value=value<min? min:value;
value=value>max? max:value;
return value;
}

double min(double a, double b)
{
return (a < b) ? a : b;
}
double max(double a, double b)
{
return (a > b) ? a : b;
}
int bool_to_int(bool b)
{
return b? 1:0;
}
int[] generate_achievement_thresholds(int start, int count, double multiplier)
{
	int[] result;
	int value = start;
	for (int i = 0; i < count; i++)
{
		result.insert_last(value);
		value = int(value * multiplier);
	}
	return result;
}
string get_toy_rank()
{
	if (total_collected_toys < 10) return "Toyless";
	else if (total_collected_toys < 50) return "Toy Finder";
	else if (total_collected_toys < 150) return "Toy Collector";
	else if (total_collected_toys < 300) return "Toy Hoarder";
	else if (total_collected_toys < 600) return "Toy Fanatic";
	else return "Toy Overlord";
}
string get_key_rank()
{
	if (total_collected_keys < 5) return "Keyless";
	else if (total_collected_keys < 20) return "Key Novice";
	else if (total_collected_keys < 50) return "Key Grabber";
	else if (total_collected_keys < 100) return "Key Master";
	else return "Key Emperor";
}
string get_guard_rank()
{
	if (total_killed_gards < 10) return "Pacifist";
	else if (total_killed_gards < 50) return "Guard Slayer";
	else if (total_killed_gards < 150) return "Battle Hardened";
	else if (total_killed_gards < 300) return "Enforcer";
	else return "Warrior Supreme";
}
string get_car_rank()
{
	if (total_destroyed_cars < 10) return "Civilian";
	else if (total_destroyed_cars < 30) return "Road Wrecker";
	else if (total_destroyed_cars < 60) return "Bumper Smasher";
	else if (total_destroyed_cars < 120) return "Junkyard King";
	else return "Vehicular Menace";
}
string get_steps_rank()
{
	if (total_taken_steps < 500) return "Sedentary";
	else if (total_taken_steps < 2000) return "Wanderer";
	else if (total_taken_steps < 5000) return "Roamer";
	else if (total_taken_steps < 10000) return "Trekker";
	else return "Step Legend";
}
string get_playtime_rank()
{
	int minutes = int(total_playtime / 60000);
	if (minutes < 10) return "Beginner";
	else if (minutes < 30) return "Rookie";
	else if (minutes < 60) return "Explorer";
	else if (minutes < 120) return "Adventurer";
	else if (minutes < 240) return "Veteran";
	else return "Toymaster";
}
string get_toy_rank_desc()
{
	if (total_collected_toys < 10) return "You’ve barely started your toy journey.";
	else if (total_collected_toys < 50) return "You’re starting to find some toys!";
	else if (total_collected_toys < 150) return "You’ve become a dedicated collector.";
	else if (total_collected_toys < 300) return "Your collection is impressive!";
	else if (total_collected_toys < 600) return "You live for toys.";
	else return "You’ve mastered the art of toy collecting!";
}
string get_key_rank_desc()
{
	if (total_collected_keys < 5) return "Locked doors fear you not... eventually.";
	else if (total_collected_keys < 20) return "You’ve got the hang of finding keys.";
	else if (total_collected_keys < 50) return "No key is safe from your grasp.";
	else if (total_collected_keys < 100) return "You're a master of unlocking.";
	else return "You possess the keys to the entire world!";
}
string get_guard_rank_desc()
{
	if (total_killed_gards < 10) return "You prefer to avoid conflict.";
	else if (total_killed_gards < 50) return "You’ve taken down a few guards.";
	else if (total_killed_gards < 150) return "You battle guards with confidence.";
	else if (total_killed_gards < 300) return "You’re a relentless enforcer.";
	else return "You’ve dominated the battlefield!";
}
string get_car_rank_desc()
{
	if (total_destroyed_cars < 10) return "The roads remain mostly safe.";
	else if (total_destroyed_cars < 30) return "You’ve started causing a little wreckage.";
	else if (total_destroyed_cars < 60) return "You’ve left a trail of bumper destruction.";
	else if (total_destroyed_cars < 120) return "You rule the junkyard.";
	else return "Every car trembles in your presence.";
}
string get_steps_rank_desc()
{
	if (total_taken_steps < 500) return "You prefer standing still.";
	else if (total_taken_steps < 2000) return "You’ve started wandering.";
	else if (total_taken_steps < 5000) return "You roam with purpose.";
	else if (total_taken_steps < 10000) return "You’re always on the move.";
	else return "Your footsteps echo across the world!";
}
string get_playtime_rank_desc()
{
	int minutes = int(total_playtime / 60000);
	if (minutes < 10) return "You’re just getting started.";
	else if (minutes < 30) return "You’re warming up.";
	else if (minutes < 60) return "You’ve explored quite a bit.";
	else if (minutes < 120) return "You’re invested in the adventure.";
	else if (minutes < 240) return "You’ve proven your dedication.";
	else return "You are the ultimate ToyMaster.";
}
string random_string(string[] array)
{
string retval=array[random(0,array.length()-1)];
return retval;
}
void dockread(const string&in filename)
{
if(!file_exists(filename))
{
alert("Error","Could not fined "+string_replace(filename, "docks/", "", true));
docksmenu();
}
dockfile.open(filename,"rb");
string docktext=dockfile.read();
dockfile.close();
form.reset();
form.create_window("Viewing "+string_replace(filename, "docks/", "", true),false,false,false);
int dockbox=form.create_input_box(string_replace(filename, "docks/", "", true), docktext, read_only:true, multiline:true);
int dockclose=form.create_button("&close",false,true);
form.focus(dockbox);
while(true)
{
wait(5);
form.monitor();
if (form.is_pressed(dockclose))
{
docksmenu();
}
}
}
void fade_multi_pool(int fade_mode=1)
{
sound_pool@[] pools = {p, pool, bosspool, carpool, doorpool, gardpool, keypool, toypool};
if(fade_mode==0)
{
fade_pitch_pool(pools);
}
if(fade_mode==1)
{
fade_volume_pool(pools);
}
}
void fade_pitch_pool(sound_pool@[] handles, double time=20, double minpitch=20, double amount=2)
{
bool all_faded = false;    
while(!all_faded)
{
all_faded = true;
for(uint h=0; h<handles.length(); h++)
{
for(uint i=0; i<handles[h].items.length(); i++)
{
if(@handles[h].items[i].handle!=null && handles[h].items[i].handle.playing)
{
double current_pitch = handles[h].items[i].handle.pitch;
if(current_pitch > minpitch)
{
double new_pitch = current_pitch - amount;
if(new_pitch < minpitch)
new_pitch = minpitch;
handles[h].items[i].handle.pitch = new_pitch;
all_faded = false;
}
}
}
}
wait(time);
}    
for(uint h=0; h<handles.length(); h++)
{
handles[h].destroy_all();
}
}
void fade_volume_pool(sound_pool@[] handles, double time=0.25, double minvol=-50)
{
for(double current=0; current>minvol; current-=time)
{
for(uint h=0; h<handles.length(); h++)
{
for(uint x=0; x<handles[h].items.length(); x++)
{
if(@handles[h].items[x].handle==null)
continue;
if(handles[h].items[x].handle.playing==false)
continue;
handles[h].items[x].handle.volume = handles[h].items[x].handle.volume-time;
}
}
wait(5);
}
for(uint h=0; h<handles.length(); h++)
{
handles[h].destroy_all();
}
}
void play_toggle(bool setting)
{
	dlgplay(setting ? "setenabled.ogg" : "setdisabled.ogg", false);
}
void restart()
{
if(SCRIPT_COMPILED)
{
bool success=run("tm.exe","",false,false);
if(!success)
{
alert("errorr", "Unable to restart tm.exe!");
}
}
else
{
bool success=run("c:\\nvgt\\nvgtw.exe","tm.nvgt",false,false);
if(!success)
{
alert("errorr", "Unable to restart tm.nvgt!");
}
}
}
void load_achievements()
{
    achievements.insert_last(AchievementTracker("Toys", "Speed Collector", generate_achievement_thresholds(3, 25, 1.5), true));
    achievements.insert_last(AchievementTracker("Keys", "Key Snatcher", generate_achievement_thresholds(5, 25, 1.5), true));
    achievements.insert_last(AchievementTracker("Guards", "Strike Force", generate_achievement_thresholds(8, 25, 1.5), true));
    achievements.insert_last(AchievementTracker("Cars", "Crash Rush", generate_achievement_thresholds(10, 25, 1.5), true));
    achievements.insert_last(AchievementTracker("Steps", "Pace Breaker", generate_achievement_thresholds(15, 25, 1.5), true));
    achievements.insert_last(AchievementTracker("Playtime", "Sprint Runner", generate_achievement_thresholds(1, 25, 1.5), true));
achievements.insert_last(AchievementTracker("Toys", "Toy Collector", generate_achievement_thresholds(5, 50, 1.5), false));
achievements.insert_last(AchievementTracker("Keys", "Key Hunter", generate_achievement_thresholds(10, 50, 1.5), false));
achievements.insert_last(AchievementTracker("Guards", "Guard Slayer", generate_achievement_thresholds(15, 50, 1.5), false));
achievements.insert_last(AchievementTracker("Cars", "Car Crusher", generate_achievement_thresholds(20, 50, 1.5), false));
achievements.insert_last(AchievementTracker("Steps", "Pacer", generate_achievement_thresholds(25, 50, 1.5), false));
achievements.insert_last(AchievementTracker("Playtime", "Time Traveler", generate_achievement_thresholds(5, 50, 1.5), false));
}
void setupmenu(bool music_added = true)
{
if (music_added)
{
m.add_music("menumus.ogg");
} else
{
m.add_music("");
}
m.reset();
m.automatic_intro = true;
m.focus_first_item = false;
m.wrap = false;
m.click_sound = "menuclick.ogg";
m.close_sound = "menuclose.ogg";
m.edge_sound = "menuedge.ogg";
m.enter_sound = "menuenter.ogg";
m.open_sound = "menuopen.ogg";
m.wrap_sound = "menuwrap.ogg";
}
void update_achievements()
{
    for (uint i = 0; i < achievements.length(); i++)
    {
        bool unlocked = false;
        while (achievements[i].check_progress())
        {
            unlocked = true;
        }
        if (unlocked)
        {
            string actionVerb = "";
            string unit = "";
            if (achievements[i].name == "Toys")
            {
                actionVerb = "collected a total of ";
                unit = "toys";
            }
            else if (achievements[i].name == "Keys")
            {
                actionVerb = "collected a total of ";
                unit = "keys";
            }
            else if (achievements[i].name == "Guards")
            {
                actionVerb = "killed a total of ";
                unit = "guards";
            }
            else if (achievements[i].name == "Cars")
            {
                actionVerb = "destroyed a total of ";
                unit = "cars";
            }
            else if (achievements[i].name == "Steps")
            {
                actionVerb = "taken a total of ";
                unit = "steps";
            }
            else if (achievements[i].name == "Playtime")
            {
                actionVerb = "played for a total of ";
                unit = "minutes";
            }
            string typeLabel = achievements[i].isSessionBased ? "Session " : "Lifetime ";
            string baseName = achievements[i].baseName;
            int value = achievements[i].get_value();
            string soundName = achievements[i].isSessionBased ? "session_achievement.ogg" : "life_achievement.ogg";
            if (achievements[i].currentTier >= achievements[i].thresholds.length())
            {
                if(play_ach_scores==true) achslot = pool.play_stationary(soundName, false);
                if(speak_ach_scores==true) speak("Amazing! You've completed all tiers of the " + typeLabel + baseName + " achievement! Press enter to continue.");
            }
            else
            {
                if(play_ach_scores==true) achslot = pool.play_stationary(soundName, false);
                if(speak_ach_scores==true) speak("Congratulations! You just unlocked Tier " + achievements[i].currentTier + " of the " + typeLabel + baseName + " achievement. You've " + actionVerb + value + " " + unit + ". Nice work!");
            }
        }
    }
}
