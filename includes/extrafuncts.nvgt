bool alt_is_down()
{
if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
return true;
}
return false;
}
bool control_is_down()
{
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
return true;
}
return false;
}
bool shift_is_down()
{
if(key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
return true;
}
return false;
}
bool int_to_bool(int i)
{
return i==1? true:false;
}
double clamp(double value, double min, double max)
{
value=value<min? min:value;
value=value>max? max:value;
return value;
}
double min(double a, double b)
{
return (a < b) ? a : b;
}
double max(double a, double b)
{
return (a > b) ? a : b;
}
int bool_to_int(bool b)
{
return b? 1:0;
}
int[] generate_achievement_thresholds(int start, int count, double multiplier)
{
int[] result;
int value = start;
for (int i = 0; i < count; i++)
{
result.insert_last(value);
value = int(value * multiplier);
}
return result;
}
string find_sound(string soundname)
{
string[] snd=find_files(soundname);
if (snd.length()>0)
{
string[] a_path=string_split(soundname,"/",true);
string path=string_replace(soundname,a_path[a_path.length()-1],"",true);
return path+snd[random(0,snd.length()-1)];
}
else
return "";
}
string random_string(string[] array)
{
string retval=array[random(0,array.length()-1)];
return retval;
}
string strip_extension(string filename)
{
    int dotIndex = filename.rfind(".");
    if (dotIndex != -1)
    {
        return filename.substr(0, dotIndex);
    }
    return filename;
}
string strip_directory(string path)
{
    int lastSlash = path.rfind("/");
    if (lastSlash == -1)
        lastSlash = path.rfind("\\");
    if (lastSlash != -1)
        return path.substr(lastSlash + 1);
    return path;
}

void draw_weapon(string weapon)
{
    if (current_weapon == weapon) return;
    current_weapon = weapon;
    weapontype = weapon;
if (weapon == "bat")
{
wepdamage = 3;
weprange = 1;
weprange2 = 2;
speak(weapontype + " equipped");
p.destroy_sound(weaponslot);
weaponslot = p.play_stationary(weapontype + "draw.ogg", false);
}
else if (weapon == "boot")
{
wepdamage = 6;
weprange = 2;
weprange2 = 3;
speak(weapontype + " equipped");
p.destroy_sound(weaponslot);
weaponslot = p.play_stationary(weapontype + "draw.ogg", false);
}
else if (weapon == "club")
{
wepdamage = 9;
weprange = 3;
weprange2 = 4;
speak(weapontype + " equipped");
p.destroy_sound(weaponslot);
weaponslot = p.play_stationary(weapontype + "draw.ogg", false);
}
else if (weapon == "feat")
{
wepdamage = 12;
weprange = 4;
weprange2 = 5;
speak(weapontype + " equipped");
p.destroy_sound(weaponslot);
weaponslot = p.play_stationary(weapontype + "draw.ogg", false);
}
else if (weapon == "fist")
{
wepdamage = 15;
weprange = 5;
weprange2 = 6;
speak(weapontype + " equipped");
p.destroy_sound(weaponslot);
weaponslot = p.play_stationary(weapontype + "draw.ogg", false);
}
else if (weapon == "hammer")
{
wepdamage = 18;
weprange = 6;
weprange2 = 7;
speak(weapontype + " equipped");
p.destroy_sound(weaponslot);
weaponslot = p.play_stationary(weapontype + "draw.ogg", false);
}
else if (weapon == "knife")
{
wepdamage = 21;
weprange = 7;
weprange2 = 8;
speak(weapontype + " equipped");
p.destroy_sound(weaponslot);
weaponslot = p.play_stationary(weapontype + "draw.ogg", false);
}
else if (weapon == "laser")
{
wepdamage = 24;
weprange = 8;
weprange2 = 9;
speak(weapontype + " equipped");
p.destroy_sound(weaponslot);
weaponslot = p.play_stationary(weapontype + "draw.ogg", false);
}
else if (weapon == "machinegun" and endless)
{
wepdamage = 27;
weprange = 9;
weprange2 = 10;
ammo = 100;
speak(weapontype + " equipped");
p.destroy_sound(weaponslot);
weaponslot = p.play_stationary(weapontype + "draw.ogg", false);
}
}
void draw_random_weapon()
{
string[] weapons;
if (endless)
{
weapons = {"bat", "boot", "club", "feat", "fist", "hammer", "knife", "laser", "machinegun"};
}
else
{
weapons = {"bat", "boot", "club", "feat", "fist", "hammer", "knife", "laser"};
}
string weapon = random_string(weapons);
draw_weapon(weapon);
speak(weapontype + " randomly equipped");
p.destroy_sound(weaponslot);
weaponslot = p.play_stationary(weapontype + "draw.ogg", false);
}
void apply_pitch_settings()
{
int pitchValue = behind_pitch ? 5 : 0;
p.behind_pitch_decrease = pitchValue;
bosspool.behind_pitch_decrease = pitchValue;
doorpool.behind_pitch_decrease = pitchValue;
carpool.behind_pitch_decrease = pitchValue;
gardpool.behind_pitch_decrease = pitchValue;
objpool.behind_pitch_decrease = pitchValue;
keypool.behind_pitch_decrease = pitchValue;
toypool.behind_pitch_decrease = pitchValue;
}
void dockread(const string&in filename)
{
if(!file_exists(filename))
{
alert("Error","Could not fined "+string_replace(filename, "docks/", "", true));
docksmenu();
}
dockfile.open(filename,"rb");
string docktext=dockfile.read();
dockfile.close();
form.reset();
form.create_window("Viewing "+string_replace(filename, "docks/", "", true),false,false,false);
int dockbox=form.create_input_box(string_replace(filename, "docks/", "", true), docktext, read_only:true, multiline:true);
int dockclose=form.create_button("&close",false,true);
form.focus(dockbox);
while(true)
{
wait(5);
form.monitor();
if (form.is_pressed(dockclose))
{
docksmenu();
}
}
}
void fade_multi_pool(int fade_mode=1)
{
sound_pool@[] pools = {p, pool, alarmpool, ambpool, bulletpool, heartpool, objpool, muspool, bosspool, carpool, gardpool, keypool, toypool};
if(fade_mode==0)
{
fade_pitch_pool(pools);
}
if(fade_mode==1)
{
fade_volume_pool(pools);
}
}
void fade_pitch_pool(sound_pool@[] handles, double time=20, double minpitch=20, double amount=2)
{
bool all_faded = false;    
while(!all_faded)
{
all_faded = true;
for(uint h=0; h<handles.length(); h++)
{
for(uint i=0; i<handles[h].items.length(); i++)
{
if(@handles[h].items[i].handle!=null && handles[h].items[i].handle.playing)
{
double current_pitch = handles[h].items[i].handle.pitch;
if(current_pitch > minpitch)
{
double new_pitch = current_pitch - amount;
if(new_pitch < minpitch)
new_pitch = minpitch;
handles[h].items[i].handle.pitch = new_pitch;
all_faded = false;
}
}
}
}
wait(time);
}    
for(uint h=0; h<handles.length(); h++)
{
handles[h].destroy_all();
}
}
void fade_volume_pool(sound_pool@[] handles, double time=0.25, double minvol=-50)
{
for(double current=0; current>minvol; current-=time)
{
for(uint h=0; h<handles.length(); h++)
{
for(uint x=0; x<handles[h].items.length(); x++)
{
if(@handles[h].items[x].handle==null)
continue;
if(handles[h].items[x].handle.playing==false)
continue;
handles[h].items[x].handle.volume = handles[h].items[x].handle.volume-time;
}
}
wait(5);
}
for(uint h=0; h<handles.length(); h++)
{
handles[h].destroy_all();
}
}
void pause_pools()
{
sound_pool@[] pools = {p, pool, alarmpool, ambpool, bulletpool, heartpool, objpool, muspool, bosspool, doorpool, carpool, gardpool, keypool, toypool};
    for(uint h = 0; h < pools.length(); h++)
    {
        for(uint i = 0; i < pools[h].items.length(); i++)
        {
            if(@pools[h].items[i].handle == null)
                continue;
            if(pools[h].items[i].handle.playing == false)
                continue;
            pools[h].pause_sound(i);
        }
    }
}
void resume_pools()
{
sound_pool@[] pools = {p, pool, alarmpool, ambpool, bulletpool, heartpool, objpool, muspool, bosspool, doorpool, carpool, gardpool, keypool, toypool};
    for(uint h = 0; h < pools.length(); h++)
    {
        for(uint i = 0; i < pools[h].items.length(); i++)
        {
            pools[h].resume_sound(i);
        }
    }
}
void play_toggle(bool setting)
{
dlgplay(setting ? "setenabled.ogg" : "setdisabled.ogg", false);
}
void restart()
{
if(SCRIPT_COMPILED)
{
bool success=run("tm.exe","",false,false);
if(!success)
{
alert("errorr", "Unable to restart tm.exe!");
}
}
else
{
bool success=run("c:\\nvgt\\nvgtw.exe","tm.nvgt",false,false);
if(!success)
{
alert("errorr", "Unable to restart tm.nvgt!");
}
}
exit();
}
void update_achievements()
{
    for (uint i = 0; i < achievements.length(); i++)
    {
        bool unlocked = false;
        while (achievements[i].check_progress())
        {
            unlocked = true;
        }
        if (unlocked)
        {
            string actionVerb = "";
            string unit = "";
            if (achievements[i].name == "Toys")
            {
                actionVerb = "collected a total of ";
                unit = "toys";
            }
            else if (achievements[i].name == "Keys")
            {
                actionVerb = "collected a total of ";
                unit = "keys";
            }
            else if (achievements[i].name == "Guards")
            {
                actionVerb = "killed a total of ";
                unit = "guards";
            }
            else if (achievements[i].name == "Cars")
            {
                actionVerb = "destroyed a total of ";
                unit = "cars";
            }
            else if (achievements[i].name == "Steps")
            {
                actionVerb = "taken a total of ";
                unit = "steps";
            }
            else if (achievements[i].name == "Playtime")
            {
                actionVerb = "played for a total of ";
                unit = "minutes";
            }
            string typeLabel = achievements[i].isSessionBased ? "Session " : "Lifetime ";
            string baseName = achievements[i].baseName;
            int value = achievements[i].get_value();
            string soundName = achievements[i].isSessionBased ? "session_achievement.ogg" : "life_achievement.ogg";
            if (achievements[i].currentTier >= achievements[i].thresholds.length())
            {
                if(play_ach_scores==true) achslot = pool.play_stationary(soundName, false);
                if(speak_ach_scores==true) speak("Amazing! You've completed all tiers of the " + typeLabel + baseName + " achievement! Press enter to continue.");
            }
            else
            {
                if(play_ach_scores==true) achslot = pool.play_stationary(soundName, false);
                if(speak_ach_scores==true) speak("Congratulations! You just unlocked Tier " + achievements[i].currentTier + " of the " + typeLabel + baseName + " achievement. You've " + actionVerb + value + " " + unit + ". Nice work!");
            }
        }
    }
}
