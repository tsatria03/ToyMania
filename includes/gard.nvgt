gard@[]gards(0);
class gard
{
bool fireable=true, moveable=true, moveable2=true;
    bool stunned;
int defsound, firesound, hurtsound, gardsound, spawnsound, stepsound, wepsound;
int gardhealth;
int gardx;
int gardy;
int damage;
int firetime;
int gardtime;
    int stundir;
string gardtype;
timer firetimer, gardtimer, stuntimer;
gard(int gx,int gy,int hp,int dm,int ft,int sp,string gt)
{
gardx=gx;
gardy=gy;
gardhealth=hp;
damage=dm;
firetime=ft;
gardtime=sp;
gardtype=gt;
gardsound=gardpool.play_2d(find_sound("sounds/"+soundpack+"/npc/guards/"+gardtype+"/*taunt*"), me.x, me.y, gardx, gardy, true);
}
}
void gardloop()
{
for(uint i=0; i<gards.length(); i++)
{
if(gards[i].gardtimer.elapsed>=gards[i].gardtime)
{
    if (gards[i].moveable || gards[i].moveable2)
    {
        gards[i].stepsound = gardpool.play_2d(find_sound("sounds/"+soundpack+"/npc/guards/"+gards[i].gardtype+"/*step*"), me.x, me.y, gards[i].gardx, gards[i].gardy, false);
    }
gardpool.update_sound_2d(gards[i].gardsound,gards[i].gardx,gards[i].gardy);
gards[i].gardtimer.restart();
if(gards[i].gardx<me.x and gards[i].moveable==true)
{
gards[i].gardx++;
}
if(gards[i].gardx>me.x and gards[i].moveable==true)
{
gards[i].gardx--;
}
if(gards[i].gardy<me.y and gards[i].moveable2==true)
{
gards[i].gardy++;
}
if(gards[i].gardy>me.y and gards[i].moveable2==true)
{
gards[i].gardy--;
}
}
if(me.x==gards[i].gardx and me.y==gards[i].gardy and gards[i].firetimer.elapsed>=gards[i].firetime and  gards[i].fireable==true and doormove == false)
{
gards[i].wepsound = gardpool.play_2d(find_sound("sounds/"+soundpack+"/npc/guards/"+gards[i].gardtype+"/*hit*"), me.x, me.y, gards[i].gardx, gards[i].gardy, false);
painslot=p.play_stationary(find_sound("sounds/"+soundpack+"/misc/player/*hurt*"), false);
health-=gards[i].damage;
gards[i].firetimer.restart();
    if (isReloading)
    {
        isReloading = false;
p.destroy_sound(weaponslot);
        weaponslot=p.play_stationary(find_sound("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*fail*"), false);
    }
}
if(gards[i].gardhealth<=0)
{
gardpool.destroy_sound(gards[i].hurtsound);
gardpool.destroy_sound(gards[i].gardsound);
gards[i].defsound=gardpool.play_2d(find_sound("sounds/"+soundpack+"/npc/guards/"+gards[i].gardtype+"/*death*"), me.x, me.y, gards[i].gardx, gards[i].gardy, false);
killed_gards+=1;
total_killed_gards+=1;
update_achievements();
writedata();
spawn_bodyfall(gards[i].gardx, gards[i].gardy, random(500,1000), find_sound("sounds/"+soundpack+"/npc/guards/"+gards[i].gardtype+"/*fall*"));
gards.remove_at(i);
return;
}
}
}
void spawn_gard(int x,int y,int hp,int dm,int firetime,int gardtime,string gardtype)
{
gard g1(x,y,hp,dm,firetime,gardtime,gardtype);
gards.insert_last(g1);
}
void destroy_all_gards()
{
for(uint i=0; i<gards.length(); i++)
{
gardpool.destroy_sound(gards[i].gardsound);
}
gards.resize(0);
}
