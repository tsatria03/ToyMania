gard@[]gards(0);
class gard
{
bool fireable=true, moveable=true, moveable2=true;
    bool stunned;
int defsound, firesound, hurtsound, gardsound, stepsound, wepsound;
int gardhealth;
int gardx;
int gardy;
int damage;
int firetime;
int gardtime;
    int stundir;
string gardtype;
timer firetimer, gardtimer, stuntimer;
gard(int gx,int gy,int hp,int dm,int ft,int sp,string gt)
{
gardx=gx;
gardy=gy;
gardhealth=hp;
damage=dm;
firetime=ft;
gardtime=sp;
gardtype=gt;
gardsound=gardpool.play_2d(get_sound("npc/guards/"+gardtype+"/*taunt*"), me.x, me.y, gardx, gardy, true);
}
}
void gardloop()
{
for(uint i=0; i<gards.length(); i++)
{
if(gards[i].gardtimer.elapsed>=gards[i].gardtime)
{
    if (gards[i].moveable || gards[i].moveable2)
    {
        gards[i].stepsound = gardpool.play_2d(get_sound("npc/guards/"+gards[i].gardtype+"/*step*"), me.x, me.y, gards[i].gardx, gards[i].gardy, false);
    }
gardpool.update_sound_2d(gards[i].gardsound,gards[i].gardx,gards[i].gardy);
gards[i].gardtimer.restart();
if(gards[i].gardx<me.x and gards[i].moveable==true)
{
gards[i].gardx++;
}
if(gards[i].gardx>me.x and gards[i].moveable==true)
{
gards[i].gardx--;
}
if(gards[i].gardy<me.y and gards[i].moveable2==true)
{
gards[i].gardy++;
}
if(gards[i].gardy>me.y and gards[i].moveable2==true)
{
gards[i].gardy--;
}
}
if(me.x==gards[i].gardx and me.y==gards[i].gardy and gards[i].firetimer.elapsed>=gards[i].firetime and  gards[i].fireable==true and doormove == false)
{
gards[i].wepsound = gardpool.play_2d(get_sound("npc/guards/"+gards[i].gardtype+"/*hit*"), me.x, me.y, gards[i].gardx, gards[i].gardy, false);
painslot=p.play_stationary(get_sound("misc/player/*hurt*"), false);
health-=gards[i].damage;
gards[i].firetimer.restart();
    if (isReloading)
    {
        isReloading = false;
p.destroy_sound(weaponslot);
        weaponslot=p.play_stationary(get_sound("equipments/weapons/"+weapontype+"/"+weapontype2+"/*fail*"), false);
    }
}
if(gards[i].gardhealth<=0)
{
gardpool.destroy_sound(gards[i].hurtsound);
gardpool.destroy_sound(gards[i].gardsound);
gards[i].defsound=gardpool.play_2d(get_sound("npc/guards/"+gards[i].gardtype+"/*death*"), me.x, me.y, gards[i].gardx, gards[i].gardy, false);
killed_gards+=1;
total_killed_gards+=1;
update_achievements();
writedata();
spawn_bodyfall(gards[i].gardx, gards[i].gardy, random(500,1000), get_sound("npc/guards/"+gards[i].gardtype+"/*fall*"));
gards.remove_at(i);
return;
}
}
}
void spawn_gard(int x,int y,int hp,int dm,int firetime,int gardtime,string gardtype)
{
gard g1(x,y,hp,dm,firetime,gardtime,gardtype);
gards.insert_last(g1);
}
void destroy_all_gards()
{
for(uint i=0; i<gards.length(); i++)
{
gardpool.destroy_sound(gards[i].gardsound);
}
gards.resize(0);
}

theif@[] theifs(0);
class theif
{
bool moveable = true;
bool moveable2 = true;
bool stunned = false;
int defsound, hurtsound, landsound, stealsound, theifsound, stepsound;
int theifx;
int theify;
int theifhealth;
int theiftime;
int target = -1;
int stundir;
string theiftype;
timer theiftimer;
timer stuntimer;
theif(int thx, int thy, int hp, int sp, string tht)
{
theifx = thx;
theify = thy;
theifhealth = hp;
theiftime = sp;
theiftype = tht;
if(!paused) landsound = theifpool.play_2d(get_sound("npc/theifs/" + theiftype + "/*land*"), me.x, me.y, theifx, theify, false);
if(!paused) theifsound = theifpool.play_2d(get_sound("npc/theifs/" + theiftype + "/*taunt*"), me.x, me.y, theifx, theify, true);
}
};
void theifloop()
{
for (uint i = 0; i < theifs.length(); i++)
{
theif@ t = theifs[i];
if (t.theifhealth <= 0)
{
theifpool.destroy_sound(t.hurtsound);
theifpool.destroy_sound(t.theifsound);
if(!paused) t.defsound = theifpool.play_2d(get_sound("npc/theifs/" + t.theiftype + "/*death*"), me.x, me.y, t.theifx, t.theify, false);
spawn_bodyfall(t.theifx, t.theify, random(500, 1000), get_sound("npc/theifs/" + t.theiftype + "/*fall*"));
theifs.remove_at(i);
return;
}
if (t.theiftimer.elapsed >= t.theiftime)
{
t.theiftimer.restart();
if (t.target == -1 && toys.length() > 0)
{
t.target = random(0, toys.length() - 1);
}
if (t.target >= 0 && t.target < int(toys.length()))
{
int tx = toys[t.target].tx;
int ty = toys[t.target].ty;
if (t.moveable || t.moveable2)
{
if(!paused) t.stepsound = theifpool.play_2d(get_sound("npc/theifs/" + t.theiftype + "/*step*"), me.x, me.y, t.theifx, t.theify, false);
}
theifpool.update_sound_2d(t.theifsound, t.theifx, t.theify);
if (t.theifx < tx && t.moveable && !paused) t.theifx++;
if (t.theifx > tx && t.moveable && !paused) t.theifx--;
if (t.theify < ty && t.moveable2 && !paused) t.theify++;
if (t.theify > ty && t.moveable2 && !paused) t.theify--;
if (t.theifx == tx && t.theify == ty && !paused)
{
if(!paused) t.stealsound = theifpool.play_2d(get_sound("npc/theifs/" + t.theiftype + "/*steal*"), me.x, me.y, t.theifx, t.theify, false);
toypool.destroy_sound(toys[t.target].toysound);
toys.remove_at(t.target);
stolen_toys++;
theifpool.destroy_sound(t.theifsound);
theifs.remove_at(i);
if (stolen_toys >= total_toy_stock)
{
store_defense=false;
theifspawn=false;
    toyspawn = false;
clear_inv();
destroy_all_theifs();
    destroy_all_toys();
dlgmessage_return("Game over. The enemies managed to steal "+stolen_toys+"toys. You managed to save x number of toys from being stolen.");
setupmenu(false);
m.add_item("Yes", "yes");
m.add_item("No", "no");
m.intro_text = "Would you like to play the current game mode again?";
int res = m.run();
string choice = m.get_selected_item_id();
if (res != -1 && choice == "yes")
{
if (speak_menu_loading)
{
string difficulty_name =(gamemod == 1) ? "Easy" :(gamemod == 2) ? "Medium" :(gamemod == 3) ? "Hard" :(gamemod == 4) ? "Insane" :(gamemod == 5) ? "Chaos" :"unknown";
speak("loading " + difficulty_name);
}
    dlgplay(get_sound("misc/game/*launch*"));
stolen_toys = 0;
gametimer.restart();
clear_inv();
me.x=25;
me.y=25;
maxx=50;
maxy=50;
store_defense=true;
theifspawn=true;
toyspawn=true;
reset_weapons();
toygame2();
}
mainmenu();
}
return;
}
}
}
}
}
void spawn_theif(int x, int y, int hp, int theiftime, string theiftype)
{
theif th(x, y, hp, theiftime, theiftype);
theifs.insert_last(th);
}
void destroy_all_theifs()
{
for (uint i = 0; i < theifs.length(); i++)
{
theifpool.destroy_sound(theifs[i].theifsound);
}
theifs.resize(0);
}
