void mainmenu()
{
setupmenu();
m.add_item("game menu", "gm");
m.add_item("settings menu", "sm");
m.add_item("speaker test menu", "st");
m.add_item("check for game updates", "chup");
if(system_is_windows) m.add_item("restart game", "rt");
m.add_item("exit game", "ex");
m.intro_text = "Main menu. Please choose an option with your arrow keys, then press enter to activate one.";
int mres=m.run();
string main = m.get_selected_item_id();
if(mres==-1)
{
speak("exiting");
m.fade_music();
exit();
}
if (main == "gm")
{
gamemenu();
}
if (main == "sm")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
preffsmenu();
}
if(main == "st")
{
    setupmenu(false);
m.add_item("eight bit. This sound has been played a total of "+bitplays+" times.", "bit");
m.add_item("crash car. This sound has been played a total of "+crashplays+" times.", "crash");
    m.add_item("Sword Clank. This sound has been played a total of "+swordplays+" times.", "clank");
    m.add_item("Stone Throw. This sound has been played a total of "+stoneplays+" times.", "stone");
    m.add_item("Back", "back");
m.intro_text = "Speaker test menu. Choose a sound to test your audio setup. For the most accurate results, please use headphones. Please also make sure to check if they are worn correctly.";
    int mres = m.run();
    string soundsel = m.get_selected_item_id();
    if (mres == -1 or soundsel == "back")
{
        mainmenu();
    }
    if (soundsel == "bit")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
bitplays+=1;
writepreffs();
        dlgplay("speaker_8bit.ogg");
    }
    if (soundsel == "crash")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
crashplays+=1;
writepreffs();
        dlgplay("speaker_crash_car.ogg");
    }
    if (soundsel == "clank")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
swordplays+=1;
writepreffs();
        dlgplay("speaker_sword_clank.ogg");
    }
    if (soundsel == "stone")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
stoneplays+=1;
writepreffs();
        dlgplay("speaker_stone_throw.ogg");
    }
if(completesound==true) dlgplay("complete.ogg", false);
dlgmessage_return("Speaker test complete.");
    mainmenu();
}
if (main == "chup")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
check_for_updates(version, "ToyMania", true);
}
if (main == "rt")
{
speak("restarting");
m.fade_music();
restart("tm.exe");
}
if (main == "ex")
{
speak("exiting");
m.fade_music();
exit();
}
}
void docksmenu()
{
setupmenu();
m.add_item("changelog", "changelog");
m.add_item("credits", "credits");
m.add_item("readme", "readme");
m.add_item("todo_list", "todo_list");
m.add_item("back", "back");
m.intro_text = "User guides menu. You can access help guides and other resources explaining how the game works here.";
int mres=m.run();
string dnm=m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
if(dnm=="changelog")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
dockread("docks/changelog.txt");
}
if(dnm=="credits")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
dockread("docks/credits.txt");
}
if(dnm=="readme")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
dockread("docks/readme.txt");
}
if(dnm=="todo_list")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
dockread("docks/todo_list.txt");
}
if(dnm=="back")
{
gamemenu();
}
}
void gamemenu()
{
setupmenu();
m.add_item("start game", "ty");
m.add_item("learn game sounds", "gsm");
m.add_item("read game user guides", "dm");
m.add_item("view game achievements", "ach");
m.add_item("view game statistics", "stats");
m.add_item("Clear game progresses.", "cgr");
if(statscopy==true) m.add_item("Copy all game progresses to clipboard", "cys");
if(statscopy==true) m.add_item("Export all game progresses to file", "cys2");
m.add_item("back", "back");
m.intro_text = "Game menu. You can start a new game session, learn about important sounds, view achievements, or check your stats here.";
int mres=m.run();
string gamem = m.get_selected_item_id();
if(mres==-1)
{
mainmenu();
}
if (gamem == "ty")
{
    setupmenu(false);
m.add_item("Normal. This is a timed driven mode where you must collect items, survive hazards, and defeat the boss before the store explodes. There is one unlockable door that you must find to win.", "normal");
m.add_item("Endless. This mode lets you play for as long as you can survive. The game will get harder over time with no final boss, and just one unlockable door to win. This mode will also include ammo packs and health potions that drop from time to time for use durring intense guard fights.", "endless");
    m.add_item("Back", "back");
    m.intro_text = "Choose how you want to play the game.";
    int gres = m.run();
    string mode = m.get_selected_item_id();
    if (mode == "back" or gres == -1)
    {
        gamemenu();
    }
    endless = (mode == "endless");
    if (speak_menu_loading) speak(endless ? "loading endless mode" : "loading normal mode");
    m.fade_music();
    dlgplay("gamelaunch.ogg");
    level = 1;
money = 0;
    collected_toys = 0;
    collected_keys = 0;
    killed_gards = 0;
    destroyed_cars = 0;
    moved_steps = 0;
    session_playtime = 0;
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
            achievements[i].currentTier = 0;
    }
    gametimer.restart();
    health = endless ? 10000 : 1000;
maxhealth = endless ? 10000 : 1000;
    storehealth = endless ? 10000 : 1000;
storemaxhealth = endless ? 10000 : 1000;
if(endless) clear_inv();
destroy_all_healzones();
destroy_all_doors();
    me.x = 25;
    me.y = 25;
toynum=20;
alarm_started = false;
countdown_started = false;
small_storedest = false;
medium_storedest = false;
    bossdefeated = false;
    bossespawn = false;
    carspawn = false;
cardest=false;
    gardspawn = false;
    keydest = false;
    keyspawn = false;
    objdest = false;
    objspawn = false;
    toydest = false;
    toyspawn = true;
    toygame();
}
if (gamem == "gsm")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
learnsoundsmenu();
}
if (gamem == "dm")
{
docksmenu();
}
if (gamem == "ach")
{
achesmenu();
}
if (gamem == "stats")
{
statsmenu();
}
if (gamem == "cgr")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
m.intro_text="Are you sure you want to reset all of your game progresses?";
int mres=m.run();
string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
        gamemenu();
    }
if(confirm=="yes")
{
if(file_exists(DIRECTORY_APPDATA+"tsatria03/ToyMania/saves/game.tmg")) file_delete(DIRECTORY_APPDATA+"tsatria03/ToyMania/saves/game.tmg");
resetgame();
writedata();
if(completesound==true) dlgplay("complete.ogg", false);
dlgmessage_return("Game progresses cleared.");
gamemenu();
}
}
if (gamem == "cys")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    string result = "";
    result += "Session Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
        {
            result += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    result += "\r\nLifetime Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (!achievements[i].isSessionBased)
        {
            result += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    result += "\r\n";
    int session_minutes = int(session_playtime / 60000);
    int session_seconds = int((session_playtime % 60000) / 1000);
    result += "Session Stats:\r\n";
    result += "- Toys collected: " + collected_toys + "\r\n";
    result += "- Keys collected: " + collected_keys + "\r\n";
    result += "- Guards killed: " + killed_gards + "\r\n";
    result += "- Cars destroyed: " + destroyed_cars + "\r\n";
    result += "- Steps taken: " + moved_steps + "\r\n";
    result += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
    int total_minutes = int(total_playtime / 60000);
    int total_seconds = int((total_playtime % 60000) / 1000);
    result += "Lifetime Stats:\r\n";
    result += "- Last Played Date: " + last_played_date + "\r\n";
    result += "- Last Played Time: " + last_played_time + "\r\n";
    result += "- Toys collected: " + total_collected_toys + "\r\n";
    result += "- Keys collected: " + total_collected_keys + "\r\n";
    result += "- Guards killed: " + total_killed_gards + "\r\n";
    result += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
    result += "- Steps taken: " + total_moved_steps + "\r\n";
    result += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n";
    clipboard_copy_text(result);
if(copexpsounds==true) dlgplay("gamecopy.ogg" ,false);
    dlgmessage_return("All game progresses have been copied to your clipboard.");
    gamemenu();
}
if (gamem == "cys2")
{
if (speak_menu_loading) speak("loading");
m.fade_music();
gamfile.open(DIRECTORY_APPDATA+"tsatria03/ToyMania/stats/player_progresses.txt", "w");
string result = "";
result += "Session Achievements:\r\n";
for (uint i = 0; i < achievements.length(); i++)
{
if (achievements[i].isSessionBased)
result += "- " + achievements[i].get_progress_status() + "\r\n";
}
result += "\r\nLifetime Achievements:\r\n";
for (uint i = 0; i < achievements.length(); i++)
{
if (!achievements[i].isSessionBased)
result += "- " + achievements[i].get_progress_status() + "\r\n";
}
result += "\r\n";
int session_minutes = int(session_playtime / 60000);
int session_seconds = int((session_playtime % 60000) / 1000);
result += "Session Stats:\r\n";
result += "- Toys collected: " + collected_toys + "\r\n";
result += "- Keys collected: " + collected_keys + "\r\n";
result += "- Guards killed: " + killed_gards + "\r\n";
result += "- Cars destroyed: " + destroyed_cars + "\r\n";
result += "- Steps taken: " + moved_steps + "\r\n";
result += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
int total_minutes = int(total_playtime / 60000);
int total_seconds = int((total_playtime % 60000) / 1000);
result += "Lifetime Stats:\r\n";
result += "- Last Played Date: " + last_played_date + "\r\n";
result += "- Last Played Time: " + last_played_time + "\r\n";
result += "- Toys collected: " + total_collected_toys + "\r\n";
result += "- Keys collected: " + total_collected_keys + "\r\n";
result += "- Guards killed: " + total_killed_gards + "\r\n";
result += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
result += "- Steps taken: " + total_moved_steps + "\r\n";
result += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n";
gamfile.write(result);
gamfile.close();
if(copexpsounds==true) dlgplay("gamexport.ogg",false);
dlgmessage_return("All game progresses have been exported to stats/player_progresses.txt.");
gamemenu();
}
if (gamem == "back")
{
mainmenu();
}
}
void learnsoundsmenu()
{
dictionary learnCategories;
string vdesc = variant_descriptions ? ". This sound has multiple variants." : "";
dictionary boss;
boss["Death"] = "bossdeath.ogg";
boss["Fall" + vdesc] = array<string> = {"bossfall1.wav", "bossfall2.wav"};
boss["Heal" + vdesc] = array<string> = {"bossheal1.ogg", "bossheal2.ogg", "bossheal3.ogg"};
boss["Hit" + vdesc] = array<string> = {"bosshit1.ogg", "bosshit2.ogg"};
boss["Launch"] = "bosslaunch.ogg";
boss["Pain"] = "bosspain.ogg";
boss["Taunt"] = "bosstaunt.ogg";
boss["Teleport" + vdesc] = array<string> = {"bosstel1.ogg", "bosstel2.ogg"};
boss["Walk" + vdesc] = array<string> = {"bosswalk1.ogg", "bosswalk2.ogg", "bosswalk3.ogg", "bosswalk4.ogg"};
learnCategories["Boss"] = boss;
dictionary cars;
cars["Car 1 Death"] = "car1death.ogg";
cars["Car 1 Loop"] = "car1loop.ogg";
cars["Car 1 Pain"] = "car1pain.ogg";
cars["Car 1 Shoot"] = "car1shoot.ogg";
cars["Car 2 Death"] = "car2death.ogg";
cars["Car 2 Loop"] = "car2loop.ogg";
cars["Car 2 Pain"] = "car2pain.ogg";
cars["Car 2 Shoot"] = "car2shoot.ogg";
cars["Car 3 Death"] = "car3death.ogg";
cars["Car 3 Loop"] = "car3loop.ogg";
cars["Car 3 Pain"] = "car3pain.ogg";
cars["Car 3 Shoot"] = "car3shoot.ogg";
learnCategories["Cars"] = cars;
dictionary doors;
doors["Close"] = "doorclose.ogg";
doors["Jam"] = "doorjam.ogg";
doors["Lock" + vdesc] = array<string> = {"doorlock1.ogg", "doorlock2.ogg"};
doors["Loop"] = "doorloop.ogg";
doors["Move"] = "doormove.ogg";
doors["Open"] = "dooropen.ogg";
learnCategories["Doors"] = doors;
dictionary guards;
guards["Guard 1 Death" + vdesc] = array<string> = {"gard1death1.ogg", "gard1death2.ogg"};
guards["Guard 1 Fall" + vdesc] = array<string> = {"gard1fall1.wav", "gard1fall2.wav", "gard1fall3.wav", "gard1fall4.wav", "gard1fall5.wav"};
guards["Guard 1 Hit" + vdesc] = array<string> = {"gard1hit1.ogg", "gard1hit2.ogg", "gard1hit3.ogg"};
guards["Guard 1 Pain" + vdesc] = array<string> = {"gard1pain1.ogg", "gard1pain2.ogg", "gard1pain3.ogg", "gard1pain4.ogg", "gard1pain5.ogg"};
guards["Guard 1 Taunt"] = "gard1taunt.ogg";
guards["Guard 1 Walk" + vdesc] = array<string> = {"gard1walk1.ogg", "gard1walk2.ogg", "gard1walk3.ogg", "gard1walk4.ogg", "gard1walk5.ogg"};
guards["Guard 2 Death"] = "gard2death.ogg";
guards["Guard 2 Fall" + vdesc] = array<string> = {"gard2fall1.wav", "gard2fall2.wav"};
guards["Guard 2 Hit" + vdesc] = array<string> = {"gard2hit1.ogg", "gard2hit2.ogg", "gard2hit3.ogg"};
guards["Guard 2 Pain"] = "gard2pain.ogg";
guards["Guard 2 Taunt"] = "gard2taunt.ogg";
guards["Guard 2 Walk" + vdesc] = array<string> = {"gard2walk1.ogg", "gard2walk2.ogg", "gard2walk3.ogg", "gard2walk4.ogg", "gard2walk5.ogg", "gard2walk6.ogg", "gard2walk7.ogg", "gard2walk8.ogg"};
guards["Guard 3 Death"] = "gard3death.wav";
guards["Guard 3 Fall" + vdesc] = array<string> = {"gard3fall1.wav", "gard3fall2.wav"};
guards["Guard 3 Hit"] = "gard3hit.wav";
guards["Guard 3 Pain"] = "gard3pain.wav";
guards["Guard 3 Taunt"] = "gard3taunt.wav";
guards["Guard 3 Walk" + vdesc] = array<string> = {"gard3walk1.wav", "gard3walk2.wav", "gard3walk3.wav", "gard3walk4.wav", "gard3walk5.wav"};
learnCategories["Guards"] = guards;
dictionary items;
items["Ammo_pack loop: used in endless mode"] = "ammoloop.ogg";
items["Cycle inventory: used in endless mode" + vdesc] = array<string> = {"invcycle1.ogg", "invcycle2.ogg", "invcycle3.ogg", "invcycle4.ogg", "invcycle5.ogg", "invcycle6.ogg"};
items["Drink potion: used in endless mode"] = "healthdrink.ogg";
items["Get ammo_pack: used in endless mode" + vdesc] = array<string> = {"ammoget1.ogg", "ammoget2.ogg"};
items["Get money: used in endless mode"] = "getdollars.ogg";
items["Get potion: used in endless mode"] = "healthget.ogg";
items["Item break: used in endless mode" + vdesc] = array<string> = {"itembreak1.ogg", "itembreak2.ogg", "itembreak3.ogg", "itembreak4.ogg", "itembreak5.ogg", "itembreak6.ogg"};
items["Item spawn: used in endless mode"] = "itemspawn.ogg";
items["Potion loop: used in endless mode"] = "healthloop.ogg";
items["Open ammo_pack: used in endless mode"] = "ammopack.ogg";
learnCategories["Items"] = items;
dictionary keys;
keys["Break" + vdesc] = array<string> = {"keybreak1.ogg", "keybreak2.ogg", "keybreak3.ogg", "keybreak4.ogg", "keybreak5.ogg", "keybreak6.ogg"};
keys["Get" + vdesc] = array<string> = {"keyget1.ogg", "keyget2.ogg", "keyget3.ogg", "keyget4.ogg", "keyget5.ogg", "keyget6.ogg"};
keys["Loop" + vdesc] = array<string> = {"keyloop1.ogg", "keyloop2.ogg", "keyloop3.ogg", "keyloop4.ogg"};
keys["Spawn" + vdesc] = array<string> = {"keyspawn1.ogg", "keyspawn2.ogg", "keyspawn3.ogg", "keyspawn4.ogg", "keyspawn5.ogg", "keyspawn6.ogg", "keyspawn7.ogg", "keyspawn8.ogg"};
keys["Use" + vdesc] = array<string> = {"keyuse1.ogg", "keyuse2.ogg", "keyuse3.ogg", "keyuse4.ogg", "keyuse5.ogg", "keyuse6.ogg"};
learnCategories["Keys"] = keys;
dictionary player;
player["Alarm: used in normal mode"] = "gamealarm.ogg";
player["Alert medium: used in normal mode"] = "storealert_medium.ogg";
player["Alert small: used in normal mode"] = "storealert_small.ogg";
player["Countdown: used in normal mode"] = "gamecount.ogg";
player["Death"] = "playerdeath.ogg";
player["Explode large: used in normal mode"] = "storedest_large.ogg";
player["Explode medium: used in normal mode"] = "storedest_medium.ogg";
player["Explode small: used in normal mode"] = "storedest_small.ogg";
player["Give item: used in endless mode"] = "playergive.ogg";
player["Glass fall: used in normal mode"] = "glassfall.ogg";
player["Glass land: used in normal mode"] = "glassland.ogg";
player["Glass walk: used in normal mode" + vdesc] = array<string> = {"glasswalk1.ogg", "glasswalk2.ogg", "glasswalk3.ogg", "glasswalk4.ogg", "glasswalk5.ogg"};
player["Heart start"] = "heartstart.ogg";
player["Heart stop"] = "heartstop.ogg";
player["Heal: used in endless mode" + vdesc] = array<string> = {"playerheal1.ogg", "playerheal2.ogg", "playerheal3.ogg"};
player["Launch"] = "gamelaunch.ogg";
player["Level up"] = "playerlevel.ogg";
player["Life achievement"] = "life_achievement.ogg";
player["Marble fall"] = "marblefall.ogg";
player["Marble land"] = "marbleland.ogg";
player["Marble walk" + vdesc] = array<string> = {"marblewalk1.ogg", "marblewalk2.ogg", "marblewalk3.ogg", "marblewalk4.ogg", "marblewalk5.ogg"};
player["Pain"] = "playerpain.ogg";
player["Store purchase: used in endless mode" + vdesc] = array<string> = {"storebuy1.ogg", "storebuy2.ogg", "storebuy3.ogg", "storebuy4.ogg"};
player["Session achievement"] = "session_achievement.ogg";
player["Teleport: unused"] = "playertel.ogg";
learnCategories["Player"] = player;
dictionary toys;
toys["Break" + vdesc] = array<string> = {"toybreak1.ogg", "toybreak2.ogg", "toybreak3.ogg"};
toys["Get" + vdesc] = array<string> = {"toyget1.ogg", "toyget2.ogg"};
string[] toyloop;
for (int i = 1; i <= 40; i++) toyloop.insert_last("toyloop" + i + ".ogg");
toys["Loop" + vdesc] = toyloop;
learnCategories["Toys"] = toys;
dictionary ui;
ui["Complete: used in speaker tests and various other menus"] = "complete.ogg";
ui["Dialog close"] = "dlgclose.ogg";
ui["Dialog copy"] = "dlgcoppy.ogg";
ui["Dialog open"] = "dlgopen.ogg";
ui["Dialog scrol"] = "dlgscroll.ogg";
ui["Disable Setting"] = "setdisabled.ogg";
ui["Enable Setting"] = "setenabled.ogg";
ui["Menu click"] = "menuclick.ogg";
ui["Menu close"] = "menuclose.ogg";
ui["Menu edge"] = "menuedge.ogg";
ui["Menu enter"] = "menuenter.ogg";
ui["Menu open"] = "menuopen.ogg";
ui["Menu wrap"] = "menuwrap.ogg";
ui["Pause Game"] = "pause.ogg";
ui["Resume Game"] = "resume.ogg";
ui["Stats copy"] = "gamecopy.ogg";
ui["Stats export"] = "gamexport.ogg";
learnCategories["UI"] = ui;
dictionary weapons;
weapons["Bat Draw"] = "batdraw.ogg";
weapons["Bat Fire" + vdesc] = array<string> = {"batfire1.ogg", "batfire2.ogg", "batfire3.ogg"};
weapons["Bat Hit" + vdesc] = array<string> = {"bathit1.ogg", "bathit2.ogg", "bathit3.ogg"};
weapons["Boot Draw"] = "bootdraw.ogg";
weapons["Boot Fire" + vdesc] = array<string> = {"bootfire1.ogg", "bootfire2.ogg", "bootfire3.ogg"};
weapons["Boot Hit" + vdesc] = array<string> = {"boothit1.ogg", "boothit2.ogg", "boothit3.ogg"};
weapons["Club Draw"] = "clubdraw.ogg";
weapons["Club Fire" + vdesc] = array<string> = {"clubfire1.ogg", "clubfire2.ogg", "clubfire3.ogg"};
weapons["Club Hit" + vdesc] = array<string> = {"clubhit1.ogg", "clubhit2.ogg", "clubhit3.ogg"};
weapons["Dart tube fire: unused" + vdesc] = array<string> = {"dartblow1.wav", "dartblow2.wav", "dartblow3.wav"};
weapons["Dart tube hit: unused" + vdesc] = array<string> = {"darthit1.wav", "darthit2.wav", "darthit3.wav"};
weapons["Feat Draw"] = "featdraw.ogg";
weapons["Feat Fire" + vdesc] = array<string> = {"featfire1.ogg", "featfire2.ogg", "featfire3.ogg"};
weapons["Feat Hit" + vdesc] = array<string> = {"feathit1.ogg", "feathit2.ogg", "feathit3.ogg"};
weapons["Fist Draw"] = "fistdraw.ogg";
weapons["Fist Fire" + vdesc] = array<string> = {"fistfire1.ogg", "fistfire2.ogg"};
weapons["Fist Hit" + vdesc] = array<string> = {"fisthit1.ogg", "fisthit2.ogg", "fisthit3.ogg"};
weapons["Hammer Draw"] = "hammerdraw.ogg";
weapons["Hammer Fire" + vdesc] = array<string> = {"hammerfire1.ogg", "hammerfire2.ogg", "hammerfire3.ogg"};
weapons["Hammer Hit" + vdesc] = array<string> = {"hammerhit1.ogg", "hammerhit2.ogg", "hammerhit3.ogg"};
weapons["Knife Draw"] = "knifedraw.ogg";
weapons["Knife Fire" + vdesc] = array<string> = {"knifefire1.ogg", "knifefire2.ogg", "knifefire3.ogg"};
weapons["Knife Hit" + vdesc] = array<string> = {"knifehit1.ogg", "knifehit2.ogg", "knifehit3.ogg"};
weapons["Laser Draw"] = "laserdraw.ogg";
weapons["Laser Fire"] = "laserfire.ogg";
weapons["Laser Hit"] = "laserhit.ogg";
weapons["Machine Gun Draw: used in endless mode"] = "machinegundraw.ogg";
weapons["Machine Gun Empty: used in endless mode"] = "machinegunempty.ogg";
weapons["Machine Gun Fail: used in endless mode"] = "machinegunfail.ogg";
weapons["Machine Gun Fire: used in endless mode"] = "machinegunfire.ogg";
weapons["Machine Gun Hit: used in endless mode"] = "machinegunhit.ogg";
weapons["Machine Gun Ping: used in endless mode"] = "machinegunping.ogg";
weapons["Machine Gun Reload: used in endless mode"] = "machinegunreload.ogg";
weapons["Machine Gun Shell: used in endless mode" + vdesc] = array<string> = {"machinegunshell1.ogg", "machinegunshell2.ogg"};
weapons["Pistol Draw: used in endless mode"] = "pistoldraw.ogg";
weapons["Pistol Empty: used in endless mode"] = "pistolempty.ogg";
weapons["Pistol Fail: used in endless mode"] = "pistolfail.ogg";
weapons["Pistol Fire: used in endless mode"] = "pistolfire.ogg";
weapons["Pistol Hit: used in endless mode"] = "pistolhit.ogg";
weapons["Pistol Ping: used in endless mode"] = "pistolping.ogg";
weapons["Pistol Reload: used in endless mode"] = "pistolreload.ogg";
weapons["Pistol Shell: used in endless mode" + vdesc] = array<string> = {"pistolshell1.ogg", "pistolshell2.ogg"};
learnCategories["Weapons"] = weapons;
string[] sortedKeys = learnCategories.get_keys();
sortedKeys.sort_ascending();
setupmenu(false);
m.intro_text = "Learn game sounds menu. You can preview the most important sounds used by the game here. This menu is organized by sound category for easier viewing.";
for (uint i = 0; i < sortedKeys.length(); i++)
{
string key = sortedKeys[i];
dictionary@ cat = cast<dictionary@>(learnCategories[key]);
if (cat is null) continue;
uint count = 0;
array<string> subkeys = cat.get_keys();
for (uint j = 0; j < subkeys.length(); j++)
{
if (cat.exists(subkeys[j]))
{
    string[]@ arr = cast<string[]@>(cat[subkeys[j]]);
    if (arr !is null)
    {
        count += arr.length();
    }
    else
    {
        string dummy;
        if (cat.get(subkeys[j], dummy))
            count += 1;
    }
}
}
m.add_item(key + ": This category has a total of " + count + " sound" + (count == 1 ? "" : "s"), key);
}
m.add_item("Back", "back");
int res = m.run();
string sel = m.get_selected_item_id();
if (res == -1 or sel == "back")
{
gamemenu();
}
if (learnCategories.exists(sel))
{
m.intro_text = sel + " menu. Press the up or down arrow keys to navigate the list, and enter to play one.";
learn_game_sounds_menu(cast<dictionary@>(learnCategories[sel]), "", m);
}
}
void pausemenu()
{
    setupmenu(false);
        m.add_item("Copy level and game mode to clipboard", "clg");
        m.add_item("Read current game session statistics", "rs");
        m.add_item("Quit game", "qmg");
        m.add_item("Resume game", "rmg");
m.add_item("view detailed stats", "vds");
    m.intro_text = "Pause menu.";
    int mres = m.run();
    string psmem = m.get_selected_item_id();
if (mres == -1)
{
    temp.play_stationary("resume.ogg", false);
    resume_game();
    return;
}
        if (psmem == "clg")
{
            string mode = endless ? "Endless" : "Normal";
            string info = "Current Level: " + level + "\r\nGame Mode: " + mode;
            clipboard_copy_text(info);
            if (copexpsounds==true) dlgplay("gamecopy.ogg", false);
            dlgmessage_return("Your current level and game mode has been copied to the clipboard.");
            pausemenu();
return;
        }
        if (psmem == "rs")
{
            string statsummary = "";
            statsummary += "Session Stats:\r\n";
            statsummary += "- Toys collected: " + collected_toys + "\r\n";
            statsummary += "- Keys collected: " + collected_keys + "\r\n";
            statsummary += "- Guards killed: " + killed_gards + "\r\n";
            statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
            statsummary += "- Steps taken: " + moved_steps + "\r\n";
int session_minutes = int(timeelapsed.ms() / 60000);
int session_seconds = int((timeelapsed.ms() % 60000) / 1000);
            statsummary += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds\r\n";
            dlgmessage_return(statsummary);
if (gamcopy == true)
{
    setupmenu(false);
    m.add_item("Copy results to clipboard", "copy");
    m.add_item("Export results to file", "export");
    m.add_item("Return to main menu.", "cancel");
    m.intro_text = "What would you like to do with the current results for this game session?";
    int r = m.run();
    string resp = m.get_selected_item_id();
    if (r != -1)
    {
        if (resp == "copy")
        {
            clipboard_copy_text(statsummary);
            if (copexpsounds == true) dlgplay("gamecopy.ogg", false);
            dlgmessage_return("All game session results copied to your clipboard.");
        }
        else if (resp == "export")
        {
            poastfile.open(DIRECTORY_APPDATA+"tsatria03/ToyMania/stats/player_posts.txt", "w");
            poastfile.write(statsummary);
            poastfile.close();
            if (copexpsounds == true) dlgplay("gamexport.ogg", false);
            dlgmessage_return("All game session results exported to stats/player_posts.txt.");
        }
    }
}
            pausemenu();
return;
        }
        if (psmem == "qmg")
{
            if (quit_menu==true)
{
                setupmenu(false);
                m.add_item("Yes", "yes");
                m.add_item("No", "no");
                m.intro_text = "Are you sure you want to quit the game? You will lose all progress for this current game session.";
                int confirmres = m.run();
                string confirm = m.get_selected_item_id();
                if (confirmres == -1 || confirm == "no")
{
                    pausemenu();
return;
                }
            }
            resume_game();
            fade_multi_pool();
            level = 1;
            money = 0;
collected_toys = 0;
            collected_keys = 0;
            killed_gards = 0;
            destroyed_cars = 0;
            moved_steps = 0;
            session_playtime = 0;
            for (uint i = 0; i < achievements.length(); i++)
{
                if (achievements[i].isSessionBased)
                    achievements[i].currentTier = 0;
            }
            if (endless) clear_inv();
            if (!endless) destroy_all_bosses();
destroy_all_healzones();
destroy_all_bullets();
            destroy_all_cars();
            destroy_all_gards();
            destroy_all_doors();
            destroy_all_keys();
            destroy_all_toys();
            gametimer.restart();
    health = endless ? 10000 : 1000;
maxhealth = endless ? 10000 : 1000;
    storehealth = endless ? 10000 : 1000;
storemaxhealth = endless ? 10000 : 1000;
    me.x = 25;
    me.y = 25;
            toynum = 20;
            if (!endless) bossdefeated = false;
            if (!endless) bossespawn = false;
alarm_started = false;
countdown_started = false;
small_storedest = false;
medium_storedest = false;
            carspawn = false;
cardest=false;
            gardspawn = false;
            keydest = false;
            keyspawn = false;
            objdest = false;
            objspawn = false;
            toydest = false;
            toyspawn = false;
            mainmenu();
            return;
        }
        if (psmem == "rmg")
{
            temp.play_stationary("resume.ogg", false);
            resume_game();
            return;
        }
if(psmem == "vds")
{
    setupmenu(false);
    m.add_item("Current level: " + level + " (" + (endless ? "Endless Mode" : "Normal Mode") + ")");
    m.add_item("Current location: " + me.x + ", " + me.y);
    m.add_item("player HP: " + health);
m.add_item("store HP: " + storehealth);
    m.add_item("Cars on field: " + cars.length());
    m.add_item("Guards on field: " + gards.length());
    m.add_item("Keys on field: " + keys.length());
    m.add_item("Toys on field: " + toys.length());
    m.add_item("Cars destroyed: " + destroyed_cars);
    m.add_item("Guards defeated: " + killed_gards);
    m.add_item("Keys collected: " + collected_keys);
    m.add_item("Steps taken: " + moved_steps);
    m.add_item("Toys collected: " + collected_toys);
    int session_minutes = int(timeelapsed.ms() / 60000);
    int session_seconds = int((timeelapsed.ms() % 60000) / 1000);
    m.add_item("Total time played: " + session_minutes + " minutes, " + session_seconds + " seconds");
m.add_item("back", "back");
m.intro_text = "Detailed stats menu.";
    int vres = m.run();
    string psmem2 = m.get_selected_item_id();
if (vres == -1 || m.get_selected_item_id() == "")
{
pausemenu();
    return;
}
        if (psmem2 == "back")
{
pausemenu();
            return;
        }
}
    }
void shopmenu() 
{
    dictionary prices;
    prices.set("ammo_pack", 5.0);
    prices.set("potion", 10.0);
    string[] objtypes = {"ammo_pack", "potion"};
    setupmenu(false);
    m.add_item("You have " + round(money, 0) + " dollars available to spend", "shopinfo");
    for (uint i = 0; i < objtypes.length(); i++)
{
        string itemID = objtypes[i];
        string itemName = itemID.replace("_", " ", true);
        int ownedCount = max(0, item_exists(itemID));
        double itemPrice = 1.0;
        if (prices.exists(itemID)) prices.get(itemID, itemPrice);
        string label = itemName + ", costs " + round(itemPrice, 0) + " dollar" + (itemPrice != 1 ? "s" : "") + ". You currently have " + ownedCount + " of these in your inventory.";
        m.add_item(label, itemID);
    }
    m.add_item("back", "back");
    m.intro_text = "Shop menu. What would you like to buy?";
    int mres = m.run();
    string shopem = m.get_selected_item_id();
    if (mres == -1 || shopem == "shopinfo" || shopem == "back")
{
        speak("Canceled");
        resume_game();
        return;
    }
    if (money <= 0)
{
        dlgmessage_return("Error: you don't have enough money to complete this action.");
        resume_game();
        return;
    }
    vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+=`~", false, "This character is not allowed.");
    string amount_input = vd.input_box("", "How many " + shopem.replace("_", " ", true) + "s would you like to buy?");
    if (amount_input == "")
{
        speak("canceled");
        resume_game();
        return;
    }
    double amount = string_to_number(amount_input);
    if (amount <= 0)
{
        speak("Invalid quantity.");
        resume_game();
        return;
    }
    double price = 1.0;
    if (prices.exists(shopem)) prices.get(shopem, price);
    double total_cost = amount * price;
    if (money < total_cost)
{
        dlgmessage_return("You don't have enough money to buy that many.");
        resume_game();
        return;
    }
    p.play_stationary("storebuy" + random(1, 4) + ".ogg", false);
    p.play_stationary("playergive.ogg", false);
    give(shopem, int(amount));
    money -= total_cost;
    speak("Purchase completed. You bought " + int(amount) + " " + shopem.replace("_", " ", true) + (amount == 1 ? "." : "s."));
    resume_game();
return;
}
void weaponsmenu()
{
    setupmenu(false);
    string[] weaponNames = {"Bat", "Boot", "Club", "Feat", "Fist", "Hammer", "Knife", "Laser"};
    string[] weaponIds   = {"bat", "boot", "club", "feat", "fist", "hammer", "knife", "laser"};
    int[] damages        = {3, 6, 9, 12, 15, 18, 21, 24};
    int[] horizRanges    = {1, 2, 3, 4, 5, 6, 7, 8};
    int[] vertRanges     = {2, 3, 4, 5, 6, 7, 8, 9};
    if (endless)
    {
        weaponNames.insert_last("Machine Gun");
        weaponIds.insert_last("machinegun");
        damages.insert_last(27);
        horizRanges.insert_last(9);
        vertRanges.insert_last(10);
    }
    else
    {
        weaponNames.insert_last("Pistol");
        weaponIds.insert_last("pistol");
        damages.insert_last(27);
        horizRanges.insert_last(9);
        vertRanges.insert_last(10);
    }
    for (uint i = 0; i < weaponNames.length(); i++)
    {
        string label = weaponNames[i] + ": Attack " + damages[i] + ". Horizontal range " + horizRanges[i] + ". Vertical range " + vertRanges[i] + ".";
        if (weaponIds[i] == current_weapon)
            label += " (Equipped)";
        m.add_item(label, weaponIds[i]);
    }
    m.intro_text = "Weapons menu.";
    int res = m.run();
    string selected = m.get_selected_item_id();
    if (res == -1)
    {
        speak("Canceled");
    boss_timer.resume();
    gametimer.resume();
        return;
    }
    if (selected != current_weapon)
    {
        draw_weapon(selected);
    boss_timer.resume();
    gametimer.resume();
        return;
    }
else
{
    speak("This weapon is already equipped.");
    boss_timer.resume();
    gametimer.resume();
        return;
}
}
void achesmenu()
{
setupmenu();
    m.add_item("Session Achievements", "session");
    m.add_item("Lifetime Achievements", "lifetime");
m.add_item("Clear game achievements.", "chm");
if(statscopy==true) m.add_item("Copy all game Achievements to clipboard.", "cys");
if(statscopy==true) m.add_item("Export all game achievements to file", "cys2");
    m.add_item("back", "back");
m.intro_text = "Achievements menu. You can view your unlocked session and lifetime achievements, or clear or copy all of your achievements here.";
int mres=m.run();
string achm = m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
       if (achm == "session")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        show_session_achievements();
    }
if (achm == "lifetime")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        show_lifetime_achievements();
}
if (achm == "chm") 
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    setupmenu(false);
    m.add_item("Session achievements", "session");
    m.add_item("Lifetime achievements", "lifetime");
    m.add_item("Session and lifetime achievements", "both");
    m.add_item("Back", "back");
m.intro_text = "Choose which game achievements to clear. This will clear your game statistics.";
    int mres = m.run();
    string achmode = m.get_selected_item_id();
    if (mres == -1 or achmode == "back")
    {
        achesmenu();
    }
    setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
    m.intro_text = "Are you sure you want to reset your " + (achmode == "session" ? "session" : achmode == "lifetime" ? "lifetime" : "session and lifetime") + " achievements? This action can't be undone.";
    mres = m.run();
    string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
        achesmenu();
    }
    for (uint i = 0; i < achievements.length(); i++)
    {
        if ((achmode == "session" and achievements[i].isSessionBased) or (achmode == "lifetime" and !achievements[i].isSessionBased) or (achmode == "both"))
        {
            achievements[i].currentTier = 0;
        }
    }
    if (achmode == "session" or achmode == "both")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        moved_steps = 0;
        session_playtime = 0;
    }
    if (achmode == "lifetime" or achmode == "both")
    {
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_moved_steps = 0;
        total_playtime = 0;
    }
    writedata();
string modeLabel = (achmode == "session") ? "session" : (achmode == "lifetime") ? "lifetime" : "session and lifetime";
if(completesound==true) dlgplay("complete.ogg", false);
dlgmessage_return("Your " + modeLabel + " achievements have been cleared.");
    achesmenu();
}
if (achm == "cys")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    string achievementSummary = "Session Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
        {
            achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    achievementSummary += "\r\nLifetime Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (!achievements[i].isSessionBased)
        {
            achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    clipboard_copy_text(achievementSummary);
if(copexpsounds==true) dlgplay("gamecopy.ogg" ,false);
    dlgmessage_return("All game achievements have been copied to your clipboard.");
    achesmenu();
}
if (achm == "cys2")
{
if (speak_menu_loading) speak("loading");
m.fade_music();
achfile.open(DIRECTORY_APPDATA+"tsatria03/ToyMania/stats/player_achievements.txt", "w");
string achievementSummary = "Session Achievements:\r\n";
for (uint i = 0; i < achievements.length(); i++)
{
if (achievements[i].isSessionBased)
achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
}
achievementSummary += "\r\nLifetime Achievements:\r\n";
for (uint i = 0; i < achievements.length(); i++)
{
if (!achievements[i].isSessionBased)
achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
}
achfile.write(achievementSummary);
achfile.close();
if(copexpsounds==true) dlgplay("gamexport.ogg",false);
dlgmessage_return("All game achievements have been exported to stats/player_achievements.txt.");
achesmenu();
}
if (achm == "back")
{
gamemenu();
}
}
void show_session_achievements()
{
    setupmenu(false);
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
            m.add_item(achievements[i].get_progress_status(), "");
    }
    m.add_item("Back", "back");
m.intro_text = "Session Achievements menu. These achievements reset every run and track short-term progress.";
    int r = m.run();
    if (r == -1 or m.get_selected_item_id() == "back")
        achesmenu();
    else
        show_session_achievements();
}
void show_lifetime_achievements()
{
    setupmenu(false);
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (!achievements[i].isSessionBased)
            m.add_item(achievements[i].get_progress_status(), "");
    }
    m.add_item("Back", "back");
m.intro_text = "Lifetime Achievements menu. These achievements track your long-term overall game progress.";
    int r = m.run();
    if (r == -1 or m.get_selected_item_id() == "back")
        achesmenu();
    else
        show_lifetime_achievements();
}
void statsmenu()
{
setupmenu();
    m.add_item("Session Statistics", "session");
    m.add_item("Lifetime Statistics", "lifetime");
m.add_item("Clear game statistics.", "gs");
if(statscopy==true) m.add_item("Copy all game statistics to clipboard.", "cys");
if(statscopy==true) m.add_item("Export all game statistics to file", "cys2");
    m.add_item("back", "back");
m.intro_text = "Statistics menu. You can check your gameplay stats and unlockable player titles, or clear or copy all of your stats here.";
int mres=m.run();
string statsm = m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
       if (statsm == "session")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        view_session_stats();
    }
if (statsm == "lifetime")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        view_lifetime_stats();
}
if (statsm == "gs")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    setupmenu(false);
    m.add_item("session stats", "session");
    m.add_item("lifetime stats", "lifetime");
    m.add_item("session and lifetime stats", "both");
    m.add_item("Back", "back");
m.intro_text = "Choose which game statistics to clear. This will not clear your game achievements.";
    int mres = m.run();
    string gsm = m.get_selected_item_id();
    if (mres == -1 or gsm == "back")
    {
        statsmenu();
    }
    setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
    m.intro_text = "Are you sure you want to clear " + (gsm == "session" ? "your session stats" : gsm == "lifetime" ? "your lifetime stats" : "your session and lifetime stats") + "? This action can't be undone.";
    mres = m.run();
    string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
statsmenu();
    }
    if (gsm == "session")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        moved_steps = 0;
session_playtime = 0;
writedata();
if(completesound==true) dlgplay("complete.ogg", false);
        dlgmessage_return("Your session stats have been cleared.");
    }
    if (gsm == "lifetime")
    {
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_moved_steps = 0;
        total_playtime = 0;
        writedata();
if(completesound==true) dlgplay("complete.ogg", false);
        dlgmessage_return("Your lifetime stats have been cleared.");
    }
    if (gsm == "both")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        moved_steps = 0;
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_moved_steps = 0;
        total_playtime = 0;
        writedata();
if(completesound==true) dlgplay("complete.ogg", false);
        dlgmessage_return("Your session and lifetime stats have been cleared.");
    }
    statsmenu();
}
if (statsm == "cys")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
int session_minutes = int(session_playtime / 60000);
int session_seconds = int((session_playtime % 60000) / 1000);
int total_minutes = int(total_playtime / 60000);
int total_seconds = int((total_playtime % 60000) / 1000);
string statsummary = "";
statsummary += "Session Stats:\r\n";
statsummary += "- Toys collected: " + collected_toys + "\r\n";
statsummary += "- Keys collected: " + collected_keys + "\r\n";
statsummary += "- Guards killed: " + killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + moved_steps + "\r\n";
statsummary += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
statsummary += "Lifetime Stats:\r\n";
statsummary += "- Last Played Date: " + last_played_date + "\r\n";
statsummary += "- Last Played Time: " + last_played_time + "\r\n";
statsummary += "- Toys collected: " + total_collected_toys + "\r\n";
statsummary += "- Keys collected: " + total_collected_keys + "\r\n";
statsummary += "- Guards killed: " + total_killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + total_moved_steps + "\r\n";
statsummary += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n";
    clipboard_copy_text(statsummary);
if(copexpsounds==true) dlgplay("gamecopy.ogg" ,false);
    dlgmessage_return("All game statistics have been copied to your clipboard.");
    statsmenu();
}
if (statsm == "cys2")
{
if (speak_menu_loading) speak("loading");
m.fade_music();
statfile.open(DIRECTORY_APPDATA+"tsatria03/ToyMania/stats/player_statistics.txt", "w");
int session_minutes = int(session_playtime / 60000);
int session_seconds = int((session_playtime % 60000) / 1000);
int total_minutes = int(total_playtime / 60000);
int total_seconds = int((total_playtime % 60000) / 1000);
string statsummary = "";
statsummary += "Session Stats:\r\n";
statsummary += "- Toys collected: " + collected_toys + "\r\n";
statsummary += "- Keys collected: " + collected_keys + "\r\n";
statsummary += "- Guards killed: " + killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + moved_steps + "\r\n";
statsummary += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
statsummary += "Lifetime Stats:\r\n";
statsummary += "- Last Played Date: " + last_played_date + "\r\n";
statsummary += "- Last Played Time: " + last_played_time + "\r\n";
statsummary += "- Toys collected: " + total_collected_toys + "\r\n";
statsummary += "- Keys collected: " + total_collected_keys + "\r\n";
statsummary += "- Guards killed: " + total_killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + total_moved_steps + "\r\n";
statsummary += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n";
statfile.write(statsummary);
statfile.close();
if(copexpsounds==true) dlgplay("gamexport.ogg",false);
dlgmessage_return("All game statistics have been exported to stats/player_statistics.txt.");
statsmenu();
}
if (statsm == "back")
{
gamemenu();
}
}
void view_session_stats()
{
    setupmenu(false);
    m.add_item("You have collected " + collected_toys + " toys.", "");
    m.add_item("You have collected " + collected_keys + " keys.", "");
    m.add_item("You have killed " + killed_gards + " guards.", "");
    m.add_item("You have destroyed " + destroyed_cars + " cars.", "");
    m.add_item("You have taken " + moved_steps + " steps.", "");
int session_minutes = session_playtime / 60000;
int session_seconds = (session_playtime % 60000) / 1000;
m.add_item("You've been playing for " + session_minutes + " minutes, " + session_seconds + " seconds.", "");
    m.add_item("Back", "back");
m.intro_text = "Session Statistics menu. You can view your stats for the current game session here.";
    int mres = m.run();
    string statsm = m.get_selected_item_id();
    if (mres == -1 || statsm == "back")
{
        statsmenu();
    }
else
{
        view_session_stats();
    }
}
void view_lifetime_stats()
{
    setupmenu(false);
    m.add_item("Last Played Date: " + last_played_date, "");
    m.add_item("Last Played Time: " + last_played_time, "");
    m.add_item("You have collected a total of " + total_collected_toys + " toys.", "");
    m.add_item("You have collected a total of " + total_collected_keys + " keys.", "");
    m.add_item("You have killed a total of " + total_killed_gards + " guards.", "");
    m.add_item("You have destroyed a total of " + total_destroyed_cars + " cars.", "");
    m.add_item("You have taken a total of " + total_moved_steps + " steps.", "");
    int total_minutes = int(total_playtime / 60000);
    int total_seconds = int((total_playtime % 60000) / 1000);
    m.add_item("You've been playing for a total of " + total_minutes + " minutes, " + total_seconds + " seconds.", "");
    m.add_item("Back", "back");
m.intro_text = "Lifetime Statistics menu. You can see your total stats across all of your game sessions here.";
    int mres = m.run();
    string statsm = m.get_selected_item_id();
    if (mres == -1 || statsm == "back")
{
        statsmenu();
    }
else
{
        view_lifetime_stats();
    }
}
void preffsmenu()
{
form.reset();
    form.create_window("Preferences", false);
int audsets = form.create_button("&audio settings");
int gamsets = form.create_button("&game settings");
int speechsets = form.create_button("s&peech settings");
    int sdloc = -1;
    if (system_is_windows)
        sdloc = form.create_button("&open save data location");
    int rest = form.create_button("&reset settings");
int savesets = form.create_button("&save settings", true);
int back = form.create_button("&back");
form.focus(audsets);
spool.play_stationary("menuopen.ogg",false);
    while (true)
    {
        form.monitor();
        wait(5);
        if (form.is_pressed(back) || key_repeating(KEY_ESCAPE))
        {
spool.play_stationary("menuclose.ogg",false);
            mainmenu();
        }
        if (form.is_pressed(gamsets))
        {
gamsetsmenu();
}
        if (form.is_pressed(audsets))
        {
soundsetsmenu();
}
        if (form.is_pressed(speechsets))
        {
speechsetsmenu();
}
        if (system_is_windows && form.is_pressed(sdloc))
        {
            speak("loading");
            wait(500);
            string basePath = DIRECTORY_APPDATA + "tsatria03/ToyMania";
            basePath = string_replace(basePath, "/", "\\", true);
            bool result = run("C:\\Windows\\explorer.exe", basePath, false, false);
            if (!result)
            {
                alert("Error", "Could not open " + basePath + ". Please re-create this folder and try again.");
            }
            else
            {
if(completesound==true) dlgplay("complete.ogg");
                dlgmessage_return("The save data location has been successfully opened.");
gamsetsmenu();
            }
        }
        if (form.is_pressed(rest))
        {
setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
m.intro_text="Are you sure you want to reset all of your settings?";
int mres=m.run();
string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
        gamsetsmenu();
    }
if(confirm=="yes")
{
if(file_exists(DIRECTORY_APPDATA+"tsatria03/ToyMania/saves/settings.tmg")) file_delete(DIRECTORY_APPDATA+"tsatria03/ToyMania/saves/settings.tmg");
resetpreffs();
writepreffs();
if(completesound==true) dlgplay("complete.ogg", false);
dlgmessage_return("Settings reset.");
mainmenu();
}
}
        if (form.is_pressed(savesets))
        {
writepreffs();
if(completesound==true) dlgplay("complete.ogg", false);
dlgmessage_return("Settings saved.");
mainmenu();
}
    }
}
void gamsetsmenu()
{
    form.reset();
    form.create_window("Game settings", false);
int autoUpdateToggle = form.create_checkbox("Enable checking for game updates at startup.", auto_check_updates);
int menuWrap = form.create_checkbox("Enable menu wrapping in all menus.", menuwrap);
int showdesc = form.create_checkbox("Enable showing toggleable item descriptions.", showset_desc);
int runmode = form.create_checkbox("Enable automatic running when moving.", autorun);
int glb = form.create_checkbox("Enable behind pitch decrease.", behind_pitch);
int glb2 = -1;
if (showset_desc) glb2 = form.create_input_box("Behind pitch decrease: description", "This setting controls whether the pitch of sounds decrease when you are behind something.", "", 0, true, true);
int glh = form.create_checkbox("Enable HRTF support.", hrtf);
int glh2 = -1;
if (showset_desc) glh2 = form.create_input_box("HRTF: description", "This setting enhances the 3D sound positioning effect for headphone users.", "", 0, true, true);
int achsound = form.create_checkbox("Enable achievement sound effects.", play_ach_scores);
int achsound2 = -1;
if (showset_desc) achsound2 = form.create_input_box("Achievement SFX: description", "This setting controls the sounds played when unlocking achievements.", "", 0, true, true);
int achvoice = form.create_checkbox("Enable achievement speech feedback.", speak_ach_scores);
int achvoice2 = -1;
if (showset_desc) achvoice2 = form.create_input_box("Achievement speech: description", "This setting controls the spoken announcements of achievement progresses.", "", 0, true, true);
int dlgspeech = form.create_checkbox("Enable dialog end speech feedback.", speak_dlg_enter);
int dlgspeech2 = -1;
if (showset_desc) dlgspeech2 = form.create_input_box("Dialog speech: description", "This setting controls whether the phrase 'Press enter to continue' is spoken after dialog messages.", "", 0, true, true);
int loadspeech = form.create_checkbox("Enable menu loading speech feedback.", speak_menu_loading);
int loadspeech2 = -1;
if (showset_desc) loadspeech2 = form.create_input_box("Menu loading speech: description", "This setting controls whether the 'Loading' phrase is spoken when opening various menus.", "", 0, true, true);
int gcp = form.create_checkbox("Enable post-game copy and export prompts.", gamcopy);
int gcp2 = -1;
if (showset_desc) gcp2 = form.create_input_box("Post-game copy/export: description", "This setting controls whether the game asks if you'd like to copy your session stats after pause, death or victory.", "", 0, true, true);
int scp = form.create_checkbox("Enable stat copy and export options.", statscopy);
int scp2 = -1;
if (showset_desc) scp2 = form.create_input_box("Stat copy/export: description", "This setting controls the showing of all copy and export entries from various stat based menus.", "", 0, true, true);
int lps = form.create_checkbox("Enable looping of previewed sounds.", loop_previews);
int lps2 = -1;
if (showset_desc) lps2 = form.create_input_box("Loop previews: description", "This setting controls whether the sounds found in the Learn Sounds menu loop until another sound is selected or the Escape key is pressed.", "", 0, true, true);
int vsc = form.create_checkbox("Enable variant-based sound descriptions.", variant_descriptions);
int vsc2 = -1;
if (showset_desc) vsc2 = form.create_input_box("Variant sound: description", "This setting controls whether sounds that have multiple variants will include a description along side them.", "", 0, true, true);
int cfs = form.create_checkbox("Enable copy and export confirmation sounds.", copexpsounds);
int cfs2 = -1;
if (showset_desc) cfs2 = form.create_input_box("Copy/export sound: description", "This setting controls the playing of short chimes after copying or exporting files to and from the clipboard.", "", 0, true, true);
int qcm = form.create_checkbox("Enable quit confirmation prompts.", quit_menu);
int qcm2 = -1;
if (showset_desc) qcm2 = form.create_input_box("Quit prompt: description", "This setting controls whether the game will show a prompt to quit the current game session before quitting from the Escape or pause menu.", "", 0, true, true);
int countsound = form.create_checkbox("Enable countdown sound effects.", playcounts);
int countsound2 = -1;
if (showset_desc) countsound2 = form.create_input_box("Countdown SFX: description", "This setting controls the sounds played when you only have 10 seconds left in the sixth level of the normal game mode.", "", 0, true, true);
int levsound = form.create_checkbox("Enable levelup sound effects.", playlevels);
int levsound2 = -1;
if (showset_desc) levsound2 = form.create_input_box("Level-up SFX: description", "This setting controls the sounds played when you reach the next level in a game.", "", 0, true, true);
int compsound = form.create_checkbox("Enable action complete sounds.", completesound);
int compsound2 = -1;
if (showset_desc) compsound2 = form.create_input_box("Complete SFX: description", "This setting controls the sounds played when you complete sertain actions throughout various menus.", "", 0, true, true);
int togsound = form.create_checkbox("Enable toggle switch sounds.", togglesound);
int togsound2 = -1;
if (showset_desc) togsound2 = form.create_input_box("Toggle switch SFX: description", "This setting controls the sounds played when you enable or disable sertain settings found in the prefferences menu.", "", 0, true, true);
    int cancel = form.create_button("&cancel");
int ok = form.create_button("&okay");
form.focus(autoUpdateToggle);
spool.play_stationary("menuopen.ogg",false);
    while (true)
    {
        wait(5);
        form.monitor();
auto_check_updates=form.is_checked(autoUpdateToggle);
menuwrap = form.is_checked(menuWrap);
showset_desc = form.is_checked(showdesc);
autorun = form.is_checked(runmode);
            behind_pitch = form.is_checked(glb);
            hrtf = form.is_checked(glh);
            sound_global_hrtf = hrtf;
            play_ach_scores = form.is_checked(achsound);
            speak_ach_scores = form.is_checked(achvoice);
            speak_dlg_enter = form.is_checked(dlgspeech);
            speak_menu_loading = form.is_checked(loadspeech);
            gamcopy = form.is_checked(gcp);
            statscopy = form.is_checked(scp);
            loop_previews = form.is_checked(lps);
            variant_descriptions = form.is_checked(vsc);
            copexpsounds = form.is_checked(cfs);
            quit_menu = form.is_checked(qcm);
            playcounts = form.is_checked(countsound);
            playlevels = form.is_checked(levsound);
completesound = form.is_checked(compsound);
togglesound = form.is_checked(togsound);
        if (form.is_pressed(cancel) || key_repeating(KEY_ESCAPE))
        {
spool.play_stationary("menuclose.ogg",false);
            preffsmenu();
        }
        if (form.is_pressed(ok))
        {
            preffsmenu();
        }
    }
}
void gamsetsmenu2()
{
    form.reset();
    form.create_window("Game settings", false);
int runmode = form.create_checkbox("Enable automatic running when moving.", autorun);
int glb = form.create_checkbox("Enable behind pitch decrease.", behind_pitch);
int glh = form.create_checkbox("Enable HRTF support.", hrtf);
int achsound = form.create_checkbox("Enable achievement sound effects.", play_ach_scores);
int achvoice = form.create_checkbox("Enable achievement speech feedback.", speak_ach_scores);
int gcp = form.create_checkbox("Enable post-game copy and export prompts.", gamcopy);
int qcm = form.create_checkbox("Enable quit confirmation prompts.", quit_menu);
int countsound = form.create_checkbox("Enable countdown sound effects.", playcounts);
int levsound = form.create_checkbox("Enable levelup sound effects.", playlevels);
    int cancel = form.create_button("&cancel");
int ok = form.create_button("&okay");
form.focus(runmode);
spool.play_stationary("menuopen.ogg",false);
    while (true)
    {
        wait(5);
        form.monitor();
autorun = form.is_checked(runmode);
            behind_pitch = form.is_checked(glb);
            hrtf = form.is_checked(glh);
            sound_global_hrtf = hrtf;
            play_ach_scores = form.is_checked(achsound);
            speak_ach_scores = form.is_checked(achvoice);
            gamcopy = form.is_checked(gcp);
            quit_menu = form.is_checked(qcm);
            playcounts = form.is_checked(countsound);
            playlevels = form.is_checked(levsound);
        if (form.is_pressed(cancel) || key_repeating(KEY_ESCAPE))
        {
spool.play_stationary("menuclose.ogg",false);
speak("canceled");
resume_game();
return;
        }
        if (form.is_pressed(ok))
        {
writepreffs();
speak("Settings saved.");
resume_game();
return;
        }
    }
}
void soundsetsmenu()
{
form.reset();
    form.create_window("audio settings", false);
int gameAmbienceVolumeSlider = form.create_slider("game ambience volume: adjustable", (toyambvolume + 50) * 2, 0, 100, "percent", 1);
int gameMusicVolumeSlider = form.create_slider("game music volume: adjustable", (toymusvolume + 50) * 2, 0, 100, "percent", 1);
int gameAlarmVolumeSlider = form.create_slider("game alarm volume: adjustable", (alarmvolume + 50) * 2, 0, 100, "percent", 1);
int gameHeartbeatVolumeSlider = form.create_slider("game heartbeat volume: adjustable", (heartvolume + 50) * 2, 0, 100, "percent", 1);
int menuMusicVolumeSlider = form.create_slider("menu music volume: adjustable", (menumusvolume + 50) * 2, 0, 100, "percent", 1);
int masterGameVolumeSlider = form.create_slider("master game volume: adjustable", (int(master_volume) + 50) * 2, 0, 100, "percent", 1);
    int ambTest = form.create_button("Toggle ambience sound test: switch");
    int musTest = form.create_button("Toggle music sound test: switch");
    int alarmTest = form.create_button("Toggle alarm sound test: switch");
    int heartbeatTest = form.create_button("Toggle heartbeat sound test: switch");
    int musList = form.create_list("Test Tracks: menu", 2);
form.add_list_item(musList, "BossMusic: normal mode", "bossmus");
form.add_list_item(musList, "Game Music: normal and endless mode", "gamemus");
int sdm = form.create_button("Select sound &device. Currently set to " + soundcard);
int cancel = form.create_button("&cancel");
int ok = form.create_button("&okay");
form.focus(gameAmbienceVolumeSlider);
spool.play_stationary("menuopen.ogg",false);
    while (true)
    {
        wait(5);
        form.monitor();
int currentMusIndex = form.get_list_position(musList);
if (currentMusIndex != lastMusicIndex && currentMusIndex != -1)
{
    lastMusicIndex = currentMusIndex;
mustype = form.get_list_item_id(musList, currentMusIndex);
    if (muspool.sound_is_playing(toytrackslot))
    {
        muspool.destroy_sound(toytrackslot);
            toytrackslot = muspool.play_stationary(mustype + ".ogg", true);
lastMusicIndex = currentMusIndex;
    }
    else
    {
            muspool.destroy_sound(toytrackslot);
lastMusicIndex = -1;
    }
}
toyambvolume = (form.get_slider(gameAmbienceVolumeSlider) / 2) - 50;
toymusvolume = (form.get_slider(gameMusicVolumeSlider) / 2) - 50;
alarmvolume = (form.get_slider(gameAlarmVolumeSlider) / 2) - 50;
heartvolume = (form.get_slider(gameHeartbeatVolumeSlider) / 2) - 50;
menumusvolume = (form.get_slider(menuMusicVolumeSlider) / 2) - 50;
master_volume = (form.get_slider(masterGameVolumeSlider) / 2) - 50;
set_sound_master_volume(master_volume);
        ambpool.update_sound_start_values(toyambslot, 0, toyambvolume, toyambpitch);
        muspool.update_sound_start_values(toytrackslot, 0, toymusvolume, toymuspitch);
        alarmpool.update_sound_start_values(alarmslot, 0, alarmvolume, alarmpitch);
        heartpool.update_sound_start_values(heartslot, 0, heartvolume, heartpitch);
        if (form.is_pressed(cancel) || key_repeating(KEY_ESCAPE))
        {
ambpool.destroy_sound(toyambslot);
muspool.destroy_sound(toytrackslot);
alarmpool.destroy_sound(alarmslot);
heartpool.destroy_sound(heartslot);
spool.play_stationary("menuclose.ogg",false);
            preffsmenu();
        }
        if (form.is_pressed(ok))
        {
ambpool.destroy_sound(toyambslot);
muspool.destroy_sound(toytrackslot);
alarmpool.destroy_sound(alarmslot);
heartpool.destroy_sound(heartslot);
            preffsmenu();
        }
if (form.is_pressed(ambTest))
{
    if (ambpool.sound_is_playing(toyambslot))
{
if(togglesound==true) spool.play_stationary("setdisabled.ogg",false);
speak("ambience off");
        ambpool.destroy_sound(toyambslot);
    }
else
{
if(togglesound==true) spool.play_stationary("setenabled.ogg",false);
speak("ambience on");
        toyambslot = ambpool.play_stationary("gameamb.ogg", true);
    }
}
if (form.is_pressed(musTest))
{
    if (muspool.sound_is_playing(toytrackslot))
    {
if(togglesound==true) spool.play_stationary("setdisabled.ogg", false);
speak("music off");
        muspool.destroy_sound(toytrackslot);
        lastMusicIndex = -1;
    }
    else
    {
        int musIndex = form.get_list_position(musList);
        if (musIndex >= 0)
        {
mustype = form.get_list_item_id(musList, musIndex);
if(togglesound==true) spool.play_stationary("setenabled.ogg", false);
speak("music on");
            muspool.destroy_sound(toytrackslot);
            toytrackslot = muspool.play_stationary(mustype + ".ogg", true);
            lastMusicIndex = musIndex;
        }
    }
}
if (form.is_pressed(alarmTest))
{
    if (alarmpool.sound_is_playing(alarmslot))
{
if(togglesound==true) spool.play_stationary("setdisabled.ogg",false);
speak("alarm off");
        alarmpool.destroy_sound(alarmslot);
    }
else
{
if(togglesound==true) spool.play_stationary("setenabled.ogg",false);
speak("alarm on");
        alarmslot = alarmpool.play_stationary("gamealarm.ogg", true);
    }
}
if (form.is_pressed(heartbeatTest))
{
    if (heartpool.sound_is_playing(heartslot))
{
if(togglesound==true) spool.play_stationary("setdisabled.ogg",false);
speak("heartbeat off");
        heartpool.destroy_sound(heartslot);
    }
else
{
if(togglesound==true) spool.play_stationary("setenabled.ogg",false);
speak("heartbeat on");
        heartslot = heartpool.play_stationary("heartstart.ogg", true);
    }
}
if(form.is_pressed(sdm))
{
ambpool.destroy_sound(toyambslot);
muspool.destroy_sound(toytrackslot);
alarmpool.destroy_sound(alarmslot);
heartpool.destroy_sound(heartslot);
string[]@ devices=get_sound_output_devices();
devices.remove_at(0);
devices.sort_ascending();
setupmenu(false);
for(uint i=0; i<devices.length(); i++)
{
    string soundstate = (i + 1 == sound_output_device) ? ": active" : ": inactive";
m.add_item(devices[i] + soundstate, devices[i]);
}
m.intro_text="Choose a sound device you would like to use in the game.";
int mres=m.run();
if(mres==-1)
{
soundsetsmenu();
}
    else if (mres >= 0 && mres < int(devices.length()))
    {
        soundcard = devices[mres];
        sound_output_device = mres + 1;
if(completesound==true) dlgplay("complete.ogg");
dlgmessage_return("Sound device set to "+soundcard+".");
soundsetsmenu();
}
}
    }
}
void soundsetsmenu2()
{
form.reset();
    form.create_window("audio settings", false);
int gameAmbienceVolumeSlider = form.create_slider("game ambience volume: adjustable", (toyambvolume + 50) * 2, 0, 100, "percent", 1);
int gameMusicVolumeSlider = form.create_slider("game music volume: adjustable", (toymusvolume + 50) * 2, 0, 100, "percent", 1);
int gameAlarmVolumeSlider = form.create_slider("game alarm volume: adjustable", (alarmvolume + 50) * 2, 0, 100, "percent", 1);
int gameHeartbeatVolumeSlider = form.create_slider("game heartbeat volume: adjustable", (heartvolume + 50) * 2, 0, 100, "percent", 1);
int cancel = form.create_button("&cancel");
int ok = form.create_button("&okay");
form.focus(gameAmbienceVolumeSlider);
spool.play_stationary("menuopen.ogg",false);
    while (true)
    {
        wait(5);
        form.monitor();
toyambvolume = (form.get_slider(gameAmbienceVolumeSlider) / 2) - 50;
toymusvolume = (form.get_slider(gameMusicVolumeSlider) / 2) - 50;
alarmvolume = (form.get_slider(gameAlarmVolumeSlider) / 2) - 50;
heartvolume = (form.get_slider(gameHeartbeatVolumeSlider) / 2) - 50;
        ambpool.update_sound_start_values(toyambslot, 0, toyambvolume, toyambpitch);
        muspool.update_sound_start_values(toytrackslot, 0, toymusvolume, toymuspitch);
        alarmpool.update_sound_start_values(alarmslot, 0, alarmvolume, alarmpitch);
        heartpool.update_sound_start_values(heartslot, 0, heartvolume, heartpitch);
        if (form.is_pressed(cancel) || key_repeating(KEY_ESCAPE))
        {
spool.play_stationary("menuclose.ogg",false);
speak("canceled");
resume_game();
return;
        }
        if (form.is_pressed(ok))
        {
writepreffs();
speak("Settings saved.");
resume_game();
return;
        }
}
    }
void speechsetsmenu()
{
form.reset();
    form.create_window("speech settings", false);
int ttscfg = form.create_button("&Configure voice");
int speechtest = form.create_button("&preview voice");
int cansets = form.create_button("&cancel");
form.focus(ttscfg);
spool.play_stationary("menuopen.ogg",false);
    while (true)
    {
        wait(5);
        form.monitor();
        if (form.is_pressed(cansets) || key_repeating(KEY_ESCAPE))
        {
spool.play_stationary("menuclose.ogg",false);
            preffsmenu();
        }
if (form.is_pressed(ttscfg))
{
    spool.play_stationary("menuopen.ogg", false);
    tts_config(tts, true);
    spool.play_stationary("menuclose.ogg", false);
    speechsetsmenu();
}
if (form.is_pressed(speechtest))
{
dlgmessage_return("This is your current voice configuration.");
    speechsetsmenu();
}
    }
}
