void mainmenu()
{
setupmenu();
m.add_item("documentation menu", "dm");
m.add_item("game menu", "gm");
m.add_item("speaker test menu", "st");
m.add_item("settings menu", "sm");
m.add_item("restart game", "rt");
m.add_item("exit game", "ex");
m.intro_text = "Main menu. Please choose an option with your arrow keys, then press enter to activate one.";
int mres=m.run();
string main = m.get_selected_item_id();
if(mres==-1)
{
speak("exiting");
m.fade_music();
exit();
}
if (main == "dm")
{
docksmenu();
}
if (main == "gm")
{
gamemenu();
}
if (main == "sm")
{
speak("loading");
m.fade_music();
settingsmenu();
}
if(main == "st")
{
    setupmenu(false);
    m.add_item("Sword Clank", "clank");
    m.add_item("Stone Throw", "stone");
    m.add_item("Back", "back");
m.intro_text = "Choose a sound to test your audio setup. For the most accurate results, please use headphones. Please also make sure to check if they are worn correctly. We wouldn't want you wearing those things in the wrong ears, would we?";
    int mres = m.run();
    string soundsel = m.get_selected_item_id();
    if (mres == -1 or soundsel == "back")
{
        mainmenu();
    }
    if (soundsel == "clank")
{
speak("loading");
m.fade_music();
        dlgplay("speaker_sword_clank.ogg");
    }
    if (soundsel == "stone")
{
speak("loading");
m.fade_music();
        dlgplay("speaker_stone_throw.ogg");
    }
    mainmenu();
}
if (main == "rt")
{
speak("restarting");
m.fade_music();
restart();
}
if (main == "ex")
{
speak("exiting");
m.fade_music();
exit();
}
}
void docksmenu()
{
setupmenu();
m.add_item("changelog", "changelog");
m.add_item("credits", "credits");
m.add_item("readme", "readme");
m.add_item("todo_list", "todo_list");
m.add_item("back", "back");
m.intro_text="Documentation menu. What would you like to read?";
int mres=m.run();
string dnm=m.get_selected_item_id();
if(mres==-1)
{
mainmenu();
}
if(dnm=="changelog")
{
speak("loading");
m.fade_music();
dockread("docks/changelog.txt");
}
if(dnm=="credits")
{
speak("loading");
m.fade_music();
dockread("docks/credits.txt");
}
if(dnm=="readme")
{
speak("loading");
m.fade_music();
dockread("docks/readme.txt");
}
if(dnm=="todo_list")
{
speak("loading");
m.fade_music();
dockread("docks/todo_list.txt");
}
if(dnm=="back")
{
mainmenu();
}
}
void gamemenu()
{
setupmenu();
m.add_item("play", "ty");
m.add_item("achievements", "ach");
m.add_item("statistics", "stats");
m.add_item("Copy all game progresses to clipboard", "copyall");
m.add_item("back", "back");
m.intro_text = "Game menu. You can start a new game session, view achievements, or check your stats here.";
int mres=m.run();
string gamem = m.get_selected_item_id();
if(mres==-1)
{
mainmenu();
}
if (gamem == "ty")
{
speak("loading");
m.fade_music();
dlgplay("gamelaunch.ogg");
collected_toys = 0;
collected_keys = 0;
killed_gards = 0;
destroyed_cars = 0;
taken_steps = 0;
session_playtime = 0;
for (uint i = 0; i < achievements.length(); i++)
{
    if (achievements[i].isSessionBased)
{
        achievements[i].currentTier = 0;
    }
}
health=1000;
me.x=25;
me.y=25;
bossdefeated = false;
keydest=false;
toydest=false;
toyspawn=true;
gametimer.restart();
toygame();
}
if (gamem == "ach")
{
achesmenu();
}
if (gamem == "stats")
{
statsmenu();
}
if (gamem == "copyall")
{
speak("loading");
m.fade_music();
    string result = "";
    result += "Session Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
        {
            result += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    result += "\r\nLifetime Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (!achievements[i].isSessionBased)
        {
            result += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    result += "\r\n";
    int session_minutes = int(session_playtime / 60000);
    int session_seconds = int((session_playtime % 60000) / 1000);
    result += "Session Stats:\r\n";
    result += "- Toys collected: " + collected_toys + "\r\n";
    result += "- Keys collected: " + collected_keys + "\r\n";
    result += "- Guards killed: " + killed_gards + "\r\n";
    result += "- Cars destroyed: " + destroyed_cars + "\r\n";
    result += "- Steps taken: " + taken_steps + "\r\n";
    result += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
    int total_minutes = int(total_playtime / 60000);
    int total_seconds = int((total_playtime % 60000) / 1000);
    result += "Lifetime Stats:\r\n";
    result += "- Last Played Date: " + last_played_date + "\r\n";
    result += "- Last Played Time: " + last_played_time + "\r\n";
    result += "- Toys collected: " + total_collected_toys + "\r\n";
    result += "- Keys collected: " + total_collected_keys + "\r\n";
    result += "- Guards killed: " + total_killed_gards + "\r\n";
    result += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
    result += "- Steps taken: " + total_taken_steps + "\r\n";
    result += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n\r\n";
    result += "Player Titles:\r\n";
    result += "- Toy Title: " + get_toy_rank() + ". " + get_toy_rank_desc() + "\r\n";
    result += "- Key Title: " + get_key_rank() + ". " + get_key_rank_desc() + "\r\n";
    result += "- Guard Title: " + get_guard_rank() + ". " + get_guard_rank_desc() + "\r\n";
    result += "- Car Title: " + get_car_rank() + ". " + get_car_rank_desc() + "\r\n";
    result += "- Steps Title: " + get_steps_rank() + ". " + get_steps_rank_desc() + "\r\n";
    result += "- Playtime Title: " + get_playtime_rank() + ". " + get_playtime_rank_desc() + "\r\n";
    clipboard_copy_text(result);
    dlgmessage("All game progresses have been copied to the clipboard. Press enter to continue.");
    gamemenu();
}
if (gamem == "back")
{
mainmenu();
}
}
void achesmenu()
{
setupmenu();
    m.add_item("Session Achievements", "session");
    m.add_item("Lifetime Achievements", "lifetime");
m.add_item("Copy all game Achievements to clipboard.", "cys");
    m.add_item("back", "back");
m.intro_text = "Achievements menu. You can view your unlocked session and lifetime achievements here.";
int mres=m.run();
string achm = m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
       if (achm == "session")
{
speak("loading");
m.fade_music();
        show_session_achievements();
    }
if (achm == "lifetime")
{
speak("loading");
m.fade_music();
        show_lifetime_achievements();
}
if (achm == "cys")
{
speak("loading");
m.fade_music();
    string achievementSummary = "Session Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
        {
            achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    achievementSummary += "\r\nLifetime Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (!achievements[i].isSessionBased)
        {
            achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    clipboard_copy_text(achievementSummary);
    dlgmessage("All game achievements have been copied to your clipboard. Press enter to continue.");
    achesmenu();
}
if (achm == "back")
{
gamemenu();
}
}
void show_session_achievements()
{
    setupmenu(false);
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
            m.add_item(achievements[i].get_progress_status(), "");
    }
    m.add_item("Back", "back");
m.intro_text = "Session Achievements menu. These achievements reset every run and track short-term progress.";
    int r = m.run();
    if (r == -1 or m.get_selected_item_id() == "back")
        achesmenu();
    else
        show_session_achievements();
}
void show_lifetime_achievements()
{
    setupmenu(false);
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (!achievements[i].isSessionBased)
            m.add_item(achievements[i].get_progress_status(), "");
    }
    m.add_item("Back", "back");
m.intro_text = "Lifetime Achievements menu. These achievements track your long-term overall game progress.";
    int r = m.run();
    if (r == -1 or m.get_selected_item_id() == "back")
        achesmenu();
    else
        show_lifetime_achievements();
}
void statsmenu()
{
setupmenu();
    m.add_item("Session Stats", "session");
    m.add_item("Lifetime Stats", "lifetime");
m.add_item("Player Titles", "titles");
m.add_item("Copy all game statistics to clipboard.", "cys");
    m.add_item("back", "back");
m.intro_text = "Statistics menu. You can check your gameplay stats and unlockable player titles here.";
int mres=m.run();
string statsm = m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
       if (statsm == "session")
{
speak("loading");
m.fade_music();
        view_session_stats();
    }
if (statsm == "lifetime")
{
speak("loading");
m.fade_music();
        view_lifetime_stats();
}
if (statsm == "titles")
{
speak("loading");
m.fade_music();
    view_player_titles();
}
if (statsm == "cys")
{
speak("loading");
m.fade_music();
int session_minutes = int(session_playtime / 60000);
int session_seconds = int((session_playtime % 60000) / 1000);
int total_minutes = int(total_playtime / 60000);
int total_seconds = int((total_playtime % 60000) / 1000);
string statsummary = "";
statsummary += "Session Stats:\r\n";
statsummary += "- Toys collected: " + collected_toys + "\r\n";
statsummary += "- Keys collected: " + collected_keys + "\r\n";
statsummary += "- Guards killed: " + killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + taken_steps + "\r\n";
statsummary += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
statsummary += "Lifetime Stats:\r\n";
statsummary += "- Last Played Date: " + last_played_date + "\r\n";
statsummary += "- Last Played Time: " + last_played_time + "\r\n";
statsummary += "- Toys collected: " + total_collected_toys + "\r\n";
statsummary += "- Keys collected: " + total_collected_keys + "\r\n";
statsummary += "- Guards killed: " + total_killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + total_taken_steps + "\r\n";
statsummary += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n\r\n";
statsummary += "Player Titles:\r\n";
statsummary += "- Toy Title: " + get_toy_rank() + ". " + get_toy_rank_desc() + "\r\n";
statsummary += "- Key Title: " + get_key_rank() + ". " + get_key_rank_desc() + "\r\n";
statsummary += "- Guard Title: " + get_guard_rank() + ". " + get_guard_rank_desc() + "\r\n";
statsummary += "- Car Title: " + get_car_rank() + ". " + get_car_rank_desc() + "\r\n";
statsummary += "- Steps Title: " + get_steps_rank() + ". " + get_steps_rank_desc() + "\r\n";
statsummary += "- Playtime Title: " + get_playtime_rank() + ". " + get_playtime_rank_desc() + "\r\n";
    clipboard_copy_text(statsummary);
    dlgmessage("All game statistics have been copied to your clipboard. Press enter to continue.");
    statsmenu();
}
if (statsm == "back")
{
gamemenu();
}
}
void view_session_stats()
{
    setupmenu(false);
    m.add_item("You have collected " + collected_toys + " toys.", "");
    m.add_item("You have collected " + collected_keys + " keys.", "");
    m.add_item("You have killed " + killed_gards + " guards.", "");
    m.add_item("You have destroyed " + destroyed_cars + " cars.", "");
    m.add_item("You have taken " + taken_steps + " steps.", "");
int session_minutes = session_playtime / 60000;
int session_seconds = (session_playtime % 60000) / 1000;
m.add_item("You've been playing for " + session_minutes + " minutes, " + session_seconds + " seconds.", "");
    m.add_item("Back", "back");
m.intro_text = "Session Statistics menu. You can view your stats for the current game session here.";
    int mres = m.run();
    string statsm = m.get_selected_item_id();
    if (mres == -1 || statsm == "back")
{
        statsmenu();
    }
else
{
        view_session_stats();
    }
}
void view_lifetime_stats()
{
    setupmenu(false);
    m.add_item("Last Played Date: " + last_played_date, "");
    m.add_item("Last Played Time: " + last_played_time, "");
    m.add_item("You have collected a total of " + total_collected_toys + " toys.", "");
    m.add_item("You have collected a total of " + total_collected_keys + " keys.", "");
    m.add_item("You have killed a total of " + total_killed_gards + " guards.", "");
    m.add_item("You have destroyed a total of " + total_destroyed_cars + " cars.", "");
    m.add_item("You have taken a total of " + total_taken_steps + " steps.", "");
    int total_minutes = int(total_playtime / 60000);
    int total_seconds = int((total_playtime % 60000) / 1000);
    m.add_item("You've been playing for a total of " + total_minutes + " minutes, " + total_seconds + " seconds.", "");
    m.add_item("Back", "back");
m.intro_text = "Lifetime Statistics menu. You can see your total stats across all of your game sessions here.";
    int mres = m.run();
    string statsm = m.get_selected_item_id();
    if (mres == -1 || statsm == "back")
{
        statsmenu();
    }
else
{
        view_lifetime_stats();
    }
}
void view_player_titles()
{
    setupmenu(false);
    m.add_item("Toy Rank: " + get_toy_rank() + ". " + get_toy_rank_desc(), "");
    m.add_item("Key Rank: " + get_key_rank() + ". " + get_key_rank_desc(), "");
    m.add_item("Guard Rank: " + get_guard_rank() + ". " + get_guard_rank_desc(), "");
    m.add_item("Car Rank: " + get_car_rank() + ". " + get_car_rank_desc(), "");
    m.add_item("Steps Rank: " + get_steps_rank() + ". " + get_steps_rank_desc(), "");
    m.add_item("Playtime Rank: " + get_playtime_rank() + ". " + get_playtime_rank_desc(), "");
    m.add_item("Back", "back");
m.intro_text = "Player titles menu. You can view your earned titles based on lifetime stats here.";
    int res = m.run();
    if (res == -1 or m.get_selected_item_id() == "back")
    {
        statsmenu();
}
    else
{
view_player_titles();
}
}
void settingsmenu()
{
setupmenu(false);
m.add_item(behind_pitch ? "Disable behind pitch decrease. This setting controls whether the pitch of sounds decrease when you are behind something." : "Enable behind pitch decrease. This setting controls whether the pitch of sounds decrease when you are behind something.", "glb");
m.add_item(hrtf ? "Disable HRTF support. This setting enhances the 3D sound positioning effect for headphone users." : "Enable HRTF support. This setting enhances the 3D sound positioning effect for headphone users.", "glh");
m.add_item(play_ach_scores ? "Disable achievement sound effects. This setting controls the sounds played when unlocking achievements." : "Enable achievement sound effects. This setting controls the sounds played when unlocking achievements.", "achsound");
m.add_item(speak_ach_scores ? "Disable achievement speech feedback. This setting controls the spoken announcements of game achievement progresses." : "Enable achievement speech feedback. This setting controls the spoken announcements of achievement progresses.", "achvoice");
m.add_item("Clear game achievements.", "chm");
m.add_item("Clear game statistics.", "gs");
m.add_item("save settings", "sv");
m.add_item("back", "back");
m.intro_text = "Settings menu. You can adjust game options, reset stats, or clear achievements here.";
int mres=m.run();
string preffsm = m.get_selected_item_id();
if(mres==-1)
{
mainmenu();
}
if (preffsm == "glb")
{
behind_pitch = !behind_pitch;
dlgmessage(behind_pitch ? "Behind pitch decrease enabled. Press enter to continue." : "Behind pitch decrease disabled. Press enter to continue.");
settingsmenu();
}
if (preffsm == "glh")
{
hrtf = !hrtf;
sound_global_hrtf = hrtf;
dlgmessage(hrtf ? "HRTF support enabled. Press enter to continue." : "HRTF support disabled. Press enter to continue.");
settingsmenu();
}
if (preffsm == "achsound")
{
    play_ach_scores = !play_ach_scores;
    dlgmessage(play_ach_scores ? "Achievement sound effects enabled. Press enter to continue." : "Achievement sound effects disabled. Press enter to continue.");
    settingsmenu();
}
if (preffsm == "achvoice")
{
    speak_ach_scores = !speak_ach_scores;
    dlgmessage(speak_ach_scores ? "Achievement speech feedback enabled. Press enter to continue." : "Achievement speech feedback disabled. Press enter to continue.");
    settingsmenu();
}
if (preffsm == "sv")
{
writepreffs();
dlgmessage("Settings saved. Press enter to continue.");
mainmenu();
}
if (preffsm == "chm") 
{
    setupmenu(false);
    m.add_item("Session achievements", "session");
    m.add_item("Lifetime achievements", "lifetime");
    m.add_item("Session and lifetime achievements", "both");
    m.add_item("Back", "back");
m.intro_text = "Choose which game achievements to clear. This will clear your game statistics.";
    int mres = m.run();
    string achmode = m.get_selected_item_id();
    if (mres == -1 or achmode == "back")
    {
        settingsmenu();
    }
    setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
    m.intro_text = "Are you sure you want to reset your " + (achmode == "session" ? "session" : achmode == "lifetime" ? "lifetime" : "session and lifetime") + " achievements? This action can't be undone.";
    mres = m.run();
    string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
        settingsmenu();
    }
    for (uint i = 0; i < achievements.length(); i++)
    {
        if ((achmode == "session" and achievements[i].isSessionBased) or (achmode == "lifetime" and !achievements[i].isSessionBased) or (achmode == "both"))
        {
            achievements[i].currentTier = 0;
        }
    }
    if (achmode == "session" or achmode == "both")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        taken_steps = 0;
        session_playtime = 0;
    }
    if (achmode == "lifetime" or achmode == "both")
    {
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_taken_steps = 0;
        total_playtime = 0;
    }
    writedata();
    dlgmessage("Your " + (achmode == "session" ? "session" : achmode == "lifetime" ? "lifetime" : "session and lifetime") + " achievements have been cleared. Press enter to continue.");
    settingsmenu();
}
if (preffsm == "gs")
{
    setupmenu(false);
    m.add_item("session stats", "session");
    m.add_item("lifetime stats", "lifetime");
    m.add_item("session and lifetime stats", "both");
    m.add_item("Back", "back");
m.intro_text = "Choose which game statistics to clear. This will not clear your game achievements.";
    int mres = m.run();
    string gsm = m.get_selected_item_id();
    if (mres == -1 or gsm == "back")
    {
        settingsmenu();
    }
    setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
    m.intro_text = "Are you sure you want to clear " + (gsm == "session" ? "your session stats" : gsm == "lifetime" ? "your lifetime stats" : "your session and lifetime stats") + "? This action can't be undone.";
    mres = m.run();
    string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
settingsmenu();
    }
    if (gsm == "session")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        taken_steps = 0;
session_playtime = 0;
writedata();
        dlgmessage("Your session stats have been cleared. Press enter to continue.");
    }
    if (gsm == "lifetime")
    {
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_taken_steps = 0;
        total_playtime = 0;
        writedata();
        dlgmessage("Your lifetime stats have been cleared. Press enter to continue.");
    }
    if (gsm == "both")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        taken_steps = 0;
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_taken_steps = 0;
        total_playtime = 0;
        writedata();
        dlgmessage("Your session and lifetime stats have been cleared. Press enter to continue.");
    }
    settingsmenu();
}
if (preffsm == "back")
{
mainmenu();
}
}
