void mainmenu()
{
setupmenu();
m.add_item("game menu", "gm");
m.add_item("settings menu", "sm");
m.add_item("test speakers menu", "st");
m.add_item("restart game", "rt");
m.add_item("exit game", "ex");
m.intro_text = "Main menu. Please choose an option with your arrow keys, then press enter to activate one.";
int mres=m.run();
string main = m.get_selected_item_id();
if(mres==-1)
{
speak("exiting");
m.fade_music();
exit();
}
if (main == "gm")
{
gamemenu();
}
if (main == "sm")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
settingsmenu();
}
if(main == "st")
{
    setupmenu(false);
    m.add_item("Sword Clank. This sound has been played a total of "+swordplays+" times.", "clank");
    m.add_item("Stone Throw. This sound has been played a total of "+stoneplays+" times.", "stone");
    m.add_item("Back", "back");
m.intro_text = "Test speakers menu. Choose a sound to test your audio setup. For the most accurate results, please use headphones. Please also make sure to check if they are worn correctly.";
    int mres = m.run();
    string soundsel = m.get_selected_item_id();
    if (mres == -1 or soundsel == "back")
{
        mainmenu();
    }
    if (soundsel == "clank")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
swordplays+=1;
writepreffs();
        dlgplay("speaker_sword_clank.ogg");
    }
    if (soundsel == "stone")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
stoneplays+=1;
writepreffs();
        dlgplay("speaker_stone_throw.ogg");
    }
dlgmessage_return("Speaker test complete.");
    mainmenu();
}
if (main == "rt")
{
speak("restarting");
m.fade_music();
restart();
}
if (main == "ex")
{
speak("exiting");
m.fade_music();
exit();
}
}
void docksmenu()
{
setupmenu();
m.add_item("changelog", "changelog");
m.add_item("credits", "credits");
m.add_item("readme", "readme");
m.add_item("todo_list", "todo_list");
m.add_item("back", "back");
m.intro_text = "User guides menu. You can access help guides and other resources explaining how the game works here.";
int mres=m.run();
string dnm=m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
if(dnm=="changelog")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
dockread("docks/changelog.txt");
}
if(dnm=="credits")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
dockread("docks/credits.txt");
}
if(dnm=="readme")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
dockread("docks/readme.txt");
}
if(dnm=="todo_list")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
dockread("docks/todo_list.txt");
}
if(dnm=="back")
{
gamemenu();
}
}
void gamemenu()
{
setupmenu();
m.add_item("start game", "ty");
m.add_item("learn game sounds", "gsm");
m.add_item("read game user guides", "dm");
m.add_item("view game achievements", "ach");
m.add_item("view game statistics", "stats");
m.add_item("Clear game progresses.", "cgr");
if(statscopy==true) m.add_item("Copy all game progresses to clipboard", "cys");
if(statscopy==true) m.add_item("Export all game progresses to file", "cys2");
m.add_item("back", "back");
m.intro_text = "Game menu. You can start a new game session, learn about important sounds, view achievements, or check your stats here.";
int mres=m.run();
string gamem = m.get_selected_item_id();
if(mres==-1)
{
mainmenu();
}
if (gamem == "ty")
{
    setupmenu(false);
m.add_item("Easy. This mode lets you complete objectives and defeat the boss, and find the unlockable door to win. Great for structured gameplay.", "normal");
m.add_item("Endless. This mode lets you play for as long as you can survive. The game will get harder over time with no final boss, and just one unlockable door to win. This mode will also include health potions that drop from time to time for use durring intense guard fights.", "endless");
    m.add_item("Back", "back");
    m.intro_text = "Choose how you want to play the game.";
    int gres = m.run();
    string mode = m.get_selected_item_id();
    if (mode == "back" or gres == -1)
    {
        gamemenu();
    }
    endless = (mode == "endless");
    if (speak_menu_loading) speak(endless ? "loading endless mode" : "loading easy mode");
    m.fade_music();
    dlgplay("gamelaunch.ogg");
    level = 1;
    collected_toys = 0;
    collected_keys = 0;
    killed_gards = 0;
    destroyed_cars = 0;
    moved_steps = 0;
    session_playtime = 0;
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
            achievements[i].currentTier = 0;
    }
    gametimer.restart();
    health = endless ? 10000 : 1000;
maxhealth = endless ? 10000 : 1000;
if(endless) clear_inv();
    me.x = 25;
    me.y = 25;
toynum=20;
    bossdefeated = false;
    bossespawn = false;
    carspawn = false;
    gardspawn = false;
    keydest = false;
    keyspawn = false;
    objdest = false;
    objspawn = false;
    toydest = false;
    toyspawn = true;
    toygame();
}
if (gamem == "gsm")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
learnsoundsmenu();
}
if (gamem == "dm")
{
docksmenu();
}
if (gamem == "ach")
{
achesmenu();
}
if (gamem == "stats")
{
statsmenu();
}
if (gamem == "cgr")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
m.intro_text="Are you sure you want to reset all of your game progresses?";
int mres=m.run();
string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
        gamemenu();
    }
if(confirm=="yes")
{
if(file_exists("data/saves/game.tmg")) file_delete("data/saves/game.tmg");
resetgame();
dlgmessage_return("Game progresses cleared.");
gamemenu();
}
}
if (gamem == "cys")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    string result = "";
    result += "Session Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
        {
            result += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    result += "\r\nLifetime Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (!achievements[i].isSessionBased)
        {
            result += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    result += "\r\n";
    int session_minutes = int(session_playtime / 60000);
    int session_seconds = int((session_playtime % 60000) / 1000);
    result += "Session Stats:\r\n";
    result += "- Toys collected: " + collected_toys + "\r\n";
    result += "- Keys collected: " + collected_keys + "\r\n";
    result += "- Guards killed: " + killed_gards + "\r\n";
    result += "- Cars destroyed: " + destroyed_cars + "\r\n";
    result += "- Steps taken: " + moved_steps + "\r\n";
    result += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
    int total_minutes = int(total_playtime / 60000);
    int total_seconds = int((total_playtime % 60000) / 1000);
    result += "Lifetime Stats:\r\n";
    result += "- Last Played Date: " + last_played_date + "\r\n";
    result += "- Last Played Time: " + last_played_time + "\r\n";
    result += "- Toys collected: " + total_collected_toys + "\r\n";
    result += "- Keys collected: " + total_collected_keys + "\r\n";
    result += "- Guards killed: " + total_killed_gards + "\r\n";
    result += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
    result += "- Steps taken: " + total_moved_steps + "\r\n";
    result += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n\r\n";
    result += "Player Titles:\r\n";
    result += "- Toy Title: " + get_toy_rank() + ". " + get_toy_rank_desc() + "\r\n";
    result += "- Key Title: " + get_key_rank() + ". " + get_key_rank_desc() + "\r\n";
    result += "- Guard Title: " + get_guard_rank() + ". " + get_guard_rank_desc() + "\r\n";
    result += "- Car Title: " + get_car_rank() + ". " + get_car_rank_desc() + "\r\n";
    result += "- Steps Title: " + get_steps_rank() + ". " + get_steps_rank_desc() + "\r\n";
    result += "- Playtime Title: " + get_playtime_rank() + ". " + get_playtime_rank_desc() + "\r\n";
    clipboard_copy_text(result);
if(copexpsounds==true) dlgplay("gamecopy.ogg" ,false);
    dlgmessage_return("All game progresses have been copied to your clipboard.");
    gamemenu();
}
if (gamem == "cys2")
{
if (speak_menu_loading) speak("loading");
m.fade_music();
gamfile.open("data/stats/player_progresses.txt", "w");
string result = "";
result += "Session Achievements:\r\n";
for (uint i = 0; i < achievements.length(); i++)
{
if (achievements[i].isSessionBased)
result += "- " + achievements[i].get_progress_status() + "\r\n";
}
result += "\r\nLifetime Achievements:\r\n";
for (uint i = 0; i < achievements.length(); i++)
{
if (!achievements[i].isSessionBased)
result += "- " + achievements[i].get_progress_status() + "\r\n";
}
result += "\r\n";
int session_minutes = int(session_playtime / 60000);
int session_seconds = int((session_playtime % 60000) / 1000);
result += "Session Stats:\r\n";
result += "- Toys collected: " + collected_toys + "\r\n";
result += "- Keys collected: " + collected_keys + "\r\n";
result += "- Guards killed: " + killed_gards + "\r\n";
result += "- Cars destroyed: " + destroyed_cars + "\r\n";
result += "- Steps taken: " + moved_steps + "\r\n";
result += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
int total_minutes = int(total_playtime / 60000);
int total_seconds = int((total_playtime % 60000) / 1000);
result += "Lifetime Stats:\r\n";
result += "- Last Played Date: " + last_played_date + "\r\n";
result += "- Last Played Time: " + last_played_time + "\r\n";
result += "- Toys collected: " + total_collected_toys + "\r\n";
result += "- Keys collected: " + total_collected_keys + "\r\n";
result += "- Guards killed: " + total_killed_gards + "\r\n";
result += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
result += "- Steps taken: " + total_moved_steps + "\r\n";
result += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n\r\n";
result += "Player Titles:\r\n";
result += "- Toy Title: " + get_toy_rank() + ". " + get_toy_rank_desc() + "\r\n";
result += "- Key Title: " + get_key_rank() + ". " + get_key_rank_desc() + "\r\n";
result += "- Guard Title: " + get_guard_rank() + ". " + get_guard_rank_desc() + "\r\n";
result += "- Car Title: " + get_car_rank() + ". " + get_car_rank_desc() + "\r\n";
result += "- Steps Title: " + get_steps_rank() + ". " + get_steps_rank_desc() + "\r\n";
result += "- Playtime Title: " + get_playtime_rank() + ". " + get_playtime_rank_desc() + "\r\n";
gamfile.write(result);
gamfile.close();
if(copexpsounds==true) dlgplay("gamexport.ogg",false);
dlgmessage_return("All game progresses have been exported to data/stats/player_progresses.txt.");
gamemenu();
}
if (gamem == "back")
{
mainmenu();
}
}
void learnsoundsmenu()
{
dictionary learnCategories;
string vdesc = variant_descriptions ? ". This sound has multiple variants." : "";
dictionary boss;
boss["Alert"] = "bossalert.ogg";
boss["Death"] = "bossdeath.ogg";
boss["Fall" + vdesc] = array<string> = {"bossfall1.wav", "bossfall2.wav"};
boss["Heal" + vdesc] = array<string> = {"bossheal1.ogg", "bossheal2.ogg", "bossheal3.ogg"};
boss["Hit" + vdesc] = array<string> = {"bosshit1.ogg", "bosshit2.ogg"};
boss["Launch"] = "bosslaunch.ogg";
boss["Pain"] = "bosspain.ogg";
boss["Taunt"] = "bosstaunt.ogg";
boss["Teleport" + vdesc] = array<string> = {"bosstel1.ogg", "bosstel2.ogg"};
boss["Walk" + vdesc] = array<string> = {"bosswalk1.ogg", "bosswalk2.ogg", "bosswalk3.ogg", "bosswalk4.ogg"};
learnCategories["Boss"] = boss;
dictionary cars;
cars["Car 1 Death"] = "car1death.ogg";
cars["Car 1 Loop"] = "car1loop.ogg";
cars["Car 1 Pain"] = "car1pain.ogg";
cars["Car 1 Shoot"] = "car1shoot.ogg";
cars["Car 2 Death"] = "car2death.ogg";
cars["Car 2 Loop"] = "car2loop.ogg";
cars["Car 2 Pain"] = "car2pain.ogg";
cars["Car 2 Shoot"] = "car2shoot.ogg";
cars["Car 3 Death"] = "car3death.ogg";
cars["Car 3 Loop"] = "car3loop.ogg";
cars["Car 3 Pain"] = "car3pain.ogg";
cars["Car 3 Shoot"] = "car3shoot.ogg";
learnCategories["Cars"] = cars;
dictionary doors;
doors["Close"] = "doorclose.ogg";
doors["Loop"] = "doorloop.ogg";
doors["Move"] = "doormove.ogg";
doors["Open"] = "dooropen.ogg";
learnCategories["Doors"] = doors;
dictionary guards;
guards["Guard 1 Death"] = "gard1death.ogg";
guards["Guard 1 Fall" + vdesc] = array<string> = {"gard1fall1.wav", "gard1fall2.wav", "gard1fall3.wav", "gard1fall4.wav", "gard1fall5.wav"};
guards["Guard 1 Hit" + vdesc] = array<string> = {"gard1hit1.ogg", "gard1hit2.ogg", "gard1hit3.ogg"};
guards["Guard 1 Pain" + vdesc] = array<string> = {"gard1pain1.ogg", "gard1pain2.ogg", "gard1pain3.ogg", "gard1pain4.ogg", "gard1pain5.ogg"};
guards["Guard 1 Taunt" + vdesc] = array<string> = {"gard1taunt1.ogg", "gard1taunt2.ogg"};
guards["Guard 1 Walk" + vdesc] = array<string> = {"gard1walk1.ogg", "gard1walk2.ogg", "gard1walk3.ogg", "gard1walk4.ogg", "gard1walk5.ogg"};
guards["Guard 2 Death"] = "gard2death.ogg";
guards["Guard 2 Fall" + vdesc] = array<string> = {"gard2fall1.wav", "gard2fall2.wav"};
guards["Guard 2 Hit" + vdesc] = array<string> = {"gard2hit1.ogg", "gard2hit2.ogg", "gard2hit3.ogg"};
guards["Guard 2 Pain"] = "gard2pain.ogg";
guards["Guard 2 Taunt"] = "gard2taunt.ogg";
guards["Guard 2 Walk" + vdesc] = array<string> = {"gard2walk1.ogg", "gard2walk2.ogg", "gard2walk3.ogg", "gard2walk4.ogg", "gard2walk5.ogg", "gard2walk6.ogg", "gard2walk7.ogg", "gard2walk8.ogg"};
learnCategories["Guards"] = guards;
dictionary items;
items["Break" + vdesc] = array<string> = {"itembreak1.ogg", "itembreak2.ogg", "itembreak3.ogg", "itembreak4.ogg", "itembreak5.ogg", "itembreak6.ogg"};
items["Cycle inventory" + vdesc] = array<string> = {"invcycle1.ogg", "invcycle2.ogg", "invcycle3.ogg", "invcycle4.ogg", "invcycle5.ogg", "invcycle6.ogg"};
items["Drink potion"] = "potionuse.ogg";
items["Get"] = "itemget.ogg";
items["Loop"] = "itemloop.ogg";
items["Spawn"] = "itemspawn.ogg";
learnCategories["Items"] = items;
dictionary keys;
keys["Break" + vdesc] = array<string> = {"keybreak1.ogg", "keybreak2.ogg", "keybreak3.ogg", "keybreak4.ogg", "keybreak5.ogg", "keybreak6.ogg"};
keys["Get" + vdesc] = array<string> = {"keyget1.ogg", "keyget2.ogg", "keyget3.ogg", "keyget4.ogg", "keyget5.ogg", "keyget6.ogg"};
keys["Loop" + vdesc] = array<string> = {"keyloop1.ogg", "keyloop2.ogg", "keyloop3.ogg", "keyloop4.ogg"};
keys["Spawn" + vdesc] = array<string> = {"keyspawn1.ogg", "keyspawn2.ogg", "keyspawn3.ogg", "keyspawn4.ogg", "keyspawn5.ogg", "keyspawn6.ogg", "keyspawn7.ogg", "keyspawn8.ogg"};
keys["Use" + vdesc] = array<string> = {"keyuse1.ogg", "keyuse2.ogg", "keyuse3.ogg", "keyuse4.ogg", "keyuse5.ogg", "keyuse6.ogg"};
learnCategories["Keys"] = keys;
dictionary player;
player["Alarm"] = "gamealarm.ogg";
player["Death"] = "playerdeath.ogg";
player["Explode"] = "gamedeath.ogg";
player["Fall"] = "playerfall.ogg";
player["Heart start"] = "heartstart.ogg";
player["Heart stop"] = "heartstop.ogg";
player["Heal" + vdesc] = array<string> = {"playerheal1.ogg", "playerheal2.ogg", "playerheal3.ogg"};
player["Land"] = "playerland.ogg";
player["Launch"] = "gamelaunch.ogg";
player["Level up"] = "playerlevel.ogg";
player["Life achievement"] = "life_achievement.ogg";
player["Pain"] = "playerpain.ogg";
player["Purchase: unused" + vdesc] = array<string> = {"playerbuy1.ogg", "playerbuy2.ogg", "playerbuy3.ogg", "playerbuy4.ogg"};
player["Session achievement"] = "session_achievement.ogg";
player["Teleport"] = "playertel.ogg";
player["Walk" + vdesc] = array<string> = {"playerstep1.ogg", "playerstep2.ogg", "playerstep3.ogg", "playerstep4.ogg", "playerstep5.ogg"};
learnCategories["Player"] = player;
dictionary toys;
toys["Break" + vdesc] = array<string> = {"toybreak1.ogg", "toybreak2.ogg", "toybreak3.ogg"};
toys["Get" + vdesc] = array<string> = {"toyget1.ogg", "toyget2.ogg"};
string[] toyloop;
for (int i = 1; i <= 40; i++) toyloop.insert_last("toyloop" + i + ".ogg");
toys["Loop" + vdesc] = toyloop;
learnCategories["Toys"] = toys;
dictionary ui;
ui["Dialog close"] = "dlgclose.ogg";
ui["Dialog copy"] = "dlgcoppy.ogg";
ui["Dialog open"] = "dlgopen.ogg";
ui["Dialog scrol"] = "dlgscroll.ogg";
ui["Disable Setting"] = "setdisabled.ogg";
ui["Enable Setting"] = "setenabled.ogg";
ui["Menu click"] = "menuclick.ogg";
ui["Menu close"] = "menuclose.ogg";
ui["Menu edge"] = "menuedge.ogg";
ui["Menu enter"] = "menuenter.ogg";
ui["Menu open"] = "menuopen.ogg";
ui["Menu wrap"] = "menuwrap.ogg";
ui["Pause Game"] = "pause.ogg";
ui["Resume Game"] = "resume.ogg";
ui["Stats copy"] = "gamecopy.ogg";
ui["Stats export"] = "gamexport.ogg";
learnCategories["UI"] = ui;
dictionary weapons;
weapons["Bat Draw"] = "batdraw.ogg";
weapons["Bat Fire" + vdesc] = array<string> = {"batfire1.ogg", "batfire2.ogg", "batfire3.ogg"};
weapons["Bat Hit" + vdesc] = array<string> = {"bathit1.ogg", "bathit2.ogg", "bathit3.ogg"};
weapons["Boot Draw"] = "bootdraw.ogg";
weapons["Boot Fire" + vdesc] = array<string> = {"bootfire1.ogg", "bootfire2.ogg", "bootfire3.ogg"};
weapons["Boot Hit" + vdesc] = array<string> = {"boothit1.ogg", "boothit2.ogg", "boothit3.ogg"};
weapons["Club Draw"] = "clubdraw.ogg";
weapons["Club Fire" + vdesc] = array<string> = {"clubfire1.ogg", "clubfire2.ogg", "clubfire3.ogg"};
weapons["Club Hit" + vdesc] = array<string> = {"clubhit1.ogg", "clubhit2.ogg", "clubhit3.ogg"};
weapons["Feat Draw"] = "featdraw.ogg";
weapons["Feat Fire" + vdesc] = array<string> = {"featfire1.ogg", "featfire2.ogg", "featfire3.ogg"};
weapons["Feat Hit" + vdesc] = array<string> = {"feathit1.ogg", "feathit2.ogg", "feathit3.ogg"};
weapons["Fist Draw"] = "fistdraw.ogg";
weapons["Fist Fire" + vdesc] = array<string> = {"fistfire1.ogg", "fistfire2.ogg"};
weapons["Fist Hit" + vdesc] = array<string> = {"fisthit1.ogg", "fisthit2.ogg", "fisthit3.ogg"};
weapons["Hammer Draw"] = "hammerdraw.ogg";
weapons["Hammer Fire" + vdesc] = array<string> = {"hammerfire1.ogg", "hammerfire2.ogg", "hammerfire3.ogg"};
weapons["Hammer Hit" + vdesc] = array<string> = {"hammerhit1.ogg", "hammerhit2.ogg", "hammerhit3.ogg"};
weapons["Knife Draw"] = "knifedraw.ogg";
weapons["Knife Fire" + vdesc] = array<string> = {"knifefire1.ogg", "knifefire2.ogg", "knifefire3.ogg"};
weapons["Knife Hit" + vdesc] = array<string> = {"knifehit1.ogg", "knifehit2.ogg", "knifehit3.ogg"};
weapons["Laser Draw"] = "laserdraw.ogg";
weapons["Laser Fire"] = "laserfire.ogg";
weapons["Laser Hit"] = "laserhit.ogg";
weapons["Machine Gun Draw"] = "machinegundraw.ogg";
weapons["Machine Gun Empty"] = "machinegunempty.ogg";
weapons["Machine Gun Fire"] = "machinegunfire.ogg";
weapons["Machine Gun Hit"] = "machinegunhit.ogg";
weapons["Machine Gun Shell" + vdesc] = array<string> = {"machinegunshell1.ogg", "machinegunshell2.ogg", "machinegunshell3.ogg", "machinegunshell4.ogg"};
weapons["Machine Gun Reload"] = "machinegunreload.ogg";
learnCategories["Weapons"] = weapons;
string[] sortedKeys = learnCategories.get_keys();
sortedKeys.sort_ascending();
setupmenu(false);
m.intro_text = "Learn game sounds menu. You can preview the most important sounds used by the game here. This menu is organized by sound category for easier viewing.";
for (uint i = 0; i < sortedKeys.length(); i++)
{
string key = sortedKeys[i];
dictionary@ cat = cast<dictionary@>(learnCategories[key]);
if (cat is null) continue;
uint count = 0;
array<string> subkeys = cat.get_keys();
for (uint j = 0; j < subkeys.length(); j++)
{
if (cat.exists(subkeys[j]))
{
    string[]@ arr = cast<string[]@>(cat[subkeys[j]]);
    if (arr !is null)
    {
        count += arr.length();
    }
    else
    {
        string dummy;
        if (cat.get(subkeys[j], dummy))
            count += 1;
    }
}
}
m.add_item(key + ": This category has a total of " + count + " sound" + (count == 1 ? "" : "s"), key);
}
m.add_item("Back", "back");
int res = m.run();
string sel = m.get_selected_item_id();
if (res == -1 or sel == "back")
{
gamemenu();
}
if (learnCategories.exists(sel))
{
m.intro_text = sel + " menu. Press the up or down arrow keys to navigate the list, and enter to play one.";
learn_game_sounds_menu(cast<dictionary@>(learnCategories[sel]), "", m);
}
}
void pausemenu()
{
    setupmenu(false);
        m.add_item("Copy level and game mode to clipboard", "clg");
        m.add_item("Read current game session statistics", "rs");
        m.add_item("Quit game", "qmg");
        m.add_item("Resume game", "rmg");
m.add_item("view detailed stats", "vds");
    m.intro_text = "Pause menu.";
    int mres = m.run();
    string psmem = m.get_selected_item_id();
if (mres == -1)
{
    temp.play_stationary("resume.ogg", false);
    resume_game();
    return;
}
        if (psmem == "clg")
{
            string mode = endless ? "Endless" : "Normal";
            string info = "Current Level: " + level + "\r\nGame Mode: " + mode;
            clipboard_copy_text(info);
            if (copexpsounds==true) dlgplay("gamecopy.ogg", false);
            dlgmessage_return("Your current level and game mode has been copied to the clipboard.");
            pausemenu();
return;
        }
        if (psmem == "rs")
{
            string statsummary = "";
            statsummary += "Session Stats:\r\n";
            statsummary += "- Toys collected: " + collected_toys + "\r\n";
            statsummary += "- Keys collected: " + collected_keys + "\r\n";
            statsummary += "- Guards killed: " + killed_gards + "\r\n";
            statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
            statsummary += "- Steps taken: " + moved_steps + "\r\n";
int session_minutes = int(timeelapsed.ms() / 60000);
int session_seconds = int((timeelapsed.ms() % 60000) / 1000);
            statsummary += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds\r\n";
            dlgmessage_return(statsummary);
if (gamcopy == true)
{
    setupmenu(false);
    m.add_item("Copy results to clipboard", "copy");
    m.add_item("Export results to file", "export");
    m.add_item("Cancel", "cancel");
    m.intro_text = "What would you like to do with the current results for this game session?";
    int r = m.run();
    string resp = m.get_selected_item_id();
    if (r != -1)
    {
        if (resp == "copy")
        {
            clipboard_copy_text(statsummary);
            if (copexpsounds == true) dlgplay("gamecopy.ogg", false);
            dlgmessage_return("All game session results copied to your clipboard.");
        }
        else if (resp == "export")
        {
            file postfile;
            postfile.open("data/stats/player_posts.txt", "w");
            postfile.write(statsummary);
            postfile.close();
            if (copexpsounds == true) dlgplay("gamexport.ogg", false);
            dlgmessage_return("All game session results exported to data/stats/player_posts.txt.");
        }
    }
}
            pausemenu();
return;
        }
        if (psmem == "qmg")
{
            if (quit_menu==true)
{
                setupmenu(false);
                m.add_item("Yes", "yes");
                m.add_item("No", "no");
                m.intro_text = "Are you sure you want to quit the game? You will lose all progress for this current game session.";
                int confirmres = m.run();
                string confirm = m.get_selected_item_id();
                if (confirmres == -1 || confirm == "no")
{
                    pausemenu();
return;
                }
            }
            resume_game();
            fade_multi_pool();
            level = 1;
            collected_toys = 0;
            collected_keys = 0;
            killed_gards = 0;
            destroyed_cars = 0;
            moved_steps = 0;
            session_playtime = 0;
            for (uint i = 0; i < achievements.length(); i++)
{
                if (achievements[i].isSessionBased)
                    achievements[i].currentTier = 0;
            }
            if (endless) clear_inv();
            if (!endless) destroy_all_bosses();
destroy_all_bullets();
            destroy_all_cars();
            destroy_all_gards();
            destroy_all_doors();
            destroy_all_keys();
            destroy_all_toys();
            gametimer.restart();
    health = endless ? 10000 : 1000;
maxhealth = endless ? 10000 : 1000;
    me.x = 25;
    me.y = 25;
            toynum = 20;
            if (!endless) bossdefeated = false;
            if (!endless) bossespawn = false;
alarm_started = false;
            carspawn = false;
            gardspawn = false;
            keydest = false;
            keyspawn = false;
            objdest = false;
            objspawn = false;
            toydest = false;
            toyspawn = false;
            mainmenu();
            return;
        }
        if (psmem == "rmg")
{
            temp.play_stationary("resume.ogg", false);
            resume_game();
            return;
        }
if(psmem == "vds")
{
    setupmenu(false);
    m.add_item("Current HP: " + health);
    m.add_item("Current level: " + level + " (" + (endless ? "Endless Mode" : "Normal Mode") + ")");
    m.add_item("Current location: " + me.x + ", " + me.y);
    m.add_item("Cars on field: " + cars.length());
    m.add_item("Guards on field: " + gards.length());
    m.add_item("Keys on field: " + keys.length());
    m.add_item("Toys on field: " + toys.length());
    m.add_item("Cars destroyed: " + destroyed_cars);
    m.add_item("Guards defeated: " + killed_gards);
    m.add_item("Keys collected: " + collected_keys);
    m.add_item("Steps taken: " + moved_steps);
    m.add_item("Toys collected: " + collected_toys);
    int session_minutes = int(timeelapsed.ms() / 60000);
    int session_seconds = int((timeelapsed.ms() % 60000) / 1000);
    m.add_item("Total time played: " + session_minutes + " minutes, " + session_seconds + " seconds");
m.add_item("back", "back");
m.intro_text = "Detailed stats menu.";
    int vres = m.run();
    string psmem2 = m.get_selected_item_id();
if (vres == -1 || m.get_selected_item_id() == "")
{
pausemenu();
    return;
}
        if (psmem2 == "back")
{
pausemenu();
            return;
        }
}
    }
void weaponsmenu()
{
    setupmenu(false);
    string[] weaponNames = {"Bat", "Boot", "Club", "Feat", "Fist", "Hammer", "Knife", "Laser"};
    string[] weaponIds   = {"bat", "boot", "club", "feat", "fist", "hammer", "knife", "laser"};
    int[] damages        = {3, 6, 9, 12, 15, 18, 21, 24};
    int[] horizRanges    = {1, 2, 3, 4, 5, 6, 7, 8};
    int[] vertRanges     = {2, 3, 4, 5, 6, 7, 8, 9};
    if (endless)
    {
        weaponNames.insert_last("Machine Gun");
        weaponIds.insert_last("machinegun");
        damages.insert_last(27);
        horizRanges.insert_last(9);
        vertRanges.insert_last(10);
    }
    for (uint i = 0; i < weaponNames.length(); i++)
    {
        string label = weaponNames[i] + ": Attack " + damages[i] + ". Horizontal range " + horizRanges[i] + ". Vertical range " + vertRanges[i]+".";
        if (weaponIds[i] == current_weapon)
            label += " (Equipped)";
        m.add_item(label, weaponIds[i]);
    }
    m.intro_text = "Weapons menu.";
    int res = m.run();
    string selected = m.get_selected_item_id();
    if (res == -1)
    {
        gametimer.resume();
speak("canceled");
        return;
    }
    if (selected != current_weapon)
    {
gametimer.resume();
        draw_weapon(selected);
            return;
}
    else
    {
        speak("This weapon is already equipped.");
    }
    gametimer.resume();
        return;
}
void achesmenu()
{
setupmenu();
    m.add_item("Session Achievements", "session");
    m.add_item("Lifetime Achievements", "lifetime");
m.add_item("Clear game achievements.", "chm");
if(statscopy==true) m.add_item("Copy all game Achievements to clipboard.", "cys");
if(statscopy==true) m.add_item("Export all game achievements to file", "cys2");
    m.add_item("back", "back");
m.intro_text = "Achievements menu. You can view your unlocked session and lifetime achievements, or clear or copy all of your achievements here.";
int mres=m.run();
string achm = m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
       if (achm == "session")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        show_session_achievements();
    }
if (achm == "lifetime")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        show_lifetime_achievements();
}
if (achm == "chm") 
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    setupmenu(false);
    m.add_item("Session achievements", "session");
    m.add_item("Lifetime achievements", "lifetime");
    m.add_item("Session and lifetime achievements", "both");
    m.add_item("Back", "back");
m.intro_text = "Choose which game achievements to clear. This will clear your game statistics.";
    int mres = m.run();
    string achmode = m.get_selected_item_id();
    if (mres == -1 or achmode == "back")
    {
        achesmenu();
    }
    setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
    m.intro_text = "Are you sure you want to reset your " + (achmode == "session" ? "session" : achmode == "lifetime" ? "lifetime" : "session and lifetime") + " achievements? This action can't be undone.";
    mres = m.run();
    string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
        achesmenu();
    }
    for (uint i = 0; i < achievements.length(); i++)
    {
        if ((achmode == "session" and achievements[i].isSessionBased) or (achmode == "lifetime" and !achievements[i].isSessionBased) or (achmode == "both"))
        {
            achievements[i].currentTier = 0;
        }
    }
    if (achmode == "session" or achmode == "both")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        moved_steps = 0;
        session_playtime = 0;
    }
    if (achmode == "lifetime" or achmode == "both")
    {
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_moved_steps = 0;
        total_playtime = 0;
    }
    writedata();
string modeLabel = (achmode == "session") ? "session" : (achmode == "lifetime") ? "lifetime" : "session and lifetime";
dlgmessage_return("Your " + modeLabel + " achievements have been cleared.");
    achesmenu();
}
if (achm == "cys")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    string achievementSummary = "Session Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
        {
            achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    achievementSummary += "\r\nLifetime Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (!achievements[i].isSessionBased)
        {
            achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    clipboard_copy_text(achievementSummary);
if(copexpsounds==true) dlgplay("gamecopy.ogg" ,false);
    dlgmessage_return("All game achievements have been copied to your clipboard.");
    achesmenu();
}
if (achm == "cys2")
{
if (speak_menu_loading) speak("loading");
m.fade_music();
achfile.open("data/stats/player_achievements.txt", "w");
string achievementSummary = "Session Achievements:\r\n";
for (uint i = 0; i < achievements.length(); i++)
{
if (achievements[i].isSessionBased)
achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
}
achievementSummary += "\r\nLifetime Achievements:\r\n";
for (uint i = 0; i < achievements.length(); i++)
{
if (!achievements[i].isSessionBased)
achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
}
achfile.write(achievementSummary);
achfile.close();
if(copexpsounds==true) dlgplay("gamexport.ogg",false);
dlgmessage_return("All game achievements have been exported to data/stats/player_achievements.txt.");
achesmenu();
}
if (achm == "back")
{
gamemenu();
}
}
void show_session_achievements()
{
    setupmenu(false);
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
            m.add_item(achievements[i].get_progress_status(), "");
    }
    m.add_item("Back", "back");
m.intro_text = "Session Achievements menu. These achievements reset every run and track short-term progress.";
    int r = m.run();
    if (r == -1 or m.get_selected_item_id() == "back")
        achesmenu();
    else
        show_session_achievements();
}
void show_lifetime_achievements()
{
    setupmenu(false);
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (!achievements[i].isSessionBased)
            m.add_item(achievements[i].get_progress_status(), "");
    }
    m.add_item("Back", "back");
m.intro_text = "Lifetime Achievements menu. These achievements track your long-term overall game progress.";
    int r = m.run();
    if (r == -1 or m.get_selected_item_id() == "back")
        achesmenu();
    else
        show_lifetime_achievements();
}
void statsmenu()
{
setupmenu();
    m.add_item("Session Statistics", "session");
    m.add_item("Lifetime Statistics", "lifetime");
m.add_item("Player Titles", "titles");
m.add_item("Clear game statistics.", "gs");
if(statscopy==true) m.add_item("Copy all game statistics to clipboard.", "cys");
if(statscopy==true) m.add_item("Export all game statistics to file", "cys2");
    m.add_item("back", "back");
m.intro_text = "Statistics menu. You can check your gameplay stats and unlockable player titles, or clear or copy all of your stats here.";
int mres=m.run();
string statsm = m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
       if (statsm == "session")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        view_session_stats();
    }
if (statsm == "lifetime")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        view_lifetime_stats();
}
if (statsm == "titles")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    view_player_titles();
}
if (statsm == "gs")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    setupmenu(false);
    m.add_item("session stats", "session");
    m.add_item("lifetime stats", "lifetime");
    m.add_item("session and lifetime stats", "both");
    m.add_item("Back", "back");
m.intro_text = "Choose which game statistics to clear. This will not clear your game achievements.";
    int mres = m.run();
    string gsm = m.get_selected_item_id();
    if (mres == -1 or gsm == "back")
    {
        statsmenu();
    }
    setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
    m.intro_text = "Are you sure you want to clear " + (gsm == "session" ? "your session stats" : gsm == "lifetime" ? "your lifetime stats" : "your session and lifetime stats") + "? This action can't be undone.";
    mres = m.run();
    string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
statsmenu();
    }
    if (gsm == "session")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        moved_steps = 0;
session_playtime = 0;
writedata();
        dlgmessage_return("Your session stats have been cleared.");
    }
    if (gsm == "lifetime")
    {
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_moved_steps = 0;
        total_playtime = 0;
        writedata();
        dlgmessage_return("Your lifetime stats have been cleared.");
    }
    if (gsm == "both")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        moved_steps = 0;
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_moved_steps = 0;
        total_playtime = 0;
        writedata();
        dlgmessage_return("Your session and lifetime stats have been cleared.");
    }
    statsmenu();
}
if (statsm == "cys")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
int session_minutes = int(session_playtime / 60000);
int session_seconds = int((session_playtime % 60000) / 1000);
int total_minutes = int(total_playtime / 60000);
int total_seconds = int((total_playtime % 60000) / 1000);
string statsummary = "";
statsummary += "Session Stats:\r\n";
statsummary += "- Toys collected: " + collected_toys + "\r\n";
statsummary += "- Keys collected: " + collected_keys + "\r\n";
statsummary += "- Guards killed: " + killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + moved_steps + "\r\n";
statsummary += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
statsummary += "Lifetime Stats:\r\n";
statsummary += "- Last Played Date: " + last_played_date + "\r\n";
statsummary += "- Last Played Time: " + last_played_time + "\r\n";
statsummary += "- Toys collected: " + total_collected_toys + "\r\n";
statsummary += "- Keys collected: " + total_collected_keys + "\r\n";
statsummary += "- Guards killed: " + total_killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + total_moved_steps + "\r\n";
statsummary += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n\r\n";
statsummary += "Player Titles:\r\n";
statsummary += "- Toy Title: " + get_toy_rank() + ". " + get_toy_rank_desc() + "\r\n";
statsummary += "- Key Title: " + get_key_rank() + ". " + get_key_rank_desc() + "\r\n";
statsummary += "- Guard Title: " + get_guard_rank() + ". " + get_guard_rank_desc() + "\r\n";
statsummary += "- Car Title: " + get_car_rank() + ". " + get_car_rank_desc() + "\r\n";
statsummary += "- Steps Title: " + get_steps_rank() + ". " + get_steps_rank_desc() + "\r\n";
statsummary += "- Playtime Title: " + get_playtime_rank() + ". " + get_playtime_rank_desc() + "\r\n";
    clipboard_copy_text(statsummary);
if(copexpsounds==true) dlgplay("gamecopy.ogg" ,false);
    dlgmessage_return("All game statistics have been copied to your clipboard.");
    statsmenu();
}
if (statsm == "cys2")
{
if (speak_menu_loading) speak("loading");
m.fade_music();
statfile.open("data/stats/player_statistics.txt", "w");
int session_minutes = int(session_playtime / 60000);
int session_seconds = int((session_playtime % 60000) / 1000);
int total_minutes = int(total_playtime / 60000);
int total_seconds = int((total_playtime % 60000) / 1000);
string statsummary = "";
statsummary += "Session Stats:\r\n";
statsummary += "- Toys collected: " + collected_toys + "\r\n";
statsummary += "- Keys collected: " + collected_keys + "\r\n";
statsummary += "- Guards killed: " + killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + moved_steps + "\r\n";
statsummary += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
statsummary += "Lifetime Stats:\r\n";
statsummary += "- Last Played Date: " + last_played_date + "\r\n";
statsummary += "- Last Played Time: " + last_played_time + "\r\n";
statsummary += "- Toys collected: " + total_collected_toys + "\r\n";
statsummary += "- Keys collected: " + total_collected_keys + "\r\n";
statsummary += "- Guards killed: " + total_killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + total_moved_steps + "\r\n";
statsummary += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n\r\n";
statsummary += "Player Titles:\r\n";
statsummary += "- Toy Title: " + get_toy_rank() + ". " + get_toy_rank_desc() + "\r\n";
statsummary += "- Key Title: " + get_key_rank() + ". " + get_key_rank_desc() + "\r\n";
statsummary += "- Guard Title: " + get_guard_rank() + ". " + get_guard_rank_desc() + "\r\n";
statsummary += "- Car Title: " + get_car_rank() + ". " + get_car_rank_desc() + "\r\n";
statsummary += "- Steps Title: " + get_steps_rank() + ". " + get_steps_rank_desc() + "\r\n";
statsummary += "- Playtime Title: " + get_playtime_rank() + ". " + get_playtime_rank_desc() + "\r\n";
statfile.write(statsummary);
statfile.close();
if(copexpsounds==true) dlgplay("gamexport.ogg",false);
dlgmessage_return("All game statistics have been exported to data/stats/player_statistics.txt.");
statsmenu();
}
if (statsm == "back")
{
gamemenu();
}
}
void view_session_stats()
{
    setupmenu(false);
    m.add_item("You have collected " + collected_toys + " toys.", "");
    m.add_item("You have collected " + collected_keys + " keys.", "");
    m.add_item("You have killed " + killed_gards + " guards.", "");
    m.add_item("You have destroyed " + destroyed_cars + " cars.", "");
    m.add_item("You have taken " + moved_steps + " steps.", "");
int session_minutes = session_playtime / 60000;
int session_seconds = (session_playtime % 60000) / 1000;
m.add_item("You've been playing for " + session_minutes + " minutes, " + session_seconds + " seconds.", "");
    m.add_item("Back", "back");
m.intro_text = "Session Statistics menu. You can view your stats for the current game session here.";
    int mres = m.run();
    string statsm = m.get_selected_item_id();
    if (mres == -1 || statsm == "back")
{
        statsmenu();
    }
else
{
        view_session_stats();
    }
}
void view_lifetime_stats()
{
    setupmenu(false);
    m.add_item("Last Played Date: " + last_played_date, "");
    m.add_item("Last Played Time: " + last_played_time, "");
    m.add_item("You have collected a total of " + total_collected_toys + " toys.", "");
    m.add_item("You have collected a total of " + total_collected_keys + " keys.", "");
    m.add_item("You have killed a total of " + total_killed_gards + " guards.", "");
    m.add_item("You have destroyed a total of " + total_destroyed_cars + " cars.", "");
    m.add_item("You have taken a total of " + total_moved_steps + " steps.", "");
    int total_minutes = int(total_playtime / 60000);
    int total_seconds = int((total_playtime % 60000) / 1000);
    m.add_item("You've been playing for a total of " + total_minutes + " minutes, " + total_seconds + " seconds.", "");
    m.add_item("Back", "back");
m.intro_text = "Lifetime Statistics menu. You can see your total stats across all of your game sessions here.";
    int mres = m.run();
    string statsm = m.get_selected_item_id();
    if (mres == -1 || statsm == "back")
{
        statsmenu();
    }
else
{
        view_lifetime_stats();
    }
}
void view_player_titles()
{
    setupmenu(false);
    m.add_item("Toy Rank: " + get_toy_rank() + ". " + get_toy_rank_desc(), "");
    m.add_item("Key Rank: " + get_key_rank() + ". " + get_key_rank_desc(), "");
    m.add_item("Guard Rank: " + get_guard_rank() + ". " + get_guard_rank_desc(), "");
    m.add_item("Car Rank: " + get_car_rank() + ". " + get_car_rank_desc(), "");
    m.add_item("Steps Rank: " + get_steps_rank() + ". " + get_steps_rank_desc(), "");
    m.add_item("Playtime Rank: " + get_playtime_rank() + ". " + get_playtime_rank_desc(), "");
    m.add_item("Back", "back");
m.intro_text = "Player titles menu. You can view your earned titles based on lifetime stats here.";
    int res = m.run();
    if (res == -1 or m.get_selected_item_id() == "back")
    {
        statsmenu();
}
    else
{
view_player_titles();
}
}
void settingsmenu()
{
setupmenu(false);
m.add_item(behind_pitch ? "Disable behind pitch decrease. This setting controls whether the pitch of sounds decrease when you are behind something." : "Enable behind pitch decrease. This setting controls whether the pitch of sounds decrease when you are behind something.", "glb");
m.add_item(hrtf ? "Disable HRTF support. This setting enhances the 3D sound positioning effect for headphone users." : "Enable HRTF support. This setting enhances the 3D sound positioning effect for headphone users.", "glh");
m.add_item(play_ach_scores ? "Disable achievement sound effects. This setting controls the sounds played when unlocking achievements." : "Enable achievement sound effects. This setting controls the sounds played when unlocking achievements.", "achsound");
m.add_item(speak_ach_scores ? "Disable achievement speech feedback. This setting controls the spoken announcements of game achievement progresses." : "Enable achievement speech feedback. This setting controls the spoken announcements of achievement progresses.", "achvoice");
m.add_item(speak_dlg_enter ? "Disable dialog end speech feedback. This setting controls whether the phrase 'Press enter to continue' is spoken after dialog messages." : "Enable dialog end speech feedback. This setting controls whether the phrase 'Press enter to continue' is spoken after dialog messages.", "dlgspeech");
m.add_item(speak_menu_loading ? "Disable menu loading speech feedback. This setting controls whether the 'Loading' phrase is spoken when opening various menus." : "Enable menu loading speech feedback. This setting controls whether the 'Loading' phrase is spoken when opening various menus.", "loadspeech");
m.add_item(gamcopy ? "Disable post-game copy and export prompts. This Setting controls weather the game asks if you'd like to copy your session stats after pause, death or victory." : "Enable post-game copy and export prompts. This Setting controls weather the game asks if you'd like to copy your session stats after pause, death or victory.", "gcp");
m.add_item(statscopy ? "Disable stat copy and export options. This setting controls the showing of all copy and export entries from various stat based menus." : "Enable stat copy and export options. This setting controls the showing of all copy and export entries from various stat based menus.", "scp");
m.add_item(loop_previews ? "Disable looping of previewed sounds. This setting controls whether the sounds found in the Learn Sounds menu loop until another sound is selected or the Escape key is pressed." : "Enable looping of previewed sounds. This setting controls whether the sounds found in the Learn Sounds menu loop until another sound is selected or the Escape key is pressed.", "lps");
m.add_item(variant_descriptions ? "Disable variant-based sound descriptions. This setting controls weather sounds that have multiple variants will include a description along side them." : "Enable variant-based sound descriptions. This setting controls weather sounds that have multiple variants will include a description along side them.", "vsc");
m.add_item(copexpsounds ? "Disable copy and export confirmation sounds. This setting controls the playing of short chimes after copying or exporting files to and from the clipboard." : "Enable copy and export confirmation sounds. This setting controls the playing of short chimes after copying or exporting files to and from the clipboard.", "cfs");
m.add_item(quit_menu ? "Disable quit confirmation prompts. This setting controls whether the game will show a prompt to quit the current game session before quitting from the Escape or pause menu." : "Enable quit confirmation prompts. This setting controls whether the game will show a prompt to quit the current game session before quitting from the Escape or pause menu.", "qcm");
m.add_item("reset settings", "rest");
m.add_item("save settings", "sv");
m.add_item("back", "back");
m.intro_text = "Settings menu. You can adjust various game options here.";
int mres=m.run();
string preffsm = m.get_selected_item_id();
if(mres==-1)
{
mainmenu();
}
if (preffsm == "glb")
{
behind_pitch = !behind_pitch;
play_toggle(behind_pitch);
apply_pitch_settings();
dlgmessage_return((behind_pitch ? "Behind pitch decrease enabled." : "Behind pitch decrease disabled."));
settingsmenu();
}
if (preffsm == "glh")
{
hrtf = !hrtf;
sound_global_hrtf = hrtf;
play_toggle(hrtf);
dlgmessage_return((hrtf ? "HRTF support enabled." : "HRTF support disabled."));
settingsmenu();
}
if (preffsm == "achsound")
{
    play_ach_scores = !play_ach_scores;
play_toggle(play_ach_scores);
dlgmessage_return((play_ach_scores ? "Achievement sound effects enabled." : "Achievement sound effects disabled."));
    settingsmenu();
}
if (preffsm == "achvoice")
{
    speak_ach_scores = !speak_ach_scores;
play_toggle(speak_ach_scores);
dlgmessage_return((speak_ach_scores ? "Achievement speech feedback enabled." : "Achievement speech feedback disabled."));
    settingsmenu();
}
if (preffsm == "dlgspeech")
{
    speak_dlg_enter = !speak_dlg_enter;
play_toggle(speak_dlg_enter);
    dlgmessage_return(speak_dlg_enter ? "Dialog end speech feedback enabled." : "Dialog end speech feedback disabled.");
    settingsmenu();
}
if (preffsm == "loadspeech")
{
    speak_menu_loading = !speak_menu_loading;
play_toggle(speak_menu_loading);
    dlgmessage_return(speak_menu_loading ? "Menu loading speech feedback enabled." : "Menu loading speech feedback disabled.");
    settingsmenu();
}
if (preffsm == "gcp")
{
gamcopy = !gamcopy;
play_toggle(gamcopy);
dlgmessage_return(gamcopy ? "Post-game copy and export prompts enabled." : "Post-game copy prompts disabled.");
settingsmenu();
}
if (preffsm == "scp")
{
statscopy = !statscopy;
play_toggle(statscopy);
dlgmessage_return(statscopy ? "Stat copy and export options enabled." : "Stat copy and export options disabled.");
settingsmenu();
}
if(preffsm == "lps")
{
loop_previews = !loop_previews;
play_toggle(loop_previews);
dlgmessage_return(loop_previews ? "Looping of previewed sounds enabled." : "Looping of previewed sounds disabled.");
settingsmenu();
}
if(preffsm == "vsc")
{
variant_descriptions = !variant_descriptions;
play_toggle(variant_descriptions);
dlgmessage_return(variant_descriptions ? "Variant based sound descriptions enabled." : "Variant based sound descriptions disabled.");
settingsmenu();
}
if (preffsm == "cfs")
{
    copexpsounds = !copexpsounds;
    play_toggle(copexpsounds);
    dlgmessage_return(copexpsounds ? "Copy and export confermation sounds enabled." : "Copy and export confermation sounds disabled.");
    settingsmenu();
}
if (preffsm == "qcm")
{
    quit_menu = !quit_menu;
    play_toggle(quit_menu);
    dlgmessage_return(quit_menu ? "Quit confirmation promptss enabled." : "Quit confirmation prompts disabled.");
    settingsmenu();
}
if (preffsm == "rest")
{
setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
m.intro_text="Are you sure you want to reset all of your settings?";
int mres=m.run();
string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
        settingsmenu();
    }
if(confirm=="yes")
{
if(file_exists("data/saves/settings.tmg")) file_delete("data/saves/settings.tmg");
resetpreffs();
dlgmessage_return("Settings reset.");
mainmenu();
}
}
if (preffsm == "sv")
{
writepreffs();
dlgmessage_return("Settings saved.");
mainmenu();
}
if (preffsm == "back")
{
mainmenu();
}
}
