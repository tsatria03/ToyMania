void mainmenu()
{
setupmenu();
m.add_item("play game", "ty");
m.add_item("view achievements", "ach");
m.add_item("view statistics", "stats");
m.add_item("change settings", "sets");
m.add_item("read documentation", "rdm");
m.add_item("exit game", "ex");
m.intro_text = "Main menu. Please choose an option with your arrow keys, then press enter to activate one.";
int mres=m.run();
string main = m.get_selected_item_id();
if(mres==-1)
{
speak("exiting");
m.fade_music();
writepreffs();
exit();
}
if (main == "ty")
{
speak("loading");
m.fade_music();
dlgplay("gamelaunch.ogg");
collected_toys = 0;
collected_keys = 0;
killed_gards = 0;
destroyed_cars = 0;
taken_steps = 0;
session_playtime = 0;
health=1000;
me.x=25;
me.y=25;
bossdefeated = false;
keydest=false;
toydest=false;
toyspawn=true;
gametimer.restart();
toygame();
}
if (main == "ach")
{
speak("loading");
m.fade_music();
show_achievements();
}
if (main == "rdm")
{
docksmenu();
}
if (main == "stats")
{
speak("loading");
m.fade_music();
statsmenu();
}
if (main == "sets")
{
speak("loading");
m.fade_music();
settingsmenu();
}
if (main == "ex")
{
speak("exiting");
m.fade_music();
writepreffs();
exit();
}
}
void docksmenu()
{
setupmenu();
m.add_item("changelog", "changelog");
m.add_item("credits", "credits");
m.add_item("readme", "readme");
if(!SCRIPT_COMPILED) m.add_item("todo_list", "todo_list");
m.add_item("back", "back");
m.intro_text="Documentation menu.";
int mres=m.run();
string dnm=m.get_selected_item_id();
if(mres==-1)
{
mainmenu();
}
if(dnm=="changelog")
{
speak("loading");
m.fade_music();
dockread("docks/changelog.txt");
}
if(dnm=="credits")
{
speak("loading");
m.fade_music();
dockread("docks/credits.txt");
}
if(dnm=="readme")
{
speak("loading");
m.fade_music();
dockread("docks/readme.txt");
}
if(dnm=="todo_list")
{
speak("loading");
m.fade_music();
dockread("docks/todo_list.txt");
}
if(dnm=="back")
{
mainmenu();
}
}
void statsmenu()
{
setupmenu(false);
    m.add_item("View Session Stats", "session");
    m.add_item("View Lifetime Stats", "lifetime");
m.add_item("Copy all game statistics to clipboard.", "cys");
    m.add_item("back", "back");
m.intro_text = "Statistics menu.";
int mres=m.run();
string statsm = m.get_selected_item_id();
if(mres==-1)
{
mainmenu();
}
       if (statsm == "session")
{
        view_session_stats();
    }
if (statsm == "lifetime")
{
        view_lifetime_stats();
}
if (statsm == "cys")
{
int session_minutes = int(session_playtime / 60000);
int session_seconds = int((session_playtime % 60000) / 1000);
int total_minutes = int(total_playtime / 60000);
int total_seconds = int((total_playtime % 60000) / 1000);
string statsummary = "";
statsummary += "Session Stats:\r\n";
statsummary += "- Toys collected: " + collected_toys + "\r\n";
statsummary += "- Keys collected: " + collected_keys + "\r\n";
statsummary += "- Guards killed: " + killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + taken_steps + "\r\n";
statsummary += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
statsummary += "Lifetime Stats:\r\n";
statsummary += "- Toys collected: " + total_collected_toys + "\r\n";
statsummary += "- Keys collected: " + total_collected_keys + "\r\n";
statsummary += "- Guards killed: " + total_killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + total_taken_steps + "\r\n";
statsummary += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.";
    clipboard_copy_text(statsummary);
    dlgmessage("All game stats have been copied to your clipboard. Press enter to continue.");
    statsmenu();
}
if (statsm == "back")
{
mainmenu();
}
else
{
statsmenu();
}
}
void view_session_stats()
{
    setupmenu(false);
    m.add_item("You have collected " + collected_toys + " toys.", "");
    m.add_item("You have collected " + collected_keys + " keys.", "");
    m.add_item("You have killed " + killed_gards + " guards.", "");
    m.add_item("You have destroyed " + destroyed_cars + " cars.", "");
    m.add_item("You have taken " + taken_steps + " steps.", "");
int session_minutes = session_playtime / 60000;
int session_seconds = (session_playtime % 60000) / 1000;
m.add_item("You've been playing for " + session_minutes + " minutes, " + session_seconds + " seconds.", "");
    m.add_item("Back", "back");
    m.intro_text = "Session Statistics.";
    int mres = m.run();
    string statsm = m.get_selected_item_id();
    if (mres == -1 || statsm == "back")
{
        statsmenu();
    }
else
{
        view_session_stats();
    }
}
void view_lifetime_stats()
{
    setupmenu(false);
    m.add_item("You have collected a total of " + total_collected_toys + " toys.", "");
    m.add_item("You have collected a total of " + total_collected_keys + " keys.", "");
    m.add_item("You have killed a total of " + total_killed_gards + " guards.", "");
    m.add_item("You have destroyed a total of " + total_destroyed_cars + " cars.", "");
    m.add_item("You have taken a total of " + total_taken_steps + " steps.", "");
    int total_minutes = int(total_playtime / 60000);
    int total_seconds = int((total_playtime % 60000) / 1000);
    m.add_item("You've been playing for a total of " + total_minutes + " minutes, " + total_seconds + " seconds.", "");
    m.add_item("Back", "back");
    m.intro_text = "Lifetime Statistics.";
    int mres = m.run();
    string statsm = m.get_selected_item_id();
    if (mres == -1 || statsm == "back")
{
        statsmenu();
    }
else
{
        view_lifetime_stats();
    }
}
void settingsmenu()
{
setupmenu(false);
m.add_item(behind_pitch ? "Disable global behind pitch decrease" : "Enable global behind pitch decrease", "glb");
m.add_item(hrtf ? "Disable global HRTF support" : "Enable global HRTF support", "glh");
m.add_item("Clear game achievements.", "chm");
m.add_item("Clear game statistics.", "gs");
m.add_item("save settings", "sv");
m.add_item("back", "back");
m.intro_text = "Settings menu.";
int mres=m.run();
string preffsm = m.get_selected_item_id();
if(mres==-1)
{
mainmenu();
}
if (preffsm == "glb")
{
behind_pitch = !behind_pitch;
dlgmessage(behind_pitch ? "Global behind pitch decrease enabled. Press enter to continue." : "Global behind pitch decrease disabled. Press enter to continue.");
settingsmenu();
}
if (preffsm == "glh")
{
hrtf = !hrtf;
sound_global_hrtf = hrtf;
dlgmessage(hrtf ? "Global hrtf support enabled. Press enter to continue." : "Global hrtf support disabled. Press enter to continue.");
settingsmenu();
}
if (preffsm == "sv")
{
writepreffs();
dlgmessage("Settings saved. Press enter to continue.");
mainmenu();
}
if (preffsm == "chm")
{
    setupmenu(false);
    m.add_item("Yes, reset only achievement tiers.", "tiers");
    m.add_item("Yes, reset achievement tiers and related game stats.", "full");
    m.add_item("No, cancel.", "cancel");
    m.intro_text = "Are you sure you want to clear all of your achievements? This action can't be undone.";
    int res = m.run();
    string result = m.get_selected_item_id();
    if (result == "tiers")
    {
        for (uint i = 0; i < achievements.length(); i++)
        {
            achievements[i].currentTier = 0;
        }
        writedata();
        dlgmessage("All achievement tiers have been reset. Your stats still remain intact. Press enter to continue.");
    }
    else if (result == "full")
    {
        for (uint i = 0; i < achievements.length(); i++)
        {
            achievements[i].currentTier = 0;
        }
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_taken_steps = 0;
        total_playtime = 0;
        writedata();
        dlgmessage("All achievements and related stats have been fully reset. Press enter to continue.");
    }
    settingsmenu();
}
if (preffsm == "gs")
{
    setupmenu(false);
    m.add_item("Clear session stats.", "session");
    m.add_item("Clear lifetime stats.", "lifetime");
    m.add_item("Clear session and lifetime stats.", "both");
    m.add_item("Back", "back");
    m.intro_text = "Choose which game stats to reset.";
    int mres = m.run();
    string gsm = m.get_selected_item_id();
    if (mres == -1 or gsm == "back")
    {
        settingsmenu();
    }
    setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
    m.intro_text = "Are you sure you want to clear " + (gsm == "session" ? "your session stats" : gsm == "lifetime" ? "your lifetime stats" : "all of your session and lifetime stats") + "? This action can't be undone.";
    mres = m.run();
    string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
settingsmenu();
    }
    if (gsm == "session")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        taken_steps = 0;
session_playtime = 0;
writedata();
        dlgmessage("Session stats cleared. Press enter to continue.");
    }
    if (gsm == "lifetime")
    {
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_taken_steps = 0;
        total_playtime = 0;
        writedata();
        dlgmessage("Lifetime stats cleared. Press enter to continue.");
    }
    if (gsm == "both")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        taken_steps = 0;
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_taken_steps = 0;
        total_playtime = 0;
        writedata();
        dlgmessage("All stats cleared. Press enter to continue.");
    }
    settingsmenu();
}
if (preffsm == "back")
{
mainmenu();
}
}
