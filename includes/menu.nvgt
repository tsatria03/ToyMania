void mainmenu()
{
setupmenu();
m.add_item("game menu", "gm");
m.add_item("settings menu", "sm");
m.add_item("check for updates", "chup");
m.add_item("test speakers", "st");
if(system_is_windows) m.add_item("restart game", "rt");
m.add_item("exit game", "ex");
m.intro_text = "Main menu. Please choose an option with your arrow keys, then press enter to activate one.";
int mres=m.run();
string main = m.get_selected_item_id();
if(mres==-1)
{
speak("exiting");
m.fade_music();
exit();
}
if (main == "gm")
{
gamemenu();
}
if (main == "sm")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
preffsmenu();
}
if(main == "st")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        dlgplay(get_sound("ui/menus/"+menupack+"/*speaker*"));
    if(completesound==true) dlgplay(get_sound("ui/menus/"+menupack+"/*complete*"), false);
dlgmessage_return("Speaker test complete.");
    mainmenu();
}
if (main == "chup")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
check_for_updates(version, "ToyMania", true);
}
if (main == "rt")
{
speak("restarting");
m.fade_music();
restart("tm.exe");
}
if (main == "ex")
{
speak("exiting");
m.fade_music();
exit();
}
}
void docksmenu()
{
setupmenu();
m.add_item("changelog", "changelog");
m.add_item("credits", "credits");
m.add_item("readme", "readme");
m.add_item("todo_list", "todo_list");
m.add_item("back", "back");
m.intro_text = "User guides menu. You can access help guides and other resources explaining how the game works here.";
int mres=m.run();
string dnm=m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
if(dnm=="changelog")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
dockread("changelog.txt");
}
if(dnm=="credits")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
dockread("credits.txt");
}
if(dnm=="readme")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
dockread("readme.txt");
}
if(dnm=="todo_list")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
dockread("todo_list.txt");
}
if(dnm=="back")
{
gamemenu();
}
}
void gamemenu()
{
setupmenu();
m.add_item("play game", "pg");
m.add_item("learn game sounds", "gsm");
m.add_item("read game user guides", "dm");
m.add_item("view game achievements", "ach");
m.add_item("view game statistics", "stats");
m.add_item("Clear game progresses.", "cgr");
if(statscopy==true) m.add_item("Copy all game progresses to clipboard", "cys");
if(statscopy==true) m.add_item("Export all game progresses to file", "cys2");
m.add_item("back", "back");
m.intro_text = "Game menu. You can start a new game session, learn about important sounds, view achievements, or check your stats here.";
int mres=m.run();
string gamem = m.get_selected_item_id();
if(mres==-1)
{
mainmenu();
}
if (gamem == "pg")
{
modemenu();
}
if (gamem == "gsm")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
learnsoundsmenu();
}
if (gamem == "dm")
{
docksmenu();
}
if (gamem == "ach")
{
achesmenu();
}
if (gamem == "stats")
{
statsmenu();
}
if (gamem == "cgr")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
m.intro_text="Are you sure you want to reset all of your game progresses?";
int mres=m.run();
string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
        gamemenu();
    }
if(confirm=="yes")
{
if(file_exists(DIRECTORY_APPDATA+"tsatria03/ToyMania/saves/game.tmg")) file_delete(DIRECTORY_APPDATA+"tsatria03/ToyMania/saves/game.tmg");
resetgame();
writedata();
if(completesound==true) dlgplay(get_sound("ui/menus/"+menupack+"/*complete*"), false);
dlgmessage_return("Game progresses cleared.");
gamemenu();
}
}
if (gamem == "cys")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    string result = "";
    result += "Session Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
        {
            result += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    result += "\r\nLifetime Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (!achievements[i].isSessionBased)
        {
            result += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    result += "\r\n";
    int session_minutes = int(session_playtime / 60000);
    int session_seconds = int((session_playtime % 60000) / 1000);
    result += "Session Stats:\r\n";
    result += "- Toys collected: " + collected_toys + "\r\n";
    result += "- Keys collected: " + collected_keys + "\r\n";
    result += "- Guards killed: " + killed_gards + "\r\n";
    result += "- Cars destroyed: " + destroyed_cars + "\r\n";
    result += "- Steps taken: " + moved_steps + "\r\n";
    result += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
    int total_minutes = int(total_playtime / 60000);
    int total_seconds = int((total_playtime % 60000) / 1000);
    result += "Lifetime Stats:\r\n";
    result += "- Last Played Date: " + last_played_date + "\r\n";
    result += "- Last Played Time: " + last_played_time + "\r\n";
    result += "- Toys collected: " + total_collected_toys + "\r\n";
    result += "- Keys collected: " + total_collected_keys + "\r\n";
    result += "- Guards killed: " + total_killed_gards + "\r\n";
    result += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
    result += "- Steps taken: " + total_moved_steps + "\r\n";
    result += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n";
    clipboard_copy_text(result);
if(copexpsounds==true) dlgplay(get_sound("ui/menus/"+menupack+"/*copy*") ,false);
    dlgmessage_return("All game progresses have been copied to your clipboard.");
    gamemenu();
}
if (gamem == "cys2")
{
if (speak_menu_loading) speak("loading");
m.fade_music();
gamfile.open(DIRECTORY_APPDATA+"tsatria03/ToyMania/stats/player_progresses.txt", "w");
string result = "";
result += "Session Achievements:\r\n";
for (uint i = 0; i < achievements.length(); i++)
{
if (achievements[i].isSessionBased)
result += "- " + achievements[i].get_progress_status() + "\r\n";
}
result += "\r\nLifetime Achievements:\r\n";
for (uint i = 0; i < achievements.length(); i++)
{
if (!achievements[i].isSessionBased)
result += "- " + achievements[i].get_progress_status() + "\r\n";
}
result += "\r\n";
int session_minutes = int(session_playtime / 60000);
int session_seconds = int((session_playtime % 60000) / 1000);
result += "Session Stats:\r\n";
result += "- Toys collected: " + collected_toys + "\r\n";
result += "- Keys collected: " + collected_keys + "\r\n";
result += "- Guards killed: " + killed_gards + "\r\n";
result += "- Cars destroyed: " + destroyed_cars + "\r\n";
result += "- Steps taken: " + moved_steps + "\r\n";
result += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
int total_minutes = int(total_playtime / 60000);
int total_seconds = int((total_playtime % 60000) / 1000);
result += "Lifetime Stats:\r\n";
result += "- Last Played Date: " + last_played_date + "\r\n";
result += "- Last Played Time: " + last_played_time + "\r\n";
result += "- Toys collected: " + total_collected_toys + "\r\n";
result += "- Keys collected: " + total_collected_keys + "\r\n";
result += "- Guards killed: " + total_killed_gards + "\r\n";
result += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
result += "- Steps taken: " + total_moved_steps + "\r\n";
result += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n";
gamfile.write(result);
gamfile.close();
if(copexpsounds==true) dlgplay(get_sound("ui/menus/"+menupack+"/*export*"),false);
dlgmessage_return("All game progresses have been exported to stats/player_progresses.txt.");
gamemenu();
}
if (gamem == "back")
{
mainmenu();
}
}
void modemenu()
{
setupmenu();
m.add_item("toy collector", "ty");
m.add_item("toy defender", "ty2");
m.add_item("back", "back");
m.intro_text = "Choose the game you'd like to play.";
int mres=m.run();
string gamem2 = m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
if (gamem2 == "ty")
{
setupmenu(false);
m.add_item("Endless arcade. This mode lets you play for as long as you can survive. The game will get harder over time with no final boss, and just one unlockable door to win. This mode also includes some items that drop from time to time for use during intense enemy fights.", "endless");
m.add_item("Time trial. This is a timed based mode where you must collect toys, survive various types of enemies, and defeat the final boss before the store explodes. There is one unlockable door that you must find by collecting all of the required keys to win.", "timed");
m.add_item("Back", "back");
m.intro_text = "Choose the game you'd like to play for this mode.";
int gres = m.run();
string mode = m.get_selected_item_id();
if (mode == "back" or gres == -1)
{
modemenu();
return;
}
setupmenu(false);
m.add_item("Easy", "1");
m.add_item("Medium", "2");
m.add_item("Hard", "3");
m.add_item("Insane", "4");
m.add_item("Chaos", "5");
m.add_item("Back", "back");
m.intro_text = "Choose the difficulty you'd like to use for this mode.";
int dres = m.run();
string diffchoice = m.get_selected_item_id();
if (diffchoice == "back" or dres == -1)
{
modemenu();
return;
}
gamemod = string_to_int(diffchoice);
endless = (mode == "endless");
if (speak_menu_loading)
{
string difficulty_name =(gamemod == 1) ? "Easy" :(gamemod == 2) ? "Medium" :(gamemod == 3) ? "Hard" :(gamemod == 4) ? "Insane" :(gamemod == 5) ? "Chaos" :"unknown";
speak((endless ? "loading endless arcade: difficulty " : "loading time trial: difficulty ") + difficulty_name);
}
m.fade_music();
dlgplay(get_sound("misc/game/*launch*"));
last_level_time = 0;
level = 1;
money = 0;
collected_toys = 0;
collected_keys = 0;
killed_gards = 0;
destroyed_cars = 0;
moved_steps = 0;
session_playtime = 0;
for (uint i = 0; i < achievements.length(); i++)
{
if (achievements[i].isSessionBased)
achievements[i].currentTier = 0;
}
gametimer.restart();
int base = endless ? 10000 : 1000;
int bonus = endless ? 2500 : 250;
int added = bonus * (gamemod - 1);
health = base + added;
maxhealth = base + added;
storehealth = base + added;
storemaxhealth = base + added;
clear_inv();
destroy_all_healzones();
destroy_all_doors();
me.x = endless ? 50 : 25;
me.y = endless ? 50 : 25;
maxx = endless ? 100 : 50;
maxy = endless ? 100 : 50;
toynum = 20;
alarm_started = false;
countdown_started = false;
small_storedest = false;
medium_storedest = false;
bossdefeated = false;
bossespawn = false;
carspawn = false;
cardest = false;
gardspawn = false;
keydest = false;
keyspawn = false;
objdest = false;
objspawn = false;
toydest = false;
toyspawn = true;
reset_weapons();
toygame();
}
if (gamem2 == "ty2")
{
setupmenu(false);
m.add_item("Endless Defense. Survive for as long as you can while preventing intruders from stealing your toy stock. The game gets progressively harder with faster and tuffer thieves. You have to save as many toys as you can by collecting them.", "endless");
m.add_item("Rush Defense. In this mode, you must protect the toy stock from being stolen. The game ends when you've successfully saved every toy, or if too many are stolen. Expect increasing pressure as waves get faster and more aggressive.", "timed");
m.add_item("Back", "back");
m.intro_text = "Choose the game you'd like to play for this mode.";
int gres = m.run();
string mode = m.get_selected_item_id();
if (mode == "back" or gres == -1)
{
modemenu();
return;
}
setupmenu(false);
m.add_item("Easy", "1");
m.add_item("Medium", "2");
m.add_item("Hard", "3");
m.add_item("Insane", "4");
m.add_item("Chaos", "5");
m.add_item("Back", "back");
m.intro_text = "Choose the difficulty you'd like to use for this mode.";
int dres = m.run();
string diffchoice = m.get_selected_item_id();
if (diffchoice == "back" or dres == -1)
{
modemenu();
return;
}
gamemod = string_to_int(diffchoice);
endless = (mode == "endless");
if (speak_menu_loading)
{
string difficulty_name =(gamemod == 1) ? "Easy" :(gamemod == 2) ? "Medium" :(gamemod == 3) ? "Hard" :(gamemod == 4) ? "Insane" :(gamemod == 5) ? "Chaos" :"unknown";
speak((endless ? "loading endless defense: difficulty " : "loading rush defense: difficulty ") + difficulty_name);
}
m.fade_music();
dlgplay(get_sound("misc/game/*launch*"));
collected_toys=0;
stolen_toys = 0;
gametimer.restart();
clear_inv();
me.x=25;
me.y=25;
maxx=50;
maxy=50;
store_defense=true;
theifspawn=true;
toyspawn=true;
reset_weapons();
toygame2();
}
if (gamem2 == "back")
{
gamemenu();
}
}
void learnsoundsmenu()
{
dictionary learnCategories;
string vdesc = variant_descriptions ? ". This sound has multiple variants." : "";
dictionary boss;
boss["Death"] = get_sound("npc/bosses/boss/death.*");
boss["Fall" + vdesc] = array<string> = {get_sound("npc/bosses/boss/fall1.*"), get_sound("npc/bosses/boss/fall2.*")};
boss["Heal" + vdesc] = array<string> = {get_sound("npc/bosses/boss/heal1.*"), get_sound("npc/bosses/boss/heal2.*"), get_sound("npc/bosses/boss/heal3.*")};
boss["Hit" + vdesc] = array<string> = {get_sound("npc/bosses/boss/hit1.*"), get_sound("npc/bosses/boss/hit2.*")};
boss["Hurt"] = get_sound("npc/bosses/boss/hurt.*");
boss["Launch"] = get_sound("npc/bosses/boss/launch.*");
boss["Step" + vdesc] = array<string> = {get_sound("npc/bosses/boss/step1.*"), get_sound("npc/bosses/boss/step2.*"), get_sound("npc/bosses/boss/step3.*"), get_sound("npc/bosses/boss/step4.*")};
boss["Taunt"] = get_sound("npc/bosses/boss/taunt.*");
boss["Teleport" + vdesc] = array<string> = {get_sound("npc/bosses/boss/tel1.*"), get_sound("npc/bosses/boss/tel2.*")};
learnCategories["Boss"] = boss;
dictionary cars;
cars["Car Death"] = get_sound("npc/cars/car/death.*");
cars["Car Hurt"] = get_sound("npc/cars/car/hurt.*");
cars["Car Loop"] = get_sound("npc/cars/car/loop.*");
cars["Car Shoot"] = get_sound("npc/cars/car/shoot.*");
cars["Car2 Death"] = get_sound("npc/cars/car2/death.*");
cars["Car2 Hurt"] = get_sound("npc/cars/car2/hurt.*");
cars["Car2 Loop"] = get_sound("npc/cars/car2/loop.*");
cars["Car2 Shoot"] = get_sound("npc/cars/car2/shoot.*");
cars["Car3 Death"] = get_sound("npc/cars/car3/death.*");
cars["Car3 Hurt"] = get_sound("npc/cars/car3/hurt.*");
cars["Car3 Loop"] = get_sound("npc/cars/car3/loop.*");
cars["Car3 Shoot"] = get_sound("npc/cars/car3/shoot.*");
learnCategories["Cars"] = cars;
dictionary doors;
doors["Close"] = get_sound("objects/doors/door/close.*");
doors["Deny"] = get_sound("objects/doors/door/deny.*");
doors["Grant"] = get_sound("objects/doors/door/grant.*");
doors["Jam" + vdesc] = array<string> = {get_sound("objects/doors/door/jam1.*"), get_sound("objects/doors/door/jam2.*")};
doors["Loop"] = get_sound("objects/doors/door/loop.*");
doors["Move"] = get_sound("objects/doors/door/move.*");
doors["Open"] = get_sound("objects/doors/door/open.*");
learnCategories["Doors"] = doors;
dictionary guards;
guards["Guard Death" + vdesc] = array<string> = {get_sound("npc/guards/guard/death1.*"), get_sound("npc/guards/guard/death2.*")};
guards["Guard Fall" + vdesc] = array<string> = {get_sound("npc/guards/guard/fall1.*"), get_sound("npc/guards/guard/fall2.*"), get_sound("npc/guards/guard/fall3.*"), get_sound("npc/guards/guard/fall4.*"), get_sound("npc/guards/guard/fall5.*")};
guards["Guard Hit" + vdesc] = array<string> = {get_sound("npc/guards/guard/hit1.*"), get_sound("npc/guards/guard/hit2.*"), get_sound("npc/guards/guard/hit3.*")};
guards["Guard Hurt" + vdesc] = array<string> = {get_sound("npc/guards/guard/hurt1.*"), get_sound("npc/guards/guard/hurt2.*"), get_sound("npc/guards/guard/hurt3.*"), get_sound("npc/guards/guard/hurt4.*"), get_sound("npc/guards/guard/hurt5.*")};
guards["Guard Step" + vdesc] = array<string> = {get_sound("npc/guards/guard/step1.*"), get_sound("npc/guards/guard/step2.*"), get_sound("npc/guards/guard/step3.*"), get_sound("npc/guards/guard/step4.*"), get_sound("npc/guards/guard/step5.*")};
guards["Guard Taunt"] = get_sound("npc/guards/guard/taunt.*");
guards["Guard2 Death"] = get_sound("npc/guards/guard2/death.*");
guards["Guard2 Fall" + vdesc] = array<string> = {get_sound("npc/guards/guard2/fall1.*"), get_sound("npc/guards/guard2/fall2.*")};
guards["Guard2 Hit" + vdesc] = array<string> = {get_sound("npc/guards/guard2/hit1.*"), get_sound("npc/guards/guard2/hit2.*"), get_sound("npc/guards/guard2/hit3.*")};
guards["Guard2 Hurt"] = get_sound("npc/guards/guard2/hurt.*");
guards["Guard2 Step" + vdesc] = array<string> = {get_sound("npc/guards/guard2/step1.*"), get_sound("npc/guards/guard2/step2.*"), get_sound("npc/guards/guard2/step3.*"), get_sound("npc/guards/guard2/step4.*"), get_sound("npc/guards/guard2/step5.*"), get_sound("npc/guards/guard2/step6.*"), get_sound("npc/guards/guard2/step7.*"), get_sound("npc/guards/guard2/step8.*")};
guards["Guard2 Taunt"] = get_sound("npc/guards/guard2/taunt.*");
guards["Guard3 Death"] = get_sound("npc/guards/guard3/death.*");
guards["Guard3 Fall" + vdesc] = array<string> = {get_sound("npc/guards/guard3/fall1.*"), get_sound("npc/guards/guard3/fall2.*")};
guards["Guard3 Hit"] = get_sound("npc/guards/guard3/hit.*");
guards["Guard3 Hurt"] = get_sound("npc/guards/guard3/hurt.*");
guards["Guard3 Step" + vdesc] = array<string> = {get_sound("npc/guards/guard3/step1.*"), get_sound("npc/guards/guard3/step2.*"), get_sound("npc/guards/guard3/step3.*"), get_sound("npc/guards/guard3/step4.*"), get_sound("npc/guards/guard3/step5.*")};
guards["Guard3 Taunt"] = get_sound("npc/guards/guard3/taunt.*");
learnCategories["Guards"] = guards;
dictionary items;
items["Ammo_pack break: used in endless mode" + vdesc] = array<string> = {get_sound("equipments/items/endless/common/ammo_pack/break1.*"), get_sound("equipments/items/endless/common/ammo_pack/break2.*"), get_sound("equipments/items/endless/common/ammo_pack/break3.*"), get_sound("equipments/items/endless/common/ammo_pack/break4.*"), get_sound("equipments/items/endless/common/ammo_pack/break5.*"), get_sound("equipments/items/endless/common/ammo_pack/break6.*")};
items["Ammo_pack get: used in endless mode" + vdesc] = array<string> = {get_sound("equipments/items/endless/common/ammo_pack/get1.*"), get_sound("equipments/items/endless/common/ammo_pack/get2.*")};
items["Ammo_pack loop: used in endless mode"] = get_sound("equipments/items/endless/common/ammo_pack/loop.*");
items["Ammo_pack spawn: used in endless mode"] = get_sound("equipments/items/endless/common/ammo_pack/spawn.*");
items["Ammo_pack use: used in endless mode"] = get_sound("equipments/items/endless/common/ammo_pack/use.*");
items["Health_potion break: used in endless mode" + vdesc] = array<string> = {get_sound("equipments/items/endless/other/health_potion/break1.*"), get_sound("equipments/items/endless/other/health_potion/break2.*"), get_sound("equipments/items/endless/other/health_potion/break3.*"), get_sound("equipments/items/endless/other/health_potion/break4.*"), get_sound("equipments/items/endless/other/health_potion/break5.*"), get_sound("equipments/items/endless/other/health_potion/break6.*")};
items["Health_potion get: used in endless mode"] = get_sound("equipments/items/endless/other/health_potion/get.*");
items["Health_potion loop: used in endless mode"] = get_sound("equipments/items/endless/other/health_potion/loop.*");
items["Health_potion spawn: used in endless mode"] = get_sound("equipments/items/endless/other/health_potion/spawn.*");
items["Health_potion use: used in endless mode"] = get_sound("equipments/items/endless/other/health_potion/use.*");
items["Player_teleporter break: used in endless mode" + vdesc] = array<string> = {get_sound("equipments/items/endless/other/player_teleporter/break1.*"), get_sound("equipments/items/endless/other/player_teleporter/break2.*"), get_sound("equipments/items/endless/other/player_teleporter/break3.*"), get_sound("equipments/items/endless/other/player_teleporter/break4.*"), get_sound("equipments/items/endless/other/player_teleporter/break5.*"), get_sound("equipments/items/endless/other/player_teleporter/break6.*")};
items["Player_teleporter get: used in endless mode"] = get_sound("equipments/items/endless/other/player_teleporter/get.*");
items["Player_teleporter loop: used in endless mode"] = get_sound("equipments/items/endless/other/player_teleporter/loop.*");
items["Player_teleporter spawn: used in endless mode"] = get_sound("equipments/items/endless/other/player_teleporter/spawn.*");
items["Player_teleporter use: used in endless mode"] = get_sound("equipments/items/endless/other/player_teleporter/use.*");
items["Stun_dart break: used in endless mode" + vdesc] = array<string> = {get_sound("equipments/items/endless/common/stun_dart/break1.*"), get_sound("equipments/items/endless/common/stun_dart/break2.*"), get_sound("equipments/items/endless/common/stun_dart/break3.*"), get_sound("equipments/items/endless/common/stun_dart/break4.*"), get_sound("equipments/items/endless/common/stun_dart/break5.*"), get_sound("equipments/items/endless/common/stun_dart/break6.*")};
items["Stun_dart get: used in endless mode"] = get_sound("equipments/items/endless/common/stun_dart/get.*");
items["Stun_dart fire: used in endless mode"] = get_sound("equipments/items/endless/common/stun_dart/fire.*");
items["Stun_dart hit: used in endless mode"] = get_sound("equipments/items/endless/common/stun_dart/hit.*");
items["Stun_dart loop: used in endless mode" + vdesc] = array<string> = {get_sound("equipments/items/endless/common/stun_dart/loop1.*"), get_sound("equipments/items/endless/common/stun_dart/loop2.*"), get_sound("equipments/items/endless/common/stun_dart/loop3.*")};
items["Stun_dart spawn: used in endless mode"] = get_sound("equipments/items/endless/common/stun_dart/spawn.*");
learnCategories["Items"] = items;
dictionary keys;
keys["Black_key break"] = get_sound("equipments/items/normal/keys/common/black_key/break.*");
keys["Black_key get"] = get_sound("equipments/items/normal/keys/common/black_key/get.*");
keys["Black_key loop" + vdesc] = array<string> = {get_sound("equipments/items/normal/keys/common/black_key/loop1.*"), get_sound("equipments/items/normal/keys/common/black_key/loop2.*"), get_sound("equipments/items/normal/keys/common/black_key/loop3.*"), get_sound("equipments/items/normal/keys/common/black_key/loop4.*")};
keys["Black_key spawn"] = get_sound("equipments/items/normal/keys/common/black_key/spawn.*");
keys["Black_key use"] = get_sound("equipments/items/normal/keys/common/black_key/use.*");
keys["Green_key break"] = get_sound("equipments/items/normal/keys/common/green_key/break.*");
keys["Green_key get"] = get_sound("equipments/items/normal/keys/common/green_key/get.*");
keys["Green_key loop" + vdesc] = array<string> = {get_sound("equipments/items/normal/keys/common/green_key/loop1.*"), get_sound("equipments/items/normal/keys/common/green_key/loop2.*"), get_sound("equipments/items/normal/keys/common/green_key/loop3.*"), get_sound("equipments/items/normal/keys/common/green_key/loop4.*")};
keys["Green_key spawn"] = get_sound("equipments/items/normal/keys/common/green_key/spawn.*");
keys["Green_key use"] = get_sound("equipments/items/normal/keys/common/green_key/use.*");
keys["Orange_key break"] = get_sound("equipments/items/normal/keys/common/orange_key/break.*");
keys["Orange_key get"] = get_sound("equipments/items/normal/keys/common/orange_key/get.*");
keys["Orange_key loop" + vdesc] = array<string> = {get_sound("equipments/items/normal/keys/common/orange_key/loop1.*"), get_sound("equipments/items/normal/keys/common/orange_key/loop2.*"), get_sound("equipments/items/normal/keys/common/orange_key/loop3.*"), get_sound("equipments/items/normal/keys/common/orange_key/loop4.*")};
keys["Orange_key spawn"] = get_sound("equipments/items/normal/keys/common/orange_key/spawn.*");
keys["Orange_key use"] = get_sound("equipments/items/normal/keys/common/orange_key/use.*");
keys["Pink_key break"] = get_sound("equipments/items/normal/keys/common/pink_key/break.*");
keys["Pink_key get"] = get_sound("equipments/items/normal/keys/common/pink_key/get.*");
keys["Pink_key loop" + vdesc] = array<string> = {get_sound("equipments/items/normal/keys/common/pink_key/loop1.*"), get_sound("equipments/items/normal/keys/common/pink_key/loop2.*"), get_sound("equipments/items/normal/keys/common/pink_key/loop3.*"), get_sound("equipments/items/normal/keys/common/pink_key/loop4.*")};
keys["Pink_key spawn"] = get_sound("equipments/items/normal/keys/common/pink_key/spawn.*");
keys["Pink_key use"] = get_sound("equipments/items/normal/keys/common/pink_key/use.*");
keys["Purple_key break"] = get_sound("equipments/items/normal/keys/common/purple_key/break.*");
keys["Purple_key get"] = get_sound("equipments/items/normal/keys/common/purple_key/get.*");
keys["Purple_key loop" + vdesc] = array<string> = {get_sound("equipments/items/normal/keys/common/purple_key/loop1.*"), get_sound("equipments/items/normal/keys/common/purple_key/loop2.*"), get_sound("equipments/items/normal/keys/common/purple_key/loop3.*"), get_sound("equipments/items/normal/keys/common/purple_key/loop4.*")};
keys["Purple_key spawn"] = get_sound("equipments/items/normal/keys/common/purple_key/spawn.*");
keys["Purple_key use"] = get_sound("equipments/items/normal/keys/common/purple_key/use.*");
keys["Red_key break"] = get_sound("equipments/items/normal/keys/common/red_key/break.*");
keys["Red_key get"] = get_sound("equipments/items/normal/keys/common/red_key/get.*");
keys["Red_key loop" + vdesc] = array<string> = {get_sound("equipments/items/normal/keys/common/red_key/loop1.*"), get_sound("equipments/items/normal/keys/common/red_key/loop2.*"), get_sound("equipments/items/normal/keys/common/red_key/loop3.*"), get_sound("equipments/items/normal/keys/common/red_key/loop4.*")};
keys["Red_key spawn"] = get_sound("equipments/items/normal/keys/common/red_key/spawn.*");
keys["Red_key use"] = get_sound("equipments/items/normal/keys/common/red_key/use.*");
keys["Yellow_key break"] = get_sound("equipments/items/normal/keys/other/yellow_key/break.*");
keys["Yellow_key get"] = get_sound("equipments/items/normal/keys/other/yellow_key/get.*");
keys["Yellow_key loop"] = get_sound("equipments/items/normal/keys/other/yellow_key/loop.*");
keys["Yellow_key spawn" + vdesc] = array<string> = {get_sound("equipments/items/normal/keys/other/yellow_key/spawn1.*"), get_sound("equipments/items/normal/keys/other/yellow_key/spawn2.*")};
keys["Yellow_key use" + vdesc] = array<string> = {get_sound("equipments/items/normal/keys/other/yellow_key/use1.*"), get_sound("equipments/items/normal/keys/other/yellow_key/use2.*")};
learnCategories["Keys"] = keys;
dictionary player;
player["Alarm"] = get_sound("objects/sources/ambiences/alarmloop.*");
player["Alert big: used in normal mode"] = get_sound("misc/store/alert_big.*");
player["Alert small: used in normal mode"] = get_sound("misc/store/alert_small.*");
player["Concrete fall: used in endless mode"] = get_sound("objects/platforms/concrete/fall.*");
player["Concrete land: used in endless mode"] = get_sound("objects/platforms/concrete/land.*");
player["Concrete step: used in endless mode" + vdesc] = array<string> = {get_sound("objects/platforms/concrete/step1.*"), get_sound("objects/platforms/concrete/step2.*"), get_sound("objects/platforms/concrete/step3.*"), get_sound("objects/platforms/concrete/step4.*"), get_sound("objects/platforms/concrete/step5.*")};
player["Countdown: used in normal mode"] = get_sound("misc/game/countdown.*");
player["Cycle inventory" + vdesc] = array<string> = {get_sound("misc/player/inv1.*"), get_sound("misc/player/inv2.*"), get_sound("misc/player/inv3.*"), get_sound("misc/player/inv4.*"), get_sound("misc/player/inv5.*")};
player["Death"] = get_sound("misc/player/death.*");
player["Explode large: used in normal mode"] = get_sound("misc/store/dest_large.*");
player["Explode medium: used in normal mode"] = get_sound("misc/store/dest_medium.*");
player["Explode small: used in normal mode"] = get_sound("misc/store/dest_small.*");
player["Game launch"] = get_sound("misc/game/launch.*");
player["Game pause"] = get_sound("misc/game/pause.*");
player["Game resume"] = get_sound("misc/game/resume.*");
player["Get money: used in endless mode"] = get_sound("misc/player/money.*");
player["Give item"] = get_sound("misc/player/give.*");
player["Glass fall"] = get_sound("objects/platforms/glass/fall.*");
player["Glass land"] = get_sound("objects/platforms/glass/land.*");
player["Glass step" + vdesc] = array<string> = {get_sound("objects/platforms/glass/step1.*"), get_sound("objects/platforms/glass/step2.*"), get_sound("objects/platforms/glass/step3.*"), get_sound("objects/platforms/glass/step4.*"), get_sound("objects/platforms/glass/step5.*")};
player["Heart start"] = get_sound("misc/player/heartstart.*");
player["Heart stop"] = get_sound("misc/player/heartstop.*");
player["Heal: used in endless mode" + vdesc] = array<string> = {get_sound("misc/player/heal1.*"), get_sound("misc/player/heal2.*"), get_sound("misc/player/heal3.*")};
player["Hurt"] = get_sound("misc/player/hurt.*");
player["Level up"] = get_sound("misc/player/lev.*");
player["Life achievement"] = get_sound("misc/player/achlife.*");
player["Marble fall: used in normal mode"] = get_sound("objects/platforms/marble/fall.*");
player["Marble land: used in normal mode"] = get_sound("objects/platforms/marble/land.*");
player["Marble step: used in normal mode" + vdesc] = array<string> = {get_sound("objects/platforms/marble/step1.*"), get_sound("objects/platforms/marble/step2.*"), get_sound("objects/platforms/marble/step3.*"), get_sound("objects/platforms/marble/step4.*"), get_sound("objects/platforms/marble/step5.*")};
player["Purchase complete: used in endless mode" + vdesc] = array<string> = {get_sound("misc/store/buy1.*"), get_sound("misc/store/buy2.*"), get_sound("misc/store/buy3.*"), get_sound("misc/store/buy4.*")};
player["Purchase error: used in endless mode"] = get_sound("misc/store/error.*");
player["Session achievement"] = get_sound("misc/player/achsession.*");
player["Turn"] = get_sound("misc/player/turn.*");
learnCategories["Player"] = player;
dictionary theifs;
theifs["theif Death"] = get_sound("npc/theifs/theif/death.*");
theifs["theif Fall"] = get_sound("npc/theifs/theif/fall.*");
theifs["theif Hurt" + vdesc] = array<string> = {get_sound("npc/theifs/theif/hurt1.*"), get_sound("npc/theifs/theif/hurt2.*")};
theifs["theif Land"] = get_sound("npc/theifs/theif/land.*");
theifs["theif Steal"] = get_sound("npc/theifs/theif/steal.*");
theifs["theif Step" + vdesc] = array<string> = {get_sound("npc/theifs/theif/step1.*"), get_sound("npc/theifs/theif/step2.*"), get_sound("npc/theifs/theif/step3.*"), get_sound("npc/theifs/theif/step4.*"), get_sound("npc/theifs/theif/step5.*")};
theifs["theif Taunt"] = get_sound("npc/theifs/theif/taunt.*");
theifs["theif2 Death"] = get_sound("npc/theifs/theif2/death.*");
theifs["theif2 Fall"] = get_sound("npc/theifs/theif2/fall.*");
theifs["theif2 Hurt"] = get_sound("npc/theifs/theif2/hurt.*");
theifs["theif2 Land"] = get_sound("npc/theifs/theif2/land.*");
theifs["theif2 Steal"] = get_sound("npc/theifs/theif2/steal.*");
theifs["theif2 Step" + vdesc] = array<string> = {get_sound("npc/theifs/theif2/step1.*"), get_sound("npc/theifs/theif2/step2.*"), get_sound("npc/theifs/theif2/step3.*"), get_sound("npc/theifs/theif2/step4.*"), get_sound("npc/theifs/theif2/step5.*")};
theifs["theif2 Taunt"] = get_sound("npc/theifs/theif2/taunt.*");
learnCategories["Theifs"] = theifs;
dictionary toys;
toys["articulated_rainbow_slug break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/articulated_rainbow_slug/break1.*"), get_sound("equipments/items/normal/toys/common/articulated_rainbow_slug/break2.*"), get_sound("equipments/items/normal/toys/common/articulated_rainbow_slug/break3.*")};
toys["articulated_rainbow_slug get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/articulated_rainbow_slug/get1.*"), get_sound("equipments/items/normal/toys/common/articulated_rainbow_slug/get2.*")};
toys["articulated_rainbow_slug loop"] = get_sound("equipments/items/normal/toys/common/articulated_rainbow_slug/loop.*");
toys["big_fidget_gear_stick break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/big_fidget_gear_stick/break1.*"), get_sound("equipments/items/normal/toys/common/big_fidget_gear_stick/break2.*"), get_sound("equipments/items/normal/toys/common/big_fidget_gear_stick/break3.*")};
toys["big_fidget_gear_stick get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/big_fidget_gear_stick/get1.*"), get_sound("equipments/items/normal/toys/common/big_fidget_gear_stick/get2.*")};
toys["big_fidget_gear_stick loop"] = get_sound("equipments/items/normal/toys/common/big_fidget_gear_stick/loop.*");
toys["big_plastic_fidget_spinner break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/big_plastic_fidget_spinner/break1.*"), get_sound("equipments/items/normal/toys/common/big_plastic_fidget_spinner/break2.*"), get_sound("equipments/items/normal/toys/common/big_plastic_fidget_spinner/break3.*")};
toys["big_plastic_fidget_spinner get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/big_plastic_fidget_spinner/get1.*"), get_sound("equipments/items/normal/toys/common/big_plastic_fidget_spinner/get2.*")};
toys["big_plastic_fidget_spinner loop"] = get_sound("equipments/items/normal/toys/common/big_plastic_fidget_spinner/loop.*");
toys["classic_fidget_spinner break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/classic_fidget_spinner/break1.*"), get_sound("equipments/items/normal/toys/common/classic_fidget_spinner/break2.*"), get_sound("equipments/items/normal/toys/common/classic_fidget_spinner/break3.*")};
toys["classic_fidget_spinner get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/classic_fidget_spinner/get1.*"), get_sound("equipments/items/normal/toys/common/classic_fidget_spinner/get2.*")};
toys["classic_fidget_spinner loop"] = get_sound("equipments/items/normal/toys/common/classic_fidget_spinner/loop.*");
toys["clicker_clacker break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/clicker_clacker/break1.*"), get_sound("equipments/items/normal/toys/common/clicker_clacker/break2.*"), get_sound("equipments/items/normal/toys/common/clicker_clacker/break3.*")};
toys["clicker_clacker get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/clicker_clacker/get1.*"), get_sound("equipments/items/normal/toys/common/clicker_clacker/get2.*")};
toys["clicker_clacker loop"] = get_sound("equipments/items/normal/toys/common/clicker_clacker/loop.*");
toys["fidget_car break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_car/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_car/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_car/break3.*")};
toys["fidget_car get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_car/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_car/get2.*")};
toys["fidget_car loop"] = get_sound("equipments/items/normal/toys/common/fidget_car/loop.*");
toys["fidget_clicky_ball break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_clicky_ball/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_clicky_ball/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_clicky_ball/break3.*")};
toys["fidget_clicky_ball get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_clicky_ball/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_clicky_ball/get2.*")};
toys["fidget_clicky_ball loop"] = get_sound("equipments/items/normal/toys/common/fidget_clicky_ball/loop.*");
toys["fidget_cube break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_cube/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_cube/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_cube/break3.*")};
toys["fidget_cube get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_cube/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_cube/get2.*")};
toys["fidget_cube loop"] = get_sound("equipments/items/normal/toys/common/fidget_cube/loop.*");
toys["fidget_cube_2 break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_cube_2/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_cube_2/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_cube_2/break3.*")};
toys["fidget_cube_2 get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_cube_2/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_cube_2/get2.*")};
toys["fidget_cube_2 loop"] = get_sound("equipments/items/normal/toys/common/fidget_cube_2/loop.*");
toys["fidget_dimple break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_dimple/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_dimple/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_dimple/break3.*")};
toys["fidget_dimple get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_dimple/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_dimple/get2.*")};
toys["fidget_dimple loop"] = get_sound("equipments/items/normal/toys/common/fidget_dimple/loop.*");
toys["fidget_flicker_switch break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_flicker_switch/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_flicker_switch/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_flicker_switch/break3.*")};
toys["fidget_flicker_switch get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_flicker_switch/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_flicker_switch/get2.*")};
toys["fidget_flicker_switch loop"] = get_sound("equipments/items/normal/toys/common/fidget_flicker_switch/loop.*");
toys["fidget_hand_clapper break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_hand_clapper/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_hand_clapper/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_hand_clapper/break3.*")};
toys["fidget_hand_clapper get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_hand_clapper/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_hand_clapper/get2.*")};
toys["fidget_hand_clapper loop"] = get_sound("equipments/items/normal/toys/common/fidget_hand_clapper/loop.*");
toys["fidget_metal_gear_stick break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_metal_gear_stick/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_metal_gear_stick/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_metal_gear_stick/break3.*")};
toys["fidget_metal_gear_stick get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_metal_gear_stick/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_metal_gear_stick/get2.*")};
toys["fidget_metal_gear_stick loop"] = get_sound("equipments/items/normal/toys/common/fidget_metal_gear_stick/loop.*");
toys["fidget_pad break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_pad/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_pad/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_pad/break3.*")};
toys["fidget_pad get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_pad/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_pad/get2.*")};
toys["fidget_pad loop"] = get_sound("equipments/items/normal/toys/common/fidget_pad/loop.*");
toys["fidget_plastic_gear_stick break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_plastic_gear_stick/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_plastic_gear_stick/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_plastic_gear_stick/break3.*")};
toys["fidget_plastic_gear_stick get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_plastic_gear_stick/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_plastic_gear_stick/get2.*")};
toys["fidget_plastic_gear_stick loop"] = get_sound("equipments/items/normal/toys/common/fidget_plastic_gear_stick/loop.*");
toys["fidget_popping_cork break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_popping_cork/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_popping_cork/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_popping_cork/break3.*")};
toys["fidget_popping_cork get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_popping_cork/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_popping_cork/get2.*")};
toys["fidget_popping_cork loop"] = get_sound("equipments/items/normal/toys/common/fidget_popping_cork/loop.*");
toys["fidget_rainbow_star break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_rainbow_star/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_rainbow_star/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_rainbow_star/break3.*")};
toys["fidget_rainbow_star get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_rainbow_star/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_rainbow_star/get2.*")};
toys["fidget_rainbow_star loop"] = get_sound("equipments/items/normal/toys/common/fidget_rainbow_star/loop.*");
toys["fidget_wheel_spinner break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_wheel_spinner/break1.*"), get_sound("equipments/items/normal/toys/common/fidget_wheel_spinner/break2.*"), get_sound("equipments/items/normal/toys/common/fidget_wheel_spinner/break3.*")};
toys["fidget_wheel_spinner get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/fidget_wheel_spinner/get1.*"), get_sound("equipments/items/normal/toys/common/fidget_wheel_spinner/get2.*")};
toys["fidget_wheel_spinner loop"] = get_sound("equipments/items/normal/toys/common/fidget_wheel_spinner/loop.*");
toys["infinity_cube break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/infinity_cube/break1.*"), get_sound("equipments/items/normal/toys/common/infinity_cube/break2.*"), get_sound("equipments/items/normal/toys/common/infinity_cube/break3.*")};
toys["infinity_cube get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/infinity_cube/get1.*"), get_sound("equipments/items/normal/toys/common/infinity_cube/get2.*")};
toys["infinity_cube loop"] = get_sound("equipments/items/normal/toys/common/infinity_cube/loop.*");
toys["infinity_cube2 break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/infinity_cube2/break1.*"), get_sound("equipments/items/normal/toys/common/infinity_cube2/break2.*"), get_sound("equipments/items/normal/toys/common/infinity_cube2/break3.*")};
toys["infinity_cube2 get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/infinity_cube2/get1.*"), get_sound("equipments/items/normal/toys/common/infinity_cube2/get2.*")};
toys["infinity_cube2 loop"] = get_sound("equipments/items/normal/toys/common/infinity_cube2/loop.*");
toys["mini_fidget_slug break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/mini_fidget_slug/break1.*"), get_sound("equipments/items/normal/toys/common/mini_fidget_slug/break2.*"), get_sound("equipments/items/normal/toys/common/mini_fidget_slug/break3.*")};
toys["mini_fidget_slug get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/mini_fidget_slug/get1.*"), get_sound("equipments/items/normal/toys/common/mini_fidget_slug/get2.*")};
toys["mini_fidget_slug loop"] = get_sound("equipments/items/normal/toys/common/mini_fidget_slug/loop.*");
toys["mini_fidget_spinner break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/mini_fidget_spinner/break1.*"), get_sound("equipments/items/normal/toys/common/mini_fidget_spinner/break2.*"), get_sound("equipments/items/normal/toys/common/mini_fidget_spinner/break3.*")};
toys["mini_fidget_spinner get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/mini_fidget_spinner/get1.*"), get_sound("equipments/items/normal/toys/common/mini_fidget_spinner/get2.*")};
toys["mini_fidget_spinner loop"] = get_sound("equipments/items/normal/toys/common/mini_fidget_spinner/loop.*");
toys["pop_it_ball break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/pop_it_ball/break1.*"), get_sound("equipments/items/normal/toys/common/pop_it_ball/break2.*"), get_sound("equipments/items/normal/toys/common/pop_it_ball/break3.*")};
toys["pop_it_ball get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/pop_it_ball/get1.*"), get_sound("equipments/items/normal/toys/common/pop_it_ball/get2.*")};
toys["pop_it_ball loop"] = get_sound("equipments/items/normal/toys/common/pop_it_ball/loop.*");
toys["small_noise_tube break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/small_noise_tube/break1.*"), get_sound("equipments/items/normal/toys/common/small_noise_tube/break2.*"), get_sound("equipments/items/normal/toys/common/small_noise_tube/break3.*")};
toys["small_noise_tube get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/common/small_noise_tube/get1.*"), get_sound("equipments/items/normal/toys/common/small_noise_tube/get2.*")};
toys["small_noise_tube loop"] = get_sound("equipments/items/normal/toys/common/small_noise_tube/loop.*");
toys["baby_rattle break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/baby_rattle/break1.*"), get_sound("equipments/items/normal/toys/other/baby_rattle/break2.*"), get_sound("equipments/items/normal/toys/other/baby_rattle/break3.*")};
toys["baby_rattle get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/baby_rattle/get1.*"), get_sound("equipments/items/normal/toys/other/baby_rattle/get2.*")};
toys["baby_rattle loop"] = get_sound("equipments/items/normal/toys/other/baby_rattle/loop.*");
toys["baby_rattle2 break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/baby_rattle2/break1.*"), get_sound("equipments/items/normal/toys/other/baby_rattle2/break2.*"), get_sound("equipments/items/normal/toys/other/baby_rattle2/break3.*")};
toys["baby_rattle2 get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/baby_rattle2/get1.*"), get_sound("equipments/items/normal/toys/other/baby_rattle2/get2.*")};
toys["baby_rattle2 loop"] = get_sound("equipments/items/normal/toys/other/baby_rattle2/loop.*");
toys["baby_rattle3 break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/baby_rattle3/break1.*"), get_sound("equipments/items/normal/toys/other/baby_rattle3/break2.*"), get_sound("equipments/items/normal/toys/other/baby_rattle3/break3.*")};
toys["baby_rattle3 get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/baby_rattle3/get1.*"), get_sound("equipments/items/normal/toys/other/baby_rattle3/get2.*")};
toys["baby_rattle3 loop"] = get_sound("equipments/items/normal/toys/other/baby_rattle3/loop.*");
toys["baby_rattle4 break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/baby_rattle4/break1.*"), get_sound("equipments/items/normal/toys/other/baby_rattle4/break2.*"), get_sound("equipments/items/normal/toys/other/baby_rattle4/break3.*")};
toys["baby_rattle4 get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/baby_rattle4/get1.*"), get_sound("equipments/items/normal/toys/other/baby_rattle4/get2.*")};
toys["baby_rattle4 loop"] = get_sound("equipments/items/normal/toys/other/baby_rattle4/loop.*");
toys["large_train break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/large_train/break1.*"), get_sound("equipments/items/normal/toys/other/large_train/break2.*"), get_sound("equipments/items/normal/toys/other/large_train/break3.*")};
toys["large_train get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/large_train/get1.*"), get_sound("equipments/items/normal/toys/other/large_train/get2.*")};
toys["large_train loop"] = get_sound("equipments/items/normal/toys/other/large_train/loop.*");
toys["small_bird break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/small_bird/break1.*"), get_sound("equipments/items/normal/toys/other/small_bird/break2.*"), get_sound("equipments/items/normal/toys/other/small_bird/break3.*")};
toys["small_bird get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/small_bird/get1.*"), get_sound("equipments/items/normal/toys/other/small_bird/get2.*")};
toys["small_bird loop"] = get_sound("equipments/items/normal/toys/other/small_bird/loop.*");
toys["small_car break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/small_car/break1.*"), get_sound("equipments/items/normal/toys/other/small_car/break2.*"), get_sound("equipments/items/normal/toys/other/small_car/break3.*")};
toys["small_car get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/small_car/get1.*"), get_sound("equipments/items/normal/toys/other/small_car/get2.*")};
toys["small_car loop"] = get_sound("equipments/items/normal/toys/other/small_car/loop.*");
toys["small_train break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/small_train/break1.*"), get_sound("equipments/items/normal/toys/other/small_train/break2.*"), get_sound("equipments/items/normal/toys/other/small_train/break3.*")};
toys["small_train get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/small_train/get1.*"), get_sound("equipments/items/normal/toys/other/small_train/get2.*")};
toys["small_train loop"] = get_sound("equipments/items/normal/toys/other/small_train/loop.*");
toys["squeaky_ball break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/squeaky_ball/break1.*"), get_sound("equipments/items/normal/toys/other/squeaky_ball/break2.*"), get_sound("equipments/items/normal/toys/other/squeaky_ball/break3.*")};
toys["squeaky_ball get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/squeaky_ball/get1.*"), get_sound("equipments/items/normal/toys/other/squeaky_ball/get2.*")};
toys["squeaky_ball loop"] = get_sound("equipments/items/normal/toys/other/squeaky_ball/loop.*");
toys["squeaky_ball2 break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/squeaky_ball2/break1.*"), get_sound("equipments/items/normal/toys/other/squeaky_ball2/break2.*"), get_sound("equipments/items/normal/toys/other/squeaky_ball2/break3.*")};
toys["squeaky_ball2 get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/squeaky_ball2/get1.*"), get_sound("equipments/items/normal/toys/other/squeaky_ball2/get2.*")};
toys["squeaky_ball2 loop"] = get_sound("equipments/items/normal/toys/other/squeaky_ball2/loop.*");
toys["squeaky_ball3 break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/squeaky_ball3/break1.*"), get_sound("equipments/items/normal/toys/other/squeaky_ball3/break2.*"), get_sound("equipments/items/normal/toys/other/squeaky_ball3/break3.*")};
toys["squeaky_ball3 get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/squeaky_ball3/get1.*"), get_sound("equipments/items/normal/toys/other/squeaky_ball3/get2.*")};
toys["squeaky_ball3 loop"] = get_sound("equipments/items/normal/toys/other/squeaky_ball3/loop.*");
toys["squeaky_ball4 break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/squeaky_ball4/break1.*"), get_sound("equipments/items/normal/toys/other/squeaky_ball4/break2.*"), get_sound("equipments/items/normal/toys/other/squeaky_ball4/break3.*")};
toys["squeaky_ball4 get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/squeaky_ball4/get1.*"), get_sound("equipments/items/normal/toys/other/squeaky_ball4/get2.*")};
toys["squeaky_ball4 loop"] = get_sound("equipments/items/normal/toys/other/squeaky_ball4/loop.*");
toys["wind_up break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/wind_up/break1.*"), get_sound("equipments/items/normal/toys/other/wind_up/break2.*"), get_sound("equipments/items/normal/toys/other/wind_up/break3.*")};
toys["wind_up get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/wind_up/get1.*"), get_sound("equipments/items/normal/toys/other/wind_up/get2.*")};
toys["wind_up loop"] = get_sound("equipments/items/normal/toys/other/wind_up/loop.*");
toys["wind_up2 break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/wind_up2/break1.*"), get_sound("equipments/items/normal/toys/other/wind_up2/break2.*"), get_sound("equipments/items/normal/toys/other/wind_up2/break3.*")};
toys["wind_up2 get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/wind_up2/get1.*"), get_sound("equipments/items/normal/toys/other/wind_up2/get2.*")};
toys["wind_up2 loop"] = get_sound("equipments/items/normal/toys/other/wind_up2/loop.*");
toys["wind_up3 break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/wind_up3/break1.*"), get_sound("equipments/items/normal/toys/other/wind_up3/break2.*"), get_sound("equipments/items/normal/toys/other/wind_up3/break3.*")};
toys["wind_up3 get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/wind_up3/get1.*"), get_sound("equipments/items/normal/toys/other/wind_up3/get2.*")};
toys["wind_up3 loop"] = get_sound("equipments/items/normal/toys/other/wind_up3/loop.*");
toys["wind_up4 break" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/wind_up4/break1.*"), get_sound("equipments/items/normal/toys/other/wind_up4/break2.*"), get_sound("equipments/items/normal/toys/other/wind_up4/break3.*")};
toys["wind_up4 get" + vdesc] = array<string> = {get_sound("equipments/items/normal/toys/other/wind_up4/get1.*"), get_sound("equipments/items/normal/toys/other/wind_up4/get2.*")};
toys["wind_up4 loop"] = get_sound("equipments/items/normal/toys/other/wind_up4/loop.*");
learnCategories["Toys"] = toys;
dictionary ui;
ui["Action complete: used in speaker tests and various other menus"] = get_sound("ui/menus/"+menupack+"/complete.*");
ui["Dialog close"] = get_sound("ui/dialogs/"+dlgpack+"/close.*");
ui["Dialog copy"] = get_sound("ui/dialogs/"+dlgpack+"/copy.*");
ui["Dialog open"] = get_sound("ui/dialogs/"+dlgpack+"/open.*");
ui["Dialog scrol"] = get_sound("ui/dialogs/"+dlgpack+"/scroll.*");
ui["Menu click"] = get_sound("ui/menus/"+menupack+"/click.*");
ui["Menu close"] = get_sound("ui/menus/"+menupack+"/close.*");
ui["Menu edge"] = get_sound("ui/menus/"+menupack+"/edge.*");
ui["Menu enter"] = get_sound("ui/menus/"+menupack+"/enter.*");
ui["Menu open"] = get_sound("ui/menus/"+menupack+"/open.*");
ui["Menu wrap"] = get_sound("ui/menus/"+menupack+"/wrap.*");
ui["Setting disable"] = get_sound("ui/menus/"+menupack+"/disable.*");
ui["Setting enable"] = get_sound("ui/menus/"+menupack+"/enable.*");
ui["Stats copy"] = get_sound("ui/menus/"+menupack+"/copy.*");
ui["Stats export"] = get_sound("ui/menus/"+menupack+"/export.*");
learnCategories["UI"] = ui;
dictionary weapons;
weapons["Bat draw"] = get_sound("equipments/weapons/melee/bat/draw.*");
weapons["Bat fire" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/bat/fire1.*"), get_sound("equipments/weapons/melee/bat/fire2.*"), get_sound("equipments/weapons/melee/bat/fire3.*")};
weapons["Bat hit" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/bat/hit1.*"), get_sound("equipments/weapons/melee/bat/hit2.*"), get_sound("equipments/weapons/melee/bat/hit3.*")};
weapons["Boot draw"] = get_sound("equipments/weapons/melee/boot/draw.*");
weapons["Boot fire" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/boot/fire1.*"), get_sound("equipments/weapons/melee/boot/fire2.*"), get_sound("equipments/weapons/melee/boot/fire3.*")};
weapons["Boot hit" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/boot/hit1.*"), get_sound("equipments/weapons/melee/boot/hit2.*"), get_sound("equipments/weapons/melee/boot/hit3.*")};
weapons["Club draw"] = get_sound("equipments/weapons/melee/club/draw.*");
weapons["Club fire" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/club/fire1.*"), get_sound("equipments/weapons/melee/club/fire2.*"), get_sound("equipments/weapons/melee/club/fire3.*")};
weapons["Club hit" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/club/hit1.*"), get_sound("equipments/weapons/melee/club/hit2.*"), get_sound("equipments/weapons/melee/club/hit3.*")};
weapons["Feat draw"] = get_sound("equipments/weapons/melee/feat/draw.*");
weapons["Feat fire" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/feat/fire1.*"), get_sound("equipments/weapons/melee/feat/fire2.*"), get_sound("equipments/weapons/melee/feat/fire3.*")};
weapons["Feat hit" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/feat/hit1.*"), get_sound("equipments/weapons/melee/feat/hit2.*"), get_sound("equipments/weapons/melee/feat/hit3.*")};
weapons["Fist draw"] = get_sound("equipments/weapons/melee/fist/draw.*");
weapons["Fist fire" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/fist/fire1.*"), get_sound("equipments/weapons/melee/fist/fire2.*")};
weapons["Fist hit" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/fist/hit1.*"), get_sound("equipments/weapons/melee/fist/hit2.*"), get_sound("equipments/weapons/melee/fist/hit3.*")};
weapons["Hammer draw"] = get_sound("equipments/weapons/melee/hammer/draw.*");
weapons["Hammer fire" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/hammer/fire1.*"), get_sound("equipments/weapons/melee/hammer/fire2.*"), get_sound("equipments/weapons/melee/hammer/fire3.*")};
weapons["Hammer hit" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/hammer/hit1.*"), get_sound("equipments/weapons/melee/hammer/hit2.*"), get_sound("equipments/weapons/melee/hammer/hit3.*")};
weapons["Knife draw"] = get_sound("equipments/weapons/melee/knife/draw.*");
weapons["Knife fire" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/knife/fire1.*"), get_sound("equipments/weapons/melee/knife/fire2.*"), get_sound("equipments/weapons/melee/knife/fire3.*")};
weapons["Knife hit" + vdesc] = array<string> = {get_sound("equipments/weapons/melee/knife/hit1.*"), get_sound("equipments/weapons/melee/knife/hit2.*"), get_sound("equipments/weapons/melee/knife/hit3.*")};
weapons["Laser draw"] = get_sound("equipments/weapons/melee/laser/draw.*");
weapons["Laser fire"] = get_sound("equipments/weapons/melee/laser/fire.*");
weapons["Laser hit"] = get_sound("equipments/weapons/melee/laser/hit.*");
weapons["Machine Gun draw: used in endless mode"] = get_sound("equipments/weapons/artillery/machine_gun/draw.*");
weapons["Machine gun empty: used in endless mode"] = get_sound("equipments/weapons/artillery/machine_gun/empty.*");
weapons["Machine gun fail: used in endless mode"] = get_sound("equipments/weapons/artillery/machine_gun/fail.*");
weapons["Machine gun fire: used in endless mode"] = get_sound("equipments/weapons/artillery/machine_gun/fire.*");
weapons["Machine gun hit: used in endless mode"] = get_sound("equipments/weapons/artillery/machine_gun/hit.*");
weapons["Machine gun ping: used in endless mode"] = get_sound("equipments/weapons/artillery/machine_gun/ping.*");
weapons["Machine gun reload: used in endless mode"] = get_sound("equipments/weapons/artillery/machine_gun/reload.*");
weapons["Machine gun shell: used in endless mode" + vdesc] = array<string> = {get_sound("equipments/weapons/artillery/machine_gun/shell1.*"), get_sound("equipments/weapons/artillery/machine_gun/shell2.*")};
weapons["Pistol draw: used in normal mode"] = get_sound("equipments/weapons/artillery/pistol/draw.*");
weapons["Pistol empty: used in normal mode"] = get_sound("equipments/weapons/artillery/pistol/empty.*");
weapons["Pistol fail: used in normal mode"] = get_sound("equipments/weapons/artillery/pistol/fail.*");
weapons["Pistol fire: used in normal mode"] = get_sound("equipments/weapons/artillery/pistol/fire.*");
weapons["Pistol hit: used in normal mode"] = get_sound("equipments/weapons/artillery/pistol/hit.*");
weapons["Pistol ping: used in normal mode"] = get_sound("equipments/weapons/artillery/pistol/ping.*");
weapons["Pistol reload: used in normal mode"] = get_sound("equipments/weapons/artillery/pistol/reload.*");
weapons["Pistol shell: used in normal mode" + vdesc] = array<string> = {get_sound("equipments/weapons/artillery/pistol/shell1.*"), get_sound("equipments/weapons/artillery/pistol/shell2.*")};
learnCategories["Weapons"] = weapons;
string[] sortedKeys = learnCategories.get_keys();
sortedKeys.sort_ascending();
setupmenu(false);
m.intro_text = "Learn game sounds menu. You can preview the most important sounds used by the game here. This menu is organized by sound category for easier viewing.";
int restoreIndex = 0;
for (uint i = 0; i < sortedKeys.length(); i++)
{
    if (sortedKeys[i] == last_learn_category)
    {
        restoreIndex = i;
        break;
    }
}
for (uint i = 0; i < sortedKeys.length(); i++)
{
string key = sortedKeys[i];
dictionary@ cat = cast<dictionary@>(learnCategories[key]);
if (cat is null) continue;
uint count = 0;
array<string> subkeys = cat.get_keys();
for (uint j = 0; j < subkeys.length(); j++)
{
if (cat.exists(subkeys[j]))
{
    string[]@ arr = cast<string[]@>(cat[subkeys[j]]);
    if (arr !is null)
    {
        count += arr.length();
    }
    else
    {
        string dummy;
        if (cat.get(subkeys[j], dummy))
            count += 1;
    }
}
}
m.set_focused_item(restoreIndex);
m.add_item(key+": This category has a total of " + count + " sound" + (count == 1 ? "" : "s"), key);
}
m.add_item("Back", "back");
int res = m.run();
string sel = m.get_selected_item_id();
if (res == -1 or sel == "back")
{
gamemenu();
}
if (learnCategories.exists(sel))
{
    last_learn_category = sel;
m.intro_text = sel + " menu. Press the up or down arrow keys to navigate the list, and enter to play one.";
learn_game_sounds_menu(cast<dictionary@>(learnCategories[sel]), "", m);
}
}
void pausemenu()
{
    setupmenu(false);
        m.add_item("Copy level and game mode to clipboard", "clg");
        m.add_item("Read current game session statistics", "rs");
        m.add_item("Quit game", "qmg");
        m.add_item("Resume game", "rmg");
m.add_item("view detailed stats", "vds");
    m.intro_text = "Pause menu.";
    int mres = m.run();
    string psmem = m.get_selected_item_id();
if (mres == -1)
{
    temp.play_stationary(get_sound("misc/game/*resume*"), false);
    resume_game();
    return;
}
        if (psmem == "clg")
{
            string mode = endless ? "Endless" : "Normal";
            string info = "Current Level: " + level + "\r\nGame Mode: " + mode;
            clipboard_copy_text(info);
            if (copexpsounds==true) dlgplay(get_sound("ui/menus/"+menupack+"/*copy*"), false);
            dlgmessage_return("Your current level and game mode has been copied to the clipboard.");
            pausemenu();
return;
        }
        if (psmem == "rs")
{
            string statsummary = "";
            statsummary += "Session Stats:\r\n";
            statsummary += "- Toys collected: " + collected_toys + "\r\n";
            statsummary += "- Keys collected: " + collected_keys + "\r\n";
            statsummary += "- Guards killed: " + killed_gards + "\r\n";
            statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
            statsummary += "- Steps taken: " + moved_steps + "\r\n";
int session_minutes = int(timeelapsed.ms() / 60000);
int session_seconds = int((timeelapsed.ms() % 60000) / 1000);
            statsummary += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds\r\n";
            dlgmessage_return(statsummary);
if (gamcopy == true)
{
    setupmenu(false);
    m.add_item("Copy results to clipboard", "copy");
    m.add_item("Export results to file", "export");
    m.add_item("Return to pause menu.", "cancel");
    m.intro_text = "What would you like to do with the current results for this game session?";
    int r = m.run();
    string resp = m.get_selected_item_id();
    if (r != -1)
    {
        if (resp == "copy")
        {
            clipboard_copy_text(statsummary);
            if (copexpsounds == true) dlgplay(get_sound("ui/menus/"+menupack+"/*copy*"), false);
            dlgmessage_return("All game session results copied to your clipboard.");
        }
        else if (resp == "export")
        {
            poastfile.open(DIRECTORY_APPDATA+"tsatria03/ToyMania/stats/player_posts.txt", "w");
            poastfile.write(statsummary);
            poastfile.close();
            if (copexpsounds == true) dlgplay(get_sound("ui/menus/"+menupack+"/*export*"), false);
            dlgmessage_return("All game session results exported to stats/player_posts.txt.");
        }
    }
}
            pausemenu();
return;
        }
        if (psmem == "qmg")
{
            if (quit_menu==true)
{
                setupmenu(false);
                m.add_item("Yes", "yes");
                m.add_item("No", "no");
                m.intro_text = "Are you sure you want to quit the game? You will lose all progress for this current game session.";
                int confirmres = m.run();
                string confirm = m.get_selected_item_id();
                if (confirmres == -1 || confirm == "no")
{
                    pausemenu();
return;
                }
            }
            resume_game();
            fade_multi_pool();
last_level_time = 0;
            level = 1;
            money = 0;
collected_toys = 0;
            collected_keys = 0;
            killed_gards = 0;
            destroyed_cars = 0;
            moved_steps = 0;
            session_playtime = 0;
            for (uint i = 0; i < achievements.length(); i++)
{
                if (achievements[i].isSessionBased)
                    achievements[i].currentTier = 0;
            }
            clear_inv();
            if (!endless) destroy_all_bosses();
destroy_all_healzones();
destroy_all_bullets();
            destroy_all_cars();
destroy_all_darts();
            destroy_all_gards();
            destroy_all_doors();
            destroy_all_keys();
            destroy_all_toys();
            gametimer.restart();
int base = endless ? 10000 : 1000;
int bonus = endless ? 2500 : 250;
int added = bonus * (gamemod - 1);
health = base + added;
maxhealth = base + added;
storehealth = base + added;
storemaxhealth = base + added;
    me.x = endless ? 50 : 25;
me.y = endless ? 50 : 25;
    maxx = endless ? 100 : 50;
maxy = endless ? 100 : 50;
            toynum = 20;
            if (!endless) bossdefeated = false;
            if (!endless) bossespawn = false;
alarm_started = false;
countdown_started = false;
small_storedest = false;
medium_storedest = false;
            carspawn = false;
cardest=false;
            gardspawn = false;
            keydest = false;
            keyspawn = false;
            objdest = false;
            objspawn = false;
            toydest = false;
            toyspawn = false;
            mainmenu();
            return;
        }
        if (psmem == "rmg")
{
temp.play_stationary(get_sound("misc/game/*resume*"), false);
            resume_game();
            return;
        }
if(psmem == "vds")
{
    setupmenu(false);
    m.add_item("Current level: " + level + " (" + (endless ? "Endless Mode" : "Normal Mode") + ")");
    m.add_item("Current location: " + me.x + ", " + me.y+". You're walking on "+gmt(me.x,me.y)+". Facing "+facing+".");
    m.add_item("Player HP: "+round(health / maxhealth * 100, 0) + " percent. "+health+" of "+maxhealth);
if(!endless) m.add_item("Store HP: "+round(storehealth / storemaxhealth * 100, 0) + " percent. "+storehealth+" of "+storemaxhealth);
    m.add_item("Cars on field: " + cars.length());
    m.add_item("Guards on field: " + gards.length());
    m.add_item("Keys on field: " + keys.length());
    m.add_item("Toys on field: " + toys.length());
    m.add_item("Cars destroyed: " + destroyed_cars);
    m.add_item("Guards defeated: " + killed_gards);
    m.add_item("Keys collected: " + collected_keys);
    m.add_item("Steps taken: " + moved_steps);
    m.add_item("Toys collected: " + collected_toys);
    int session_minutes = int(timeelapsed.ms() / 60000);
    int session_seconds = int((timeelapsed.ms() % 60000) / 1000);
    m.add_item("Total time played: " + session_minutes + " minutes, " + session_seconds + " seconds");
m.add_item("back", "back");
m.intro_text = "Detailed stats menu.";
    int vres = m.run();
    string psmem2 = m.get_selected_item_id();
if (vres == -1 || m.get_selected_item_id() == "")
{
pausemenu();
    return;
}
        if (psmem2 == "back")
{
pausemenu();
            return;
        }
}
    }
void shopmenu() 
{
dictionary prices;
prices.set("ammo_pack", 5.0);
prices.set("health_potion", 10.0);
prices.set("player_teleporter", 15.0);
prices.set("stun_dart", 20.0);
string[] folders = {"common", "other"};
string[] allitems;
dictionary itemfolders;
for (uint i = 0; i < folders.length(); i++)
{
string folder = folders[i];
string[] itemlist = find_directories("sounds/" + soundpack + "/equipments/items/endless/" + folder + "/*");
for (uint j = 0; j < itemlist.length(); j++)
{
string itemname = itemlist[j];
allitems.insert_last(itemname);
itemfolders.set(itemname, folder);
}
}
allitems.sort_ascending();
setupmenu(false);
m.add_item("You have " + round(money, 0) + " dollars available to spend", "shopinfo");
for (uint i = 0; i < allitems.length(); i++)
{
string itemname = allitems[i];
int owned = max(0, item_exists(itemname));
double itemPrice = 1.0;
if (prices.exists(itemname)) prices.get(itemname, itemPrice);
string label = itemname + ", costs " + round(itemPrice, 0) + " dollar" + (itemPrice != 1 ? "s" : "");
label += ". You currently have " + owned + " of these in your inventory.";
m.add_item(label, itemname);
}
m.add_item("back", "back");
m.intro_text = "Shop menu. What would you like to buy?";
int mres = m.run();
string shopem = m.get_selected_item_id();
if (mres == -1 || shopem == "shopinfo" || shopem == "back")
{
speak("Canceled");
boss_timer.resume();
gametimer.resume();
return;
}
if (money <= 0)
{
p.play_stationary(get_sound("misc/store/*error*"), false);
dlgmessage_return("Error: you don't have enough money to purchase this item.");
shopmenu();
return;
}
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=`~", false, "This character is not allowed.");
string amount_input = vd.input_box("", "How many " + shopem + "s would you like to buy?");
if (amount_input == "")
{
p.play_stationary(get_sound("misc/store/*error*"), false);
dlgmessage_return("Error. Invalid quantity. Please enter a valid amount for this item.");
shopmenu();
return;
}
double amount = string_to_number(amount_input);
if (amount <= 0)
{
p.play_stationary(get_sound("misc/store/*error*"), false);
dlgmessage_return("Error. Invalid quantity. Please enter a valid amount for this item.");
shopmenu();
return;
}
double price = 1.0;
if (prices.exists(shopem)) prices.get(shopem, price);
double total_cost = amount * price;
if (money < total_cost)
{
p.play_stationary(get_sound("misc/store/*error*"), false);
dlgmessage_return("Error. You don't have enough money to buy " + int(amount) + " " + shopem.replace("_", " ", true) + (amount == 1 ? "." : "s."));
shopmenu();
return;
}
give(shopem, int(amount));
money -= total_cost;
p.play_stationary(get_sound("misc/store/*buy*"), false);
dlgmessage_return("Purchase complete. You bought " + int(amount) + " " + shopem.replace("_", " ", true) + (amount == 1 ? "" : "s") + " for " + round(total_cost, 0) + " dollar" + (total_cost == 1 ? "" : "s") + ". You now have " + round(money, 0) + " dollar" + (money == 1 ? "" : "s") + " remaining.");
shopmenu();
}
void invmenu()
{
setupmenu(false);
string[] keys = inv.get_keys();
keys.sort_ascending();
for (uint i = 0; i < keys.length(); i++)
{
int amt;
inv.get(keys[i], amt);
string label = keys[i] + (amt == 1 ? "" : "s") + ", you have " + amt;
m.add_item(label, keys[i]);
}
int total = count_total_items();
m.intro_text = "Inventory menu. You currently have " + total + " item" + (total == 1 ? "" : "s") + " available to view.";
int mres = m.run();
string choice = m.get_selected_item_id();
if (mres == -1)
{
speak("Canceled");
boss_timer.resume();
gametimer.resume();
return;
}
if (choice == "")
{
speak("Canceled");
boss_timer.resume();
gametimer.resume();
return;
}
useitem(choice, true);
boss_timer.resume();
gametimer.resume();
return;
}
void weaponsmenu()
{
setupmenu(false);
string[] weaponNames = {"Bat", "Boot", "Club", "Feat", "Fist", "Hammer", "Knife", "Laser"};
string[] weaponIds   = {"bat", "boot", "club", "feat", "fist", "hammer", "knife", "laser"};
string[] weptypes    = {"melee", "melee", "melee", "melee", "melee", "melee", "melee", "melee"};
int[] damages        = {3, 6, 9, 12, 15, 18, 21, 24};
int[] horizRanges    = {1, 2, 3, 4, 5, 6, 7, 8};
int[] vertRanges     = {2, 3, 4, 5, 6, 7, 8, 9};
if (endless)
{
weaponNames.insert_last("Machine Gun");
weaponIds.insert_last("machine_gun");
weptypes.insert_last("artillery");
damages.insert_last(27);
horizRanges.insert_last(9);
vertRanges.insert_last(10);
}
else
{
weaponNames.insert_last("Pistol");
weaponIds.insert_last("pistol");
weptypes.insert_last("artillery");
damages.insert_last(27);
horizRanges.insert_last(9);
vertRanges.insert_last(10);
}
for (uint i = 0; i < weaponNames.length(); i++)
{
string label = weaponNames[i] + ": Attack " + damages[i] + ". Horizontal range " + horizRanges[i] + ". Vertical range " + vertRanges[i] + ".";
if (weaponIds[i] == weapontype2)
label += " (Equipped)";
m.add_item(label, weaponIds[i] + "|" + weptypes[i]);
}
m.intro_text = "Weapons menu.";
int res = m.run();
string selected = m.get_selected_item_id();
if (res == -1)
{
speak("Canceled");
boss_timer.resume();
gametimer.resume();
return;
}
string[] parts = string_split(selected, "|", false);
if (parts.length() != 2)
{
speak("Invalid selection.");
boss_timer.resume();
gametimer.resume();
return;
}
string selected_weptype2 = parts[0];
string selected_weptype = parts[1];
if (selected_weptype2 != weapontype2 || selected_weptype != weapontype)
{
draw_weapon(selected_weptype, selected_weptype2);
}
else
{
speak("This weapon is already equipped.");
}
boss_timer.resume();
gametimer.resume();
}
void achesmenu()
{
setupmenu();
    m.add_item("Session Achievements", "session");
    m.add_item("Lifetime Achievements", "lifetime");
m.add_item("Clear game achievements.", "chm");
if(statscopy==true) m.add_item("Copy all game Achievements to clipboard.", "cys");
if(statscopy==true) m.add_item("Export all game achievements to file", "cys2");
    m.add_item("back", "back");
m.intro_text = "Achievements menu. You can view your unlocked session and lifetime achievements, or clear or copy all of your achievements here.";
int mres=m.run();
string achm = m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
       if (achm == "session")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        show_session_achievements();
    }
if (achm == "lifetime")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        show_lifetime_achievements();
}
if (achm == "chm") 
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    setupmenu(false);
    m.add_item("Session achievements", "session");
    m.add_item("Lifetime achievements", "lifetime");
    m.add_item("Session and lifetime achievements", "both");
    m.add_item("Back", "back");
m.intro_text = "Choose which game achievements to clear. This will clear your game statistics.";
    int mres = m.run();
    string achmode = m.get_selected_item_id();
    if (mres == -1 or achmode == "back")
    {
        achesmenu();
    }
    setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
    m.intro_text = "Are you sure you want to reset your " + (achmode == "session" ? "session" : achmode == "lifetime" ? "lifetime" : "session and lifetime") + " achievements? This action can't be undone.";
    mres = m.run();
    string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
        achesmenu();
    }
    for (uint i = 0; i < achievements.length(); i++)
    {
        if ((achmode == "session" and achievements[i].isSessionBased) or (achmode == "lifetime" and !achievements[i].isSessionBased) or (achmode == "both"))
        {
            achievements[i].currentTier = 0;
        }
    }
    if (achmode == "session" or achmode == "both")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        moved_steps = 0;
        session_playtime = 0;
    }
    if (achmode == "lifetime" or achmode == "both")
    {
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_moved_steps = 0;
        total_playtime = 0;
    }
    writedata();
string modeLabel = (achmode == "session") ? "session" : (achmode == "lifetime") ? "lifetime" : "session and lifetime";
if(completesound==true) dlgplay(get_sound("ui/menus/"+menupack+"/*complete*"), false);
dlgmessage_return("Your " + modeLabel + " achievements have been cleared.");
    achesmenu();
}
if (achm == "cys")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    string achievementSummary = "Session Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
        {
            achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    achievementSummary += "\r\nLifetime Achievements:\r\n";
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (!achievements[i].isSessionBased)
        {
            achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
        }
    }
    clipboard_copy_text(achievementSummary);
if(copexpsounds==true) dlgplay(get_sound("ui/menus/"+menupack+"/*copy*") ,false);
    dlgmessage_return("All game achievements have been copied to your clipboard.");
    achesmenu();
}
if (achm == "cys2")
{
if (speak_menu_loading) speak("loading");
m.fade_music();
achfile.open(DIRECTORY_APPDATA+"tsatria03/ToyMania/stats/player_achievements.txt", "w");
string achievementSummary = "Session Achievements:\r\n";
for (uint i = 0; i < achievements.length(); i++)
{
if (achievements[i].isSessionBased)
achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
}
achievementSummary += "\r\nLifetime Achievements:\r\n";
for (uint i = 0; i < achievements.length(); i++)
{
if (!achievements[i].isSessionBased)
achievementSummary += "- " + achievements[i].get_progress_status() + "\r\n";
}
achfile.write(achievementSummary);
achfile.close();
if(copexpsounds==true) dlgplay(get_sound("ui/menus/"+menupack+"/*export*"),false);
dlgmessage_return("All game achievements have been exported to stats/player_achievements.txt.");
achesmenu();
}
if (achm == "back")
{
gamemenu();
}
}
void show_session_achievements()
{
    setupmenu(false);
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (achievements[i].isSessionBased)
            m.add_item(achievements[i].get_progress_status(), "");
    }
    m.add_item("Back", "back");
m.intro_text = "Session Achievements menu. These achievements reset every run and track short-term progress.";
    int r = m.run();
    if (r == -1 or m.get_selected_item_id() == "back")
        achesmenu();
    else
        show_session_achievements();
}
void show_lifetime_achievements()
{
    setupmenu(false);
    for (uint i = 0; i < achievements.length(); i++)
    {
        if (!achievements[i].isSessionBased)
            m.add_item(achievements[i].get_progress_status(), "");
    }
    m.add_item("Back", "back");
m.intro_text = "Lifetime Achievements menu. These achievements track your long-term overall game progress.";
    int r = m.run();
    if (r == -1 or m.get_selected_item_id() == "back")
        achesmenu();
    else
        show_lifetime_achievements();
}
void statsmenu()
{
setupmenu();
    m.add_item("Session Statistics", "session");
    m.add_item("Lifetime Statistics", "lifetime");
m.add_item("Clear game statistics.", "gs");
if(statscopy==true) m.add_item("Copy all game statistics to clipboard.", "cys");
if(statscopy==true) m.add_item("Export all game statistics to file", "cys2");
    m.add_item("back", "back");
m.intro_text = "Statistics menu. You can check your gameplay stats and unlockable player titles, or clear or copy all of your stats here.";
int mres=m.run();
string statsm = m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
       if (statsm == "session")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        view_session_stats();
    }
if (statsm == "lifetime")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
        view_lifetime_stats();
}
if (statsm == "gs")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
    setupmenu(false);
    m.add_item("session stats", "session");
    m.add_item("lifetime stats", "lifetime");
    m.add_item("session and lifetime stats", "both");
    m.add_item("Back", "back");
m.intro_text = "Choose which game statistics to clear. This will not clear your game achievements.";
    int mres = m.run();
    string gsm = m.get_selected_item_id();
    if (mres == -1 or gsm == "back")
    {
        statsmenu();
    }
    setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
    m.intro_text = "Are you sure you want to clear " + (gsm == "session" ? "your session stats" : gsm == "lifetime" ? "your lifetime stats" : "your session and lifetime stats") + "? This action can't be undone.";
    mres = m.run();
    string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
statsmenu();
    }
    if (gsm == "session")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        moved_steps = 0;
session_playtime = 0;
writedata();
if(completesound==true) dlgplay(get_sound("ui/menus/"+menupack+"/*complete*"), false);
        dlgmessage_return("Your session stats have been cleared.");
    }
    if (gsm == "lifetime")
    {
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_moved_steps = 0;
        total_playtime = 0;
        writedata();
if(completesound==true) dlgplay(get_sound("ui/menus/"+menupack+"/*complete*"), false);
        dlgmessage_return("Your lifetime stats have been cleared.");
    }
    if (gsm == "both")
    {
        collected_toys = 0;
        collected_keys = 0;
        killed_gards = 0;
        destroyed_cars = 0;
        moved_steps = 0;
        total_collected_toys = 0;
        total_collected_keys = 0;
        total_killed_gards = 0;
        total_destroyed_cars = 0;
        total_moved_steps = 0;
        total_playtime = 0;
        writedata();
if(completesound==true) dlgplay(get_sound("ui/menus/"+menupack+"/*complete*"), false);
        dlgmessage_return("Your session and lifetime stats have been cleared.");
    }
    statsmenu();
}
if (statsm == "cys")
{
if(speak_menu_loading==true) speak("loading");
m.fade_music();
int session_minutes = int(session_playtime / 60000);
int session_seconds = int((session_playtime % 60000) / 1000);
int total_minutes = int(total_playtime / 60000);
int total_seconds = int((total_playtime % 60000) / 1000);
string statsummary = "";
statsummary += "Session Stats:\r\n";
statsummary += "- Toys collected: " + collected_toys + "\r\n";
statsummary += "- Keys collected: " + collected_keys + "\r\n";
statsummary += "- Guards killed: " + killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + moved_steps + "\r\n";
statsummary += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
statsummary += "Lifetime Stats:\r\n";
statsummary += "- Last Played Date: " + last_played_date + "\r\n";
statsummary += "- Last Played Time: " + last_played_time + "\r\n";
statsummary += "- Toys collected: " + total_collected_toys + "\r\n";
statsummary += "- Keys collected: " + total_collected_keys + "\r\n";
statsummary += "- Guards killed: " + total_killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + total_moved_steps + "\r\n";
statsummary += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n";
    clipboard_copy_text(statsummary);
if(copexpsounds==true) dlgplay(get_sound("ui/menus/"+menupack+"/*copy*") ,false);
    dlgmessage_return("All game statistics have been copied to your clipboard.");
    statsmenu();
}
if (statsm == "cys2")
{
if (speak_menu_loading) speak("loading");
m.fade_music();
statfile.open(DIRECTORY_APPDATA+"tsatria03/ToyMania/stats/player_statistics.txt", "w");
int session_minutes = int(session_playtime / 60000);
int session_seconds = int((session_playtime % 60000) / 1000);
int total_minutes = int(total_playtime / 60000);
int total_seconds = int((total_playtime % 60000) / 1000);
string statsummary = "";
statsummary += "Session Stats:\r\n";
statsummary += "- Toys collected: " + collected_toys + "\r\n";
statsummary += "- Keys collected: " + collected_keys + "\r\n";
statsummary += "- Guards killed: " + killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + moved_steps + "\r\n";
statsummary += "- Time played: " + session_minutes + " minutes, " + session_seconds + " seconds.\r\n\r\n";
statsummary += "Lifetime Stats:\r\n";
statsummary += "- Last Played Date: " + last_played_date + "\r\n";
statsummary += "- Last Played Time: " + last_played_time + "\r\n";
statsummary += "- Toys collected: " + total_collected_toys + "\r\n";
statsummary += "- Keys collected: " + total_collected_keys + "\r\n";
statsummary += "- Guards killed: " + total_killed_gards + "\r\n";
statsummary += "- Cars destroyed: " + total_destroyed_cars + "\r\n";
statsummary += "- Steps taken: " + total_moved_steps + "\r\n";
statsummary += "- Total playtime: " + total_minutes + " minutes, " + total_seconds + " seconds.\r\n";
statfile.write(statsummary);
statfile.close();
if(copexpsounds==true) dlgplay(get_sound("ui/menus/"+menupack+"/*export*"),false);
dlgmessage_return("All game statistics have been exported to stats/player_statistics.txt.");
statsmenu();
}
if (statsm == "back")
{
gamemenu();
}
}
void view_session_stats()
{
    setupmenu(false);
    m.add_item("You have collected " + collected_toys + " toys.", "");
    m.add_item("You have collected " + collected_keys + " keys.", "");
    m.add_item("You have killed " + killed_gards + " guards.", "");
    m.add_item("You have destroyed " + destroyed_cars + " cars.", "");
    m.add_item("You have taken " + moved_steps + " steps.", "");
int session_minutes = session_playtime / 60000;
int session_seconds = (session_playtime % 60000) / 1000;
m.add_item("You've been playing for " + session_minutes + " minutes, " + session_seconds + " seconds.", "");
    m.add_item("Back", "back");
m.intro_text = "Session Statistics menu. You can view your stats for the current game session here.";
    int mres = m.run();
    string statsm = m.get_selected_item_id();
    if (mres == -1 || statsm == "back")
{
        statsmenu();
    }
else
{
        view_session_stats();
    }
}
void view_lifetime_stats()
{
    setupmenu(false);
    m.add_item("Last Played Date: " + last_played_date, "");
    m.add_item("Last Played Time: " + last_played_time, "");
    m.add_item("You have collected a total of " + total_collected_toys + " toys.", "");
    m.add_item("You have collected a total of " + total_collected_keys + " keys.", "");
    m.add_item("You have killed a total of " + total_killed_gards + " guards.", "");
    m.add_item("You have destroyed a total of " + total_destroyed_cars + " cars.", "");
    m.add_item("You have taken a total of " + total_moved_steps + " steps.", "");
    int total_minutes = int(total_playtime / 60000);
    int total_seconds = int((total_playtime % 60000) / 1000);
    m.add_item("You've been playing for a total of " + total_minutes + " minutes, " + total_seconds + " seconds.", "");
    m.add_item("Back", "back");
m.intro_text = "Lifetime Statistics menu. You can see your total stats across all of your game sessions here.";
    int mres = m.run();
    string statsm = m.get_selected_item_id();
    if (mres == -1 || statsm == "back")
{
        statsmenu();
    }
else
{
        view_lifetime_stats();
    }
}
void preffsmenu()
{
form.reset();
    form.create_window("Preferences", false);
int audsets = form.create_button("&audio settings");
int gamsets = form.create_button("&game settings");
    int rest = form.create_button("&reset settings");
int savesets = form.create_button("&save settings", true);
int back = form.create_button("&back");
form.focus(audsets);
spool.play_stationary(get_sound("ui/menus/"+menupack+"/*open*"),false);
    while (true)
    {
        form.monitor();
        wait(5);
        if (form.is_pressed(back) || key_repeating(KEY_ESCAPE))
        {
spool.play_stationary(get_sound("ui/menus/"+menupack+"/*close*"),false);
            mainmenu();
        }
        if (form.is_pressed(gamsets))
        {
gamsetsmenu();
}
        if (form.is_pressed(audsets))
        {
soundsetsmenu();
}
        if (form.is_pressed(rest))
        {
setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
m.intro_text="Are you sure you want to reset all of your settings?";
int mres=m.run();
string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
        preffsmenu();
    }
if(confirm=="yes")
{
if(file_exists(DIRECTORY_APPDATA+"tsatria03/ToyMania/saves/settings.tmg")) file_delete(DIRECTORY_APPDATA+"tsatria03/ToyMania/saves/settings.tmg");
resetpreffs();
writepreffs();
if(completesound==true) dlgplay(get_sound("ui/menus/"+menupack+"/*complete*"), false);
dlgmessage_return("Settings reset.");
mainmenu();
}
}
        if (form.is_pressed(savesets))
        {
writepreffs();
if(completesound==true) dlgplay(get_sound("ui/menus/"+menupack+"/*complete*"), false);
dlgmessage_return("Settings saved.");
mainmenu();
}
}
    }
void gamsetsmenu()
{
    form.reset();
    form.create_window("Game settings", false);
int autoUpdateToggle = form.create_checkbox("Enable checking for game updates at startup.", auto_check_updates);
int menuWrap = form.create_checkbox("Enable menu wrapping in all menus.", menuwrap);
int showdesc = form.create_checkbox("Enable showing toggleable item descriptions.", showset_desc);
int runmode = form.create_checkbox("Enable automatic running when moving.", autorun);
int glb = form.create_checkbox("Enable behind pitch decrease.", behind_pitch);
int glb2 = -1;
if (showset_desc) glb2 = form.create_input_box("Behind pitch decrease: description", "This setting controls whether the pitch of sounds decrease when you are behind something.", "", 0, true, true);
int glh = form.create_checkbox("Enable HRTF support.", hrtf);
int glh2 = -1;
if (showset_desc) glh2 = form.create_input_box("HRTF: description", "This setting enhances the 3D sound positioning effect for headphone users.", "", 0, true, true);
int achsound = form.create_checkbox("Enable achievement sound effects.", play_ach_scores);
int achsound2 = -1;
if (showset_desc) achsound2 = form.create_input_box("Achievement SFX: description", "This setting controls the sounds played when unlocking achievements.", "", 0, true, true);
int achvoice = form.create_checkbox("Enable achievement speech feedback.", speak_ach_scores);
int achvoice2 = -1;
if (showset_desc) achvoice2 = form.create_input_box("Achievement speech: description", "This setting controls the spoken announcements of achievement progresses.", "", 0, true, true);
int givesound = form.create_checkbox("Enable item giving sound effects.", play_item_gives);
int givesound2 = -1;
if (showset_desc) givesound2 = form.create_input_box("Item giving SFX: description", "This setting controls the sounds played when receiving items in your inventory.", "", 0, true, true);
int collectspeech = form.create_checkbox("Enable item collect speech feedback.", speak_item_collects);
int collectspeech2 = -1;
if (showset_desc) collectspeech2 = form.create_input_box("Item collect speech: description", "This setting controls whether items should get announced as they're being collected.", "", 0, true, true);
int dlgspeech = form.create_checkbox("Enable dialog end speech feedback.", speak_dlg_enter);
int dlgspeech2 = -1;
if (showset_desc) dlgspeech2 = form.create_input_box("Dialog speech: description", "This setting controls whether the phrase 'Press enter or space to continue' is spoken after dialog messages.", "", 0, true, true);
int loadspeech = form.create_checkbox("Enable menu loading speech feedback.", speak_menu_loading);
int loadspeech2 = -1;
if (showset_desc) loadspeech2 = form.create_input_box("Menu loading speech: description", "This setting controls whether the 'Loading' phrase is spoken when opening various menus.", "", 0, true, true);
int gcp = form.create_checkbox("Enable post-game copy and export prompts.", gamcopy);
int gcp2 = -1;
if (showset_desc) gcp2 = form.create_input_box("Post-game copy/export: description", "This setting controls whether the game asks if you'd like to copy your session stats after pause, death or victory.", "", 0, true, true);
int scp = form.create_checkbox("Enable stat copy and export options.", statscopy);
int scp2 = -1;
if (showset_desc) scp2 = form.create_input_box("Stat copy/export: description", "This setting controls the showing of all copy and export entries from various stat based menus.", "", 0, true, true);
int lps = form.create_checkbox("Enable looping of previewed sounds.", loop_previews);
int lps2 = -1;
if (showset_desc) lps2 = form.create_input_box("Loop previews: description", "This setting controls whether the sounds found in the Learn Sounds menu loop until another sound is selected or the Escape key is pressed.", "", 0, true, true);
int vsc = form.create_checkbox("Enable variant-based sound descriptions.", variant_descriptions);
int vsc2 = -1;
if (showset_desc) vsc2 = form.create_input_box("Variant sound: description", "This setting controls whether sounds that have multiple variants will include a description along side them.", "", 0, true, true);
int cfs = form.create_checkbox("Enable copy and export confirmation sounds.", copexpsounds);
int cfs2 = -1;
if (showset_desc) cfs2 = form.create_input_box("Copy/export sound: description", "This setting controls the playing of short chimes after copying or exporting files to and from the clipboard.", "", 0, true, true);
int qcm = form.create_checkbox("Enable quit confirmation prompts.", quit_menu);
int qcm2 = -1;
if (showset_desc) qcm2 = form.create_input_box("Quit prompt: description", "This setting controls whether the game will show a prompt to quit the current game session before quitting from the Escape or pause menu.", "", 0, true, true);
int countsound = form.create_checkbox("Enable countdown sound effects.", playcounts);
int countsound2 = -1;
if (showset_desc) countsound2 = form.create_input_box("Countdown SFX: description", "This setting controls the sounds played when you only have 10 seconds left in the sixth level of the normal game mode.", "", 0, true, true);
int levsound = form.create_checkbox("Enable levelup sound effects.", playlevels);
int levsound2 = -1;
if (showset_desc) levsound2 = form.create_input_box("Level-up SFX: description", "This setting controls the sounds played when you reach the next level in a game.", "", 0, true, true);
int compsound = form.create_checkbox("Enable action complete sounds.", completesound);
int compsound2 = -1;
if (showset_desc) compsound2 = form.create_input_box("Complete SFX: description", "This setting controls the sounds played when you complete sertain actions throughout various menus.", "", 0, true, true);
int togsound = form.create_checkbox("Enable toggle switch sounds.", togglesound);
int togsound2 = -1;
if (showset_desc) togsound2 = form.create_input_box("Toggle switch SFX: description", "This setting controls the sounds played when you enable or disable sertain settings found in the prefferences menu.", "", 0, true, true);
    int cancel = form.create_button("&cancel");
int ok = form.create_button("&okay");
form.focus(autoUpdateToggle);
spool.play_stationary(get_sound("ui/menus/"+menupack+"/*open*"),false);
    while (true)
    {
        wait(5);
        form.monitor();
auto_check_updates=form.is_checked(autoUpdateToggle);
menuwrap = form.is_checked(menuWrap);
showset_desc = form.is_checked(showdesc);
autorun = form.is_checked(runmode);
            behind_pitch = form.is_checked(glb);
            hrtf = form.is_checked(glh);
            sound_global_hrtf = hrtf;
            play_ach_scores = form.is_checked(achsound);
            speak_ach_scores = form.is_checked(achvoice);
play_item_gives = form.is_checked(givesound);
speak_item_collects = form.is_checked(collectspeech);
            speak_dlg_enter = form.is_checked(dlgspeech);
            speak_menu_loading = form.is_checked(loadspeech);
            gamcopy = form.is_checked(gcp);
            statscopy = form.is_checked(scp);
            loop_previews = form.is_checked(lps);
            variant_descriptions = form.is_checked(vsc);
            copexpsounds = form.is_checked(cfs);
            quit_menu = form.is_checked(qcm);
            playcounts = form.is_checked(countsound);
            playlevels = form.is_checked(levsound);
completesound = form.is_checked(compsound);
togglesound = form.is_checked(togsound);
        if (form.is_pressed(cancel) || key_repeating(KEY_ESCAPE))
        {
spool.play_stationary(get_sound("ui/menus/"+menupack+"/*close*"),false);
            preffsmenu();
        }
        if (form.is_pressed(ok))
        {
            preffsmenu();
        }
    }
}
void gamsetsmenu2()
{
    form.reset();
    form.create_window("Game settings", false);
int runmode = form.create_checkbox("Enable automatic running when moving.", autorun);
int glb = form.create_checkbox("Enable behind pitch decrease.", behind_pitch);
int glh = form.create_checkbox("Enable HRTF support.", hrtf);
int achsound = form.create_checkbox("Enable achievement sound effects.", play_ach_scores);
int achvoice = form.create_checkbox("Enable achievement speech feedback.", speak_ach_scores);
int givesound = form.create_checkbox("Enable item giving sound effects.", play_item_gives);
int collectspeech = form.create_checkbox("Enable item collect speech feedback.", speak_item_collects);
int gcp = form.create_checkbox("Enable post-game copy and export prompts.", gamcopy);
int qcm = form.create_checkbox("Enable quit confirmation prompts.", quit_menu);
int countsound = form.create_checkbox("Enable countdown sound effects.", playcounts);
int levsound = form.create_checkbox("Enable levelup sound effects.", playlevels);
    int cancel = form.create_button("&cancel");
int ok = form.create_button("&okay");
form.focus(runmode);
spool.play_stationary(get_sound("ui/menus/"+menupack+"/*open*"),false);
    while (true)
    {
        wait(5);
        form.monitor();
autorun = form.is_checked(runmode);
            behind_pitch = form.is_checked(glb);
            hrtf = form.is_checked(glh);
            sound_global_hrtf = hrtf;
            play_ach_scores = form.is_checked(achsound);
            speak_ach_scores = form.is_checked(achvoice);
play_item_gives = form.is_checked(givesound);
speak_item_collects = form.is_checked(collectspeech);
            gamcopy = form.is_checked(gcp);
            quit_menu = form.is_checked(qcm);
            playcounts = form.is_checked(countsound);
            playlevels = form.is_checked(levsound);
        if (form.is_pressed(cancel) || key_repeating(KEY_ESCAPE))
        {
spool.play_stationary(get_sound("ui/menus/"+menupack+"/*close*"),false);
speak("canceled");
resume_game();
return;
        }
        if (form.is_pressed(ok))
        {
writepreffs();
speak("Settings saved.");
resume_game();
return;
        }
    }
}
void soundsetsmenu()
{
form.reset();
    form.create_window("audio settings", false);
int gameAlarmVolumeSlider = form.create_slider("game alarm volume: adjustable", (alarmvolume + 50) * 2, 0, 100, "percent", 1);
int gameAmbienceVolumeSlider = form.create_slider("game ambience volume: adjustable", (toyambvolume + 50) * 2, 0, 100, "percent", 1);
int gameHeartbeatVolumeSlider = form.create_slider("game heartbeat volume: adjustable", (heartvolume + 50) * 2, 0, 100, "percent", 1);
int gameMusicVolumeSlider = form.create_slider("game music volume: adjustable", (toymusvolume + 50) * 2, 0, 100, "percent", 1);
int menuMusicVolumeSlider = form.create_slider("menu music volume: adjustable", (menumusvolume + 50) * 2, 0, 100, "percent", 1);
int masterGameVolumeSlider = form.create_slider("master game volume: adjustable", (int(master_volume) + 50) * 2, 0, 100, "percent", 1);
    int alarmTest = form.create_button("alarm sound test: switch");
    int ambTest = form.create_button("ambience sound test: switch");
    int heartbeatTest = form.create_button("heartbeat sound test: switch");
    int musTest = form.create_button("music sound test: switch");
    int musList = form.create_list("Test Tracks: menu", 2);
form.add_list_item(musList, "BossMusic: normal mode", "bossmus");
form.add_list_item(musList, "Game Music: normal and endless mode", "gamemus");
int sdm = form.create_button("Select sound &device. Currently set to " + soundcard);
int sgm, slm, spk;
if (dlgpack == "")
sgm = form.create_button("Select dialo&g theme for the " + soundpack + " sound pack. Currently set to nothing");
else
sgm = form.create_button("Select dialo&g theme for the " + soundpack + " sound pack. Currently set to " + dlgpack);
if (menupack == "")
slm = form.create_button("Select &menu theme for the " + soundpack + " sound pack. Currently set to nothing");
else
slm = form.create_button("Select &menu theme for the " + soundpack + " sound pack. Currently set to " + menupack);
if (soundpack == "")
spk = form.create_button("Select sound &pack. Currently set to nothing");
else
spk = form.create_button("Select sound &pack. Currently set to " + soundpack);
int cancel = form.create_button("&cancel");
int ok = form.create_button("&okay");
form.focus(gameAlarmVolumeSlider);
spool.play_stationary(get_sound("ui/menus/"+menupack+"/*open*"),false);
    while (true)
    {
        wait(5);
        form.monitor();
int currentMusIndex = form.get_list_position(musList);
if (currentMusIndex != lastMusicIndex && currentMusIndex != -1)
{
    lastMusicIndex = currentMusIndex;
mustype = form.get_list_item_id(musList, currentMusIndex);
    if (muspool.sound_is_playing(toytrackslot))
    {
        muspool.destroy_sound(toytrackslot);
            toytrackslot = muspool.play_stationary(get_sound("objects/sources/tracks/*"+mustype+"*"), true);
lastMusicIndex = currentMusIndex;
    }
    else
    {
            muspool.destroy_sound(toytrackslot);
lastMusicIndex = -1;
    }
}
toyambvolume = (form.get_slider(gameAmbienceVolumeSlider) / 2) - 50;
toymusvolume = (form.get_slider(gameMusicVolumeSlider) / 2) - 50;
alarmvolume = (form.get_slider(gameAlarmVolumeSlider) / 2) - 50;
heartvolume = (form.get_slider(gameHeartbeatVolumeSlider) / 2) - 50;
menumusvolume = (form.get_slider(menuMusicVolumeSlider) / 2) - 50;
master_volume = (form.get_slider(masterGameVolumeSlider) / 2) - 50;
set_sound_master_volume(master_volume);
        ambpool.update_sound_start_values(toyambslot, 0, toyambvolume, toyambpitch);
        muspool.update_sound_start_values(toytrackslot, 0, toymusvolume, toymuspitch);
        alarmpool.update_sound_start_values(alarmslot, 0, alarmvolume, alarmpitch);
        heartpool.update_sound_start_values(heartslot, 0, heartvolume, heartpitch);
        if (form.is_pressed(cancel) || key_repeating(KEY_ESCAPE))
        {
ambpool.destroy_sound(toyambslot);
muspool.destroy_sound(toytrackslot);
alarmpool.destroy_sound(alarmslot);
heartpool.destroy_sound(heartslot);
spool.play_stationary(get_sound("ui/menus/"+menupack+"/*close*"),false);
            preffsmenu();
        }
        if (form.is_pressed(ok))
        {
ambpool.destroy_sound(toyambslot);
muspool.destroy_sound(toytrackslot);
alarmpool.destroy_sound(alarmslot);
heartpool.destroy_sound(heartslot);
            preffsmenu();
        }
if (form.is_pressed(ambTest))
{
    if (ambpool.sound_is_playing(toyambslot))
{
if(togglesound==true) spool.play_stationary(get_sound("ui/menus/"+menupack+"/*disable*"),false);
speak("ambience off");
        ambpool.destroy_sound(toyambslot);
    }
else
{
if(togglesound==true) spool.play_stationary(get_sound("ui/menus/"+menupack+"/*enable*"),false);
speak("ambience on");
        toyambslot = ambpool.play_stationary(get_sound("objects/sources/ambiences/*gameloop*"), true);
    }
}
if (form.is_pressed(musTest))
{
    if (muspool.sound_is_playing(toytrackslot))
    {
if(togglesound==true) spool.play_stationary(get_sound("ui/menus/"+menupack+"/*disable*"), false);
speak("music off");
        muspool.destroy_sound(toytrackslot);
        lastMusicIndex = -1;
    }
    else
    {
        int musIndex = form.get_list_position(musList);
        if (musIndex >= 0)
        {
mustype = form.get_list_item_id(musList, musIndex);
if(togglesound==true) spool.play_stationary(get_sound("ui/menus/"+menupack+"/*enable*"), false);
speak("music on");
            muspool.destroy_sound(toytrackslot);
            toytrackslot = muspool.play_stationary(get_sound("objects/sources/tracks/*"+mustype+"*"), true);
            lastMusicIndex = musIndex;
        }
    }
}
if (form.is_pressed(alarmTest))
{
    if (alarmpool.sound_is_playing(alarmslot))
{
if(togglesound==true) spool.play_stationary(get_sound("ui/menus/"+menupack+"/*disable*"), false);
speak("alarm off");
        alarmpool.destroy_sound(alarmslot);
    }
else
{
if(togglesound==true) spool.play_stationary(get_sound("ui/menus/"+menupack+"/*enable*"), false);
speak("alarm on");
        alarmslot = alarmpool.play_stationary(get_sound("objects/sources/ambiences/*alarmloop*"), true);
    }
}
if (form.is_pressed(heartbeatTest))
{
    if (heartpool.sound_is_playing(heartslot))
{
if(togglesound==true) spool.play_stationary(get_sound("ui/menus/"+menupack+"/*disable*"), false);
speak("heartbeat off");
        heartpool.destroy_sound(heartslot);
    }
else
{
if(togglesound==true) spool.play_stationary(get_sound("ui/menus/"+menupack+"/*enable*"), false);
speak("heartbeat on");
        heartslot = heartpool.play_stationary(get_sound("misc/player/*heartstart*"), true);
    }
}
if(form.is_pressed(sdm))
{
ambpool.destroy_sound(toyambslot);
muspool.destroy_sound(toytrackslot);
alarmpool.destroy_sound(alarmslot);
heartpool.destroy_sound(heartslot);
string[]@ devices=get_sound_output_devices();
devices.remove_at(0);
devices.sort_ascending();
setupmenu(false);
for(uint i=0; i<devices.length(); i++)
{
    string soundstate = (i + 1 == sound_output_device) ? ": active" : ": inactive";
m.add_item(devices[i] + soundstate, devices[i]);
}
m.intro_text="Choose a sound device you would like to use in the game.";
int mres=m.run();
if(mres==-1)
{
soundsetsmenu();
}
    else if (mres >= 0 && mres < int(devices.length()))
    {
        soundcard = devices[mres];
        sound_output_device = mres + 1;
if(completesound==true) dlgplay(get_sound("ui/menus/"+menupack+"/*complete*"));
dlgmessage_return("Sound device set to "+soundcard+".");
soundsetsmenu();
}
}
if(form.is_pressed(sgm))
{
ambpool.destroy_sound(toyambslot);
muspool.destroy_sound(toytrackslot);
alarmpool.destroy_sound(alarmslot);
heartpool.destroy_sound(heartslot);
string[] dlgpacktyp=find_directories("sounds/"+soundpack+"/ui/dialogs/*");
if(dlgpacktyp.length()==0)
{
dlgmessage_return("Error. There are no dialog themes available to view.");
soundsetsmenu();
}
else
{
string[] dlgpacks=find_directories("sounds/"+soundpack+"/ui/dialogs/*");
setupmenu(false);
for(uint i=0; i<dlgpacks.length(); i++)
{
uint64 size = get_directory_size("sounds/"+soundpack+"/ui/dialogs/" + dlgpacks[i]);
string readable_size = measure_file_size(size);
m.add_item(dlgpacks[i]+", size: "+readable_size,dlgpacks[i]);
}
m.intro_text="Choose the dialog theme you would like to use to read all dialogs.";
int mres=m.run();
if(mres==-1)
{
soundsetsmenu();
}
else if (mres>=0 and mres<dlgpacks.length())
{
dlgpack=dlgpacks[mres];
if(completesound==true) dlgplay(get_sound("ui/menus/"+menupack+"/*complete*"));
dlgmessage_return("Dialog theme set to "+dlgpack+".");
soundsetsmenu();
}
}
}
if(form.is_pressed(slm))
{
ambpool.destroy_sound(toyambslot);
muspool.destroy_sound(toytrackslot);
alarmpool.destroy_sound(alarmslot);
heartpool.destroy_sound(heartslot);
string[] menupacktyp=find_directories("sounds/"+soundpack+"/ui/menus/*");
if(menupacktyp.length()==0)
{
dlgmessage_return("Error. There are no dialog themes available to view.");
soundsetsmenu();
}
else
{
string[] menupacks=find_directories("sounds/"+soundpack+"/ui/menus/*");
setupmenu(false);
for(uint i=0; i<menupacks.length(); i++)
{
uint64 size = get_directory_size("sounds/"+soundpack+"/ui/menus/" + menupacks[i]);
string readable_size = measure_file_size(size);
m.add_item(menupacks[i]+", size: "+readable_size,menupacks[i]);
}
m.intro_text="Choose the menu theme you would like to use in all menus.";
int mres=m.run();
if(mres==-1)
{
soundsetsmenu();
}
else if (mres>=0 and mres<menupacks.length())
{
menupack=menupacks[mres];
if(completesound==true) dlgplay(get_sound("ui/menus/"+menupack+"/*complete*"));
dlgmessage_return("Menu theme set to "+menupack+".");
soundsetsmenu();
}
}
}
if(form.is_pressed(spk))
{
ambpool.destroy_sound(toyambslot);
muspool.destroy_sound(toytrackslot);
alarmpool.destroy_sound(alarmslot);
heartpool.destroy_sound(heartslot);
string[] soundpacktyp=find_directories("sounds/*");
if(soundpacktyp.length()==0)
{
dlgmessage_return("Error. There are no sound packs available to view.");
soundsetsmenu();
}
else
{
string[] soundpacks=find_directories("sounds/*");
setupmenu(false);
for(uint i=0; i<soundpacks.length(); i++)
{
uint64 size = get_directory_size("sounds/" + soundpacks[i]);
string readable_size = measure_file_size(size);
m.add_item(soundpacks[i]+", size: "+readable_size,soundpacks[i]);
}
m.intro_text="Choose the sound pack you would like to use throughout the intire game.";
int mres=m.run();
if(mres==-1)
{
soundsetsmenu();
}
else if (mres>=0 and mres<soundpacks.length())
{
dlgpack="";
menupack="";
soundpack=soundpacks[mres];
if(completesound==true) dlgplay(get_sound("ui/menus/"+menupack+"/*complete*"));
dlgmessage_return("Sound pack set to "+soundpack+".");
soundsetsmenu();
}
}
}
}
}
void soundsetsmenu2()
{
form.reset();
    form.create_window("audio settings", false);
int gameAmbienceVolumeSlider = form.create_slider("game ambience volume: adjustable", (toyambvolume + 50) * 2, 0, 100, "percent", 1);
int gameMusicVolumeSlider = form.create_slider("game music volume: adjustable", (toymusvolume + 50) * 2, 0, 100, "percent", 1);
int gameAlarmVolumeSlider = form.create_slider("game alarm volume: adjustable", (alarmvolume + 50) * 2, 0, 100, "percent", 1);
int gameHeartbeatVolumeSlider = form.create_slider("game heartbeat volume: adjustable", (heartvolume + 50) * 2, 0, 100, "percent", 1);
int cancel = form.create_button("&cancel");
int ok = form.create_button("&okay");
form.focus(gameAmbienceVolumeSlider);
spool.play_stationary(get_sound("ui/menus/"+menupack+"/*open*"),false);
    while (true)
    {
        wait(5);
        form.monitor();
toyambvolume = (form.get_slider(gameAmbienceVolumeSlider) / 2) - 50;
toymusvolume = (form.get_slider(gameMusicVolumeSlider) / 2) - 50;
alarmvolume = (form.get_slider(gameAlarmVolumeSlider) / 2) - 50;
heartvolume = (form.get_slider(gameHeartbeatVolumeSlider) / 2) - 50;
        ambpool.update_sound_start_values(toyambslot, 0, toyambvolume, toyambpitch);
        muspool.update_sound_start_values(toytrackslot, 0, toymusvolume, toymuspitch);
        alarmpool.update_sound_start_values(alarmslot, 0, alarmvolume, alarmpitch);
        heartpool.update_sound_start_values(heartslot, 0, heartvolume, heartpitch);
        if (form.is_pressed(cancel) || key_repeating(KEY_ESCAPE))
        {
spool.play_stationary(get_sound("ui/menus/"+menupack+"/*close*"),false);
speak("canceled");
resume_game();
return;
        }
        if (form.is_pressed(ok))
        {
writepreffs();
speak("Settings saved.");
resume_game();
return;
        }
}
    }
